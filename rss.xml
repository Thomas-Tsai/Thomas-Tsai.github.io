<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Sat, 19 Oct 2024 10:42:31 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Joplin Pages Publisher</generator>
        <item>
            <title><![CDATA[Ubuntu 人臉辨識登入]]></title>
            <guid>5caccf0158c248b288f2b7699bcd5228</guid>
            <pubDate>Sat, 19 Oct 2024 10:23:34 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="ubuntu-人臉辨識登入">Ubuntu 人臉辨識登入</h1>
<p>Howdy 為 Linux 提供 Windows Hello™ 風格的身份驗證。使用內建紅外線發射器和攝影機與臉部辨識相結合來證明您是誰。</p>
<p>預設搭配使用 PAM 可以在您需要驗證身份的任何時候自動進行辨識：登入、鎖定螢幕、sudo、su 等，都可以用！</p>
<h2 id="安裝-howdy">安裝 HOWDY</h2>
<p>Debian/Ubuntu 常見的方式！</p>
<div><pre class="hljs"><code>sudo<span class="hljs-built_in"> add-apt-repository </span>ppa:boltgolt/howdy
sudo apt update
sudo apt install howdy</code></pre></div>
<h2 id="設定">設定</h2>
<p>安裝好之後就會有指令 howdy</p>
<div><pre class="hljs"><code>Usage:

howdy [-U user] [-y] command [argument]

Command 	Description
<span class="hljs-built_in">add</span> 	<span class="hljs-built_in">Add</span> a new face model <span class="hljs-keyword">for</span> a<span class="hljs-built_in"> user
</span>clear 	<span class="hljs-built_in">Remove</span> all face models <span class="hljs-keyword">for</span> a<span class="hljs-built_in"> user
config </span>	Open the<span class="hljs-built_in"> config </span>file <span class="hljs-keyword">in</span> your<span class="hljs-built_in"> default </span>editor
<span class="hljs-built_in">disable</span> 	<span class="hljs-built_in">Disable</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">enable</span> howdy
list 	List all saved face models <span class="hljs-keyword">for</span> a<span class="hljs-built_in"> user
</span><span class="hljs-built_in">remove</span> 	<span class="hljs-built_in">Remove</span> a specific model <span class="hljs-keyword">for</span> a<span class="hljs-built_in"> user
</span>snapshot 	Take a snapshot of your camera input
test 	Test the camera <span class="hljs-keyword">and</span> recognition methods
version 	<span class="hljs-built_in">Print</span> the current version number</code></pre></div>
<h2 id="增加-model">增加 model</h2>
<p>例如</p>
<div><pre class="hljs"><code>sudo howdy <span class="hljs-built_in">add</span> -U USERNAME</code></pre></div>
<p>建議多做一些，另外也應該定時多更新，我發現可能太久沒建模，常常登入失敗。</p>
<p>另外，也可以用 config 調整設定</p>
<div><pre class="hljs"><code>sudo howdy config</code></pre></div>
<p>我覺的 dark_threshold 預設 50 有點嚴格，建議調整到75...看個人經驗摟</p>
<h2 id="reference">Reference</h2>
<p><a title="https://github.com/boltgolt/howdy" href="https://github.com/boltgolt/howdy">https://github.com/boltgolt/howdy</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Uninstall k8s]]></title>
            <guid>d16ebe7c0fae4c609fc4284ba63356c1</guid>
            <pubDate>Wed, 16 Oct 2024 02:13:45 GMT</pubDate>
            <content:encoded><![CDATA[<p>uninstall k8s</p>
<p>平常都是直接幹掉VM，剛好遇到不能這麼做時候，發現不知道怎麼移除k8s</p>
<p>如果 Ubuntu 就這樣：</p>
<div><pre class="hljs"><code>kubeadm reset
sudo apt-<span class="hljs-built_in">get</span> purge kubeadm kubectl kubelet kubernetes-cni kube*   
sudo apt-<span class="hljs-built_in">get</span> autoremove  
sudo rm -rf ~/.kube</code></pre></div>
<p>參考資料：<br />
<a title="https://stackoverflow.com/questions/44698283/how-to-completely-uninstall-kubernetes" href="https://stackoverflow.com/questions/44698283/how-to-completely-uninstall-kubernetes">https://stackoverflow.com/questions/44698283/how-to-completely-uninstall-kubernetes</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[KASM Workspace 經驗與紀錄]]></title>
            <guid>718da3e8741942239278378778a127c9</guid>
            <pubDate>Mon, 14 Oct 2024 15:19:20 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="kasm">KASM</h1>
<p>KASM 是工作串流平台，</p>
<p>從任何位置將您的工作空間直接傳輸到任何裝置上的網路瀏覽器。部份開放原始碼。運作於一些類似居家上班、安全運算環境之分析架構平台。透過網頁就可以開啟遠端桌面，因為使用容器，速度也比較快。該專案也有提供一些資料保護措施。</p>
<h3 id="offline-kasm-installation">offline KASM installation</h3>
<p>先安裝好 docker 然後開始安裝 KASM</p>
<div><pre class="hljs"><code>curl -O https:<span class="hljs-comment">//kasm-static-content.s3.amazonaws.com/kasm_release_1.15.0.06fdc8.tar.gz</span>
curl -O https:<span class="hljs-comment">//kasm-static-content.s3.amazonaws.com/kasm_release_service_images_amd64_1.15.0.06fdc8.tar.gz</span>
curl -O https:<span class="hljs-comment">//kasm-static-content.s3.amazonaws.com/kasm_release_workspace_images_amd64_1.15.0.06fdc8.tar.gz</span>
tar -xf kasm_release_1.<span class="hljs-number">15.0</span>.<span class="hljs-number">06</span>fdc8<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span>
sudo bash kasm_release/install<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--offline-workspaces</span> /tmp/kasm_release_workspace_images_amd64_1.<span class="hljs-number">15.0</span>.<span class="hljs-number">06</span>fdc8<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> <span class="hljs-attr">--offline-service</span> /tmp/kasm_release_service_images_amd64_1.<span class="hljs-number">15.0</span>.<span class="hljs-number">06</span>fdc8<span class="hljs-selector-class">.tar</span>.gz</code></pre></div>
<p>安裝完成會顯示：</p>
<div><pre class="hljs"><code>Kasm UI Login Credentials

<span class="hljs-code">------------------------------------
  username: admin@kasm.local
  password: ddddddd
------------------------------------</span>
<span class="hljs-code">  username: user@kasm.local</span>
<span class="hljs-section">  password: ddddddd
------------------------------------</span>

<span class="hljs-section">Kasm Database Credentials
------------------------------------</span>
<span class="hljs-code">  username: kasmapp</span>
<span class="hljs-section">  password: ddddddd
------------------------------------</span>

<span class="hljs-section">Kasm Redis Credentials
------------------------------------</span>
<span class="hljs-section">  password: ddddddd
------------------------------------</span>

<span class="hljs-section">Kasm Manager Token
------------------------------------</span>
<span class="hljs-section">  password: ddddddd
------------------------------------</span>

<span class="hljs-section">Kasm Guac Token
------------------------------------</span>
<span class="hljs-section">  password: ddddddd
------------------------------------</span>

<span class="hljs-section">Service Registration Token
------------------------------------</span>
<span class="hljs-section">  password: ddddddd
------------------------------------</span>
</code></pre></div>
<p>好好保留，之後一些設定可能會用到。</p>
<h3 id="dlp-data-loss-prevention-措施">DLP (Data Loss Prevention) 措施</h3>
<p>KASM 有提供 Data Loss Prevention 的防護，例如</p>
<h3 id="watermark-浮水印">watermark 浮水印</h3>
<p><a title="https://kasmweb.com/docs/latest/how_to/kasmvnc_dlp_policies.html" href="https://kasmweb.com/docs/latest/how_to/kasmvnc_dlp_policies.html">https://kasmweb.com/docs/latest/how_to/kasmvnc_dlp_policies.html</a></p>
<p>watermark 實作</p>
<p>group-&gt;all user-&gt;file mapping</p>
<div><pre class="hljs"><code><span class="hljs-symbol">network:</span> 
<span class="hljs-symbol">  ssl:</span>
<span class="hljs-symbol">   pem_certificate:</span> $<span class="hljs-punctuation">{</span>HOME<span class="hljs-punctuation">}</span>/.vnc/self.pem
<span class="hljs-symbol">   pem_key:</span> $<span class="hljs-punctuation">{</span>HOME<span class="hljs-punctuation">}</span>/.vnc/self.pem
<span class="hljs-symbol">  udp:</span>
<span class="hljs-symbol">    public_ip:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>
<span class="hljs-symbol">data_loss_prevention:</span>
<span class="hljs-symbol">  watermark:</span>
<span class="hljs-symbol">    repeat_spacing:</span> <span class="hljs-number">50</span>
<span class="hljs-symbol">    tint:</span> <span class="hljs-number">200</span>,<span class="hljs-number">200</span>,<span class="hljs-number">235</span>,<span class="hljs-number">60</span>
<span class="hljs-symbol">    text:</span>
<span class="hljs-symbol">      template:</span> <span class="hljs-string">"TRE UserID ${KASM_USER} (${KASM_ID}) at %F %H:%M"</span>
<span class="hljs-symbol">      font:</span> auto
<span class="hljs-symbol">      font_size:</span> <span class="hljs-number">36</span>
<span class="hljs-symbol">      timezone_name:</span> Asia/Taipei</code></pre></div>
<p><img src="/_resources/b1c957971f734b48958082f35d16333f.png" /></p>
<h3 id="file-download-upload-clipboard-資料傳輸限制">file download upload clipboard ... 資料傳輸限制</h3>
<p><a title="https://kasmweb.com/docs/latest/security/data_loss_prevention.html#group-settings" href="https://kasmweb.com/docs/latest/security/data_loss_prevention.html#group-settings">https://kasmweb.com/docs/latest/security/data_loss_prevention.html#group-settings</a></p>
<h3 id="session-recording-桌面錄影">session recording 桌面錄影</h3>
<p><a title="https://kasmweb.com/docs/latest/guide/session_recording.html" href="https://kasmweb.com/docs/latest/guide/session_recording.html">https://kasmweb.com/docs/latest/guide/session_recording.html</a></p>
<p>Session recording is configured but not licensed. Will not enable. // 需要付費！</p>
<p>費用可以參考這邊<br />
<a title="https://www.kasmweb.com/server-checkout" href="https://www.kasmweb.com/server-checkout">https://www.kasmweb.com/server-checkout</a></p>
<h3 id="session-recording-實作">session recording 實作</h3>
<p>settings -&gt; global -&gt; Session Recording</p>
<p>access key &amp; secret key<br />
path:<br />
s3://kasm@tos.nchahahahc.org.tw/session-record/{user_id}/{image_friendly_name}-{start_date}.mp4</p>
<p>enable active code// 需要錢！</p>
<p>架構上，如果需要提供更安全的環境，一般會做</p>
<h3 id="multi-server-多主機架構">multi server 多主機架構</h3>
<p><a title="https://kasmweb.com/docs/latest/install/multi_server_install.html" href="https://kasmweb.com/docs/latest/install/multi_server_install.html">https://kasmweb.com/docs/latest/install/multi_server_install.html</a><br />
<a title="https://kasmweb.com/docs/latest/guide/compute/pools.html" href="https://kasmweb.com/docs/latest/guide/compute/pools.html">https://kasmweb.com/docs/latest/guide/compute/pools.html</a></p>
<p>基本上需要的是 docker agent<br />
找一台linux ubuntu2204 不需要publicl ip / private ip也可以<br />
安裝agent</p>
<div><pre class="hljs"><code>cd /tmp
curl -O https:<span class="hljs-comment">//kasm-static-content.s3.amazonaws.com/kasm_release_1.15.0.06fdc8.tar.gz</span>
tar -xf kasm_release_1.<span class="hljs-number">15.0</span>.<span class="hljs-number">06</span>fdc8<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span>
sudo bash kasm_release/install<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--role</span> agent <span class="hljs-attr">--public-hostname</span> <span class="hljs-selector-attr">[AGENT_HOSTNAME]</span> <span class="hljs-attr">--manager-hostname</span> <span class="hljs-selector-attr">[MANAGER_HOSTNAME]</span> <span class="hljs-attr">--manager-token</span> <span class="hljs-selector-attr">[MANAGER_TOKEN]</span></code></pre></div>
<p>MANAGER_HOSTNAME : kasm.hahaha.org<br />
MANAGER_TOKEN : ddddddd<br />
AGENT_HOSTNAME : 192.168.1.130</p>
<p>裝好之後回到admin可以看到已經自動新增了agent<br />
<img src="/_resources/09cc2c6550e646e59359bfda35bd9ad8.png" /></p>
<p>這時候docker還沒有辦法派到這邊，需要增加到pool<br />
<img src="/_resources/24a3e064069e41fa8f2b80d6bc2d5d04.png" /></p>
<p><img src="/_resources/dfa78470b10247dda0a011cc7f3982f9.png" /></p>
<p>之後workspace就會分散到pool</p>
<h3 id="ime">IME</h3>
<p>啟用輸入法切換，啟動之後輸入法切換才會正常<br />
<a title="https://kasmweb.com/docs/latest/how_to/ime.html" href="https://kasmweb.com/docs/latest/how_to/ime.html">https://kasmweb.com/docs/latest/how_to/ime.html</a></p>
<h3 id="keep-data">keep data</h3>
<p>啟用家目錄儲存<br />
<a title="https://kasmweb.com/docs/latest/guide/persistent_data.html" href="https://kasmweb.com/docs/latest/guide/persistent_data.html">https://kasmweb.com/docs/latest/guide/persistent_data.html</a></p>
<p>persistent data 實作</p>
<p>settings -&gt; global -&gt; Storage<br />
<img src="/_resources/eeff9faa03234b64b83afae0a5b049bd.png" /></p>
<p>group setting for <code>allow_persistent_profile </code> should be enabled</p>
<p>Persistent Profile Path<br />
s3://kasm@tos.hahaha.org.tw/user-profile/{username}/{image_id}/</p>
<h3 id="persistent-data-for-every-workspace-and-size-limit">persistent data for every workspace and size limit</h3>
<h3 id="docker-run-config-override-json">Docker Run Config Override (JSON)</h3>
<div><pre class="hljs"><code><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"hostname"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"kasm"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"extra_hosts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"proxy.ha.ha.org.tw"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"192.168.139.101"</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"environment"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"KASM_PROFILE_SIZE_LIMIT"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"20000"</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span></code></pre></div>
<p><img src="/_resources/d410aa67fb994612974aa008b091c267.png" /></p>
<h3 id="custom-network">custom network</h3>
<p><a title="https://kasmweb.com/docs/latest/how_to/bridged_network_source_nat.html" href="https://kasmweb.com/docs/latest/how_to/bridged_network_source_nat.html">https://kasmweb.com/docs/latest/how_to/bridged_network_source_nat.html</a></p>
<p>關鍵是：</p>
<div><pre class="hljs"><code>-<span class="hljs-keyword">A</span> POSTROUTING -s <span class="hljs-number">172.19.0.0</span>/<span class="hljs-number">16</span> -d <span class="hljs-number">203.145.220.209</span>/<span class="hljs-number">32</span> ! -o z_custom_a -j SNAT --to-source <span class="hljs-number">192.168.0.89</span></code></pre></div>
<p>Custom network for agent 實作</p>
<div><pre class="hljs"><code><span class="hljs-attribute">ip</span> a

<span class="hljs-number">2</span>: ens3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">8942</span> qdisc fq_codel state UP group default qlen <span class="hljs-number">1000</span>                                                                                                                                          
    link/ether fa:<span class="hljs-number">16</span>:3e:d8:b9:<span class="hljs-number">62</span> brd ff:ff:ff:ff:ff:ff                                                                
    altname enp0s3                                
    inet <span class="hljs-number">192.168.0.202</span>/<span class="hljs-number">24</span> metric <span class="hljs-number">100</span> brd <span class="hljs-number">192.168.0.255</span> scope global dynamic ens3
       valid_lft 39485sec preferred_lft 39485sec
    inet6 fe80::f816:3eff:fed8:b962/<span class="hljs-number">64</span> scope link 
       valid_lft forever preferred_lft forever


sudo docker network create \
    --driver bridge \
    --attachable \
    --opt <span class="hljs-string">"com.docker.network.bridge.name"</span>=<span class="hljs-string">"z_custom_a"</span> \
    --opt <span class="hljs-string">"com.docker.network.bridge.enable_ip_masquerade"</span>=<span class="hljs-string">"false"</span> \
    z_custom_a
    
ubuntu<span class="hljs-variable">@instance</span>-agent-<span class="hljs-number">1</span>:~$ sudo docker inspect z_custom_a | grep Subnet
                    <span class="hljs-string">"Subnet"</span>: <span class="hljs-string">"172.20.0.0/16"</span>,
                
ubuntu<span class="hljs-variable">@instance</span>-agent-<span class="hljs-number">1</span>:~$ sudo iptables -t nat -A POSTROUTING -s  <span class="hljs-number">172.20.0.0</span>/<span class="hljs-number">16</span> -d <span class="hljs-number">192.110.139.101</span>  ! -o z_custom_a -j SNAT --to-source  <span class="hljs-number">192.168.0.202</span>
ubuntu<span class="hljs-variable">@instance</span>-agent-<span class="hljs-number">1</span>:~$ 
ubuntu<span class="hljs-variable">@instance</span>-agent-<span class="hljs-number">1</span>:~$ sudo iptables -t nat -A POSTROUTING -s  <span class="hljs-number">172.20.0.0</span>/<span class="hljs-number">16</span> -d <span class="hljs-number">10.231.0.0</span>/<span class="hljs-number">16</span>  ! -o z_custom_a -j SNAT --to-source  <span class="hljs-number">192.168.0.202</span>
 
ubuntu<span class="hljs-variable">@instance</span>-agent-<span class="hljs-number">1</span>:~$ sudo iptables -t nat -A POSTROUTING -s  <span class="hljs-number">172.20.0.0</span>/<span class="hljs-number">16</span> -d <span class="hljs-number">192.168.0.0</span>/<span class="hljs-number">16</span>  ! -o z_custom_a -j SNAT --to-source  <span class="hljs-number">192.168.0.202</span>
</code></pre></div>
<p>以及其他功能，我的一些 Production 都有用上，感覺不錯！</p>
<h3 id="external_proxy-透過-proxy-進行防護">external_proxy 透過 Proxy 進行防護</h3>
<p><a title="https://kasmweb.com/docs/latest/how_to/external_proxy.html" href="https://kasmweb.com/docs/latest/how_to/external_proxy.html">https://kasmweb.com/docs/latest/how_to/external_proxy.html</a></p>
<h3 id="saml-認証">saml 認証</h3>
<p><a title="https://kasmweb.com/docs/latest/guide/saml_authentication.html" href="https://kasmweb.com/docs/latest/guide/saml_authentication.html">https://kasmweb.com/docs/latest/guide/saml_authentication.html</a></p>
<h3 id="workspace-registry">workspace registry</h3>
<p><a title="https://github.com/kasmtech/workspaces_registry_template" href="https://github.com/kasmtech/workspaces_registry_template">https://github.com/kasmtech/workspaces_registry_template</a><br />
<a title="https://github.com/kasmtech/workspaces_registry_template?tab=readme-ov-file" href="https://github.com/kasmtech/workspaces_registry_template?tab=readme-ov-file">https://github.com/kasmtech/workspaces_registry_template?tab=readme-ov-file</a><br />
<a title="https://github.com/Thomas-Tsai/kasm_registry/actions" href="https://github.com/Thomas-Tsai/kasm_registry/actions">https://github.com/Thomas-Tsai/kasm_registry/actions</a><br />
<a title="https://blog.libthomas.org/kasm_registry/1.0/" href="https://blog.libthomas.org/kasm_registry/1.0/">https://blog.libthomas.org/kasm_registry/1.0/</a></p>
<h3 id="custom-image">custom image</h3>
<p>build proxy desktop<br />
<a title="https://kasmweb.com/docs/latest/how_to/external_proxy.html" href="https://kasmweb.com/docs/latest/how_to/external_proxy.html">https://kasmweb.com/docs/latest/how_to/external_proxy.html</a><br />
add custom image to custom workspace<br />
<a title="https://github.com/kasmtech/workspaces_registry_template?tab=readme-ov-file#5-creating-workspaces" href="https://github.com/kasmtech/workspaces_registry_template?tab=readme-ov-file#5-creating-workspaces">https://github.com/kasmtech/workspaces_registry_template?tab=readme-ov-file#5-creating-workspaces</a></p>
<p>雖然不是完全的開源軟體，但是也很有誠意的釋出不少開源專案，如果非營利組織，在client 數量限制下用是沒有問題。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[測試用的 Windows]]></title>
            <guid>b0cbabcfc51b4436acd10450ff7a65c8</guid>
            <pubDate>Wed, 20 Mar 2024 03:31:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="測試用的-windows">測試用的 Windows</h1>
<p>最近有點人氣的 專案<br />
<a title="https://github.com/dockur/windows" href="https://github.com/dockur/windows">https://github.com/dockur/windows</a></p>
<h2 id="先用-docker-指令嘗試一下">先用 docker 指令嘗試一下</h2>
<div><pre class="hljs"><code>docker <span class="hljs-built_in">run</span> -it --rm --name windows -p 8006:8006 <span class="hljs-attribute">--device</span>=/dev/kvm --cap-<span class="hljs-built_in">add</span> NET_ADMIN --stop-timeout 120 dockurr/windows</code></pre></div>
<p>會看到訊息</p>
<div><pre class="hljs"><code><span class="hljs-attribute">BdsDxe</span>: failed to load Boot0002 <span class="hljs-string">"UEFI QEMU QEMU HARDDISK "</span> from PciRoot(<span class="hljs-number">0</span>x0)/Pci(<span class="hljs-number">0</span>xA,<span class="hljs-number">0</span>x0)/Scsi(<span class="hljs-number">0</span>x0,<span class="hljs-number">0</span>x0): Not Found
<span class="hljs-attribute">windows</span> | BdsDxe: loading Boot0001 <span class="hljs-string">"UEFI QEMU QEMU CD-ROM "</span> from PciRoot(<span class="hljs-number">0</span>x0)/Pci(<span class="hljs-number">0</span>x5,<span class="hljs-number">0</span>x0)/Scsi(<span class="hljs-number">0</span>x0,<span class="hljs-number">0</span>x0)
<span class="hljs-attribute">windows</span> | BdsDxe: starting Boot0001 <span class="hljs-string">"UEFI QEMU QEMU CD-ROM "</span> from PciRoot(<span class="hljs-number">0</span>x0)/Pci(<span class="hljs-number">0</span>x5,<span class="hljs-number">0</span>x0)/Scsi(<span class="hljs-number">0</span>x0,<span class="hljs-number">0</span>x0)</code></pre></div>
<p><a title="https://github.com/dockur/windows/issues/226#issuecomment-1997248926" href="https://github.com/dockur/windows/issues/226#issuecomment-1997248926">回應</a>是 <code>this normal</code>，所以不用管他。</p>
<p>然後開瀏覽器連到 127.0.0.1:8006</p>
<p>一開始會看到自動安裝、重開機，最後可以登入使用</p>
<p><img src="/_resources/b0553328f6464c469f2d5a6313520485.png" /></p>
<h2 id="嘗試用-docker-compose">嘗試用 docker-compose</h2>
<p>docker-compose 就是比較方便！</p>
<p>寫 docker-compose.yml</p>
<div><pre class="hljs"><code><span class="hljs-symbol">version:</span> <span class="hljs-string">"3"</span>
<span class="hljs-symbol">services:</span>
<span class="hljs-symbol">  windows:</span>
<span class="hljs-symbol">    image:</span> dockurr/windows
<span class="hljs-symbol">    container_name:</span> windows
<span class="hljs-symbol">    devices:</span>
      - <span class="hljs-keyword">/dev/</span>kvm
<span class="hljs-symbol">    cap_add:</span>
      - NET_ADMIN
<span class="hljs-symbol">    ports:</span>
      - <span class="hljs-number">8006</span>:<span class="hljs-number">8006</span>
      - <span class="hljs-number">3389</span>:<span class="hljs-number">3389</span>/tcp
      - <span class="hljs-number">3389</span>:<span class="hljs-number">3389</span>/udp
<span class="hljs-symbol">    stop_grace_period:</span> <span class="hljs-number">2</span>m
<span class="hljs-symbol">    restart:</span> on-failure
<span class="hljs-symbol">    environment:</span>
<span class="hljs-symbol">      RAM_SIZE:</span> <span class="hljs-string">"16G"</span>
<span class="hljs-symbol">      CPU_CORES:</span> <span class="hljs-string">"8"</span>
<span class="hljs-symbol">      DISK_SIZE:</span> <span class="hljs-string">"256G"</span>
<span class="hljs-symbol">    volumes:</span>
      - <span class="hljs-keyword">/home/</span>ubuntu<span class="hljs-keyword">/tmp/</span>win:/storage</code></pre></div>
<p>再用<code>docker-compose up -d</code> 去啟動安裝；之後再啟動就用<code>docker-compose start</code> 就可以開機。</p>
<p>很多需要的資訊<a title="https://github.com/dockur/windows?tab=readme-ov-file#faq" href="https://github.com/dockur/windows?tab=readme-ov-file#faq">FAQ</a>都有</p>
<p>例如</p>
<ol>
<li>手動安裝</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-symbol">environment:</span>
<span class="hljs-symbol">  MANUAL:</span> <span class="hljs-string">"Y"</span></code></pre></div>
<ol start="2">
<li>接上家裡的路由器</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span>
  <span class="hljs-attribute">DHCP</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Y"</span>
<span class="hljs-attribute">devices</span><span class="hljs-punctuation">:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">/dev/vhost-net</span>
<span class="hljs-attribute">device_cgroup_rules</span><span class="hljs-punctuation">:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">'c *:* rwm'</span></code></pre></div>
<p>等等。</p>
<h2 id="心得">心得</h2>
<p>就是方便快速弄的臨時的windows  還可以選版本，但是我覺得效能好像有打折...，還是 windows 不該要求效能...。但這樣的時綽方式也滿有趣的，看 Dockerfile 可以知道是用 scratch / debian base image，然後安裝一些套件，還有 qemux/qemu-docker:4.18 當作基礎在用。之後就是用 qemu 來啟動 windows  安裝與使用。這樣的方式一般確實會犧牲效能，但是操作好像滿方便的。先留著目前測試環境，會用一陣子看看。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[用 iptables 擋特定國家區域連線]]></title>
            <guid>4aecaf4dd5584ac7ab8747faa102d942</guid>
            <pubDate>Fri, 05 Jan 2024 02:35:04 GMT</pubDate>
            <content:encoded><![CDATA[<p>用 iptables 擋特定國家區域連線</p>
<p>這邊都說明的非常仔細了！照做</p>
<p><a title="https://blog.gslin.org/archives/2021/10/16/10377/%E7%94%A8-iptables-%E6%93%8B%E7%89%B9%E5%AE%9A%E5%9C%8B%E5%AE%B6%E7%9A%84%E5%B0%81%E5%8C%85/" href="https://blog.gslin.org/archives/2021/10/16/10377/%E7%94%A8-iptables-%E6%93%8B%E7%89%B9%E5%AE%9A%E5%9C%8B%E5%AE%B6%E7%9A%84%E5%B0%81%E5%8C%85/">https://blog.gslin.org/archives/2021/10/16/10377/用-iptables-擋特定國家的封包/</a></p>
<p><a title="https://ultramookie.com/2020/10/geoip-blocking-ubuntu-20.04/" href="https://ultramookie.com/2020/10/geoip-blocking-ubuntu-20.04/">https://ultramookie.com/2020/10/geoip-blocking-ubuntu-20.04/</a></p>
<p>安裝</p>
<div><pre class="hljs"><code>sudo apt-<span class="hljs-built_in">get</span> update; sudo apt-<span class="hljs-built_in">get</span> -y<span class="hljs-built_in"> upgrade
</span>sudo apt-<span class="hljs-built_in">get</span> install curl unzip perl
sudo apt-<span class="hljs-built_in">get</span> install xtables-addons-common
sudo apt-<span class="hljs-built_in">get</span> install libtext-csv-xs-perl libmoosex-types-netaddr-ip-perl</code></pre></div>
<p>更新我有小改：</p>
<div><pre class="hljs"><code><span class="hljs-comment">#!/bin/bash</span>

MON=$(date +<span class="hljs-string">"%m"</span>)
YR=$(date +<span class="hljs-string">"%Y"</span>)

wget https:<span class="hljs-regexp">//</span>download.db-ip.com<span class="hljs-regexp">/free/</span>dbip-country-lite-<span class="hljs-variable">${YR}</span>-<span class="hljs-variable">${MON}</span>.csv.gz -O <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/xt_geoip/</span>dbip-country-lite.csv.gz
gunzip <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/xt_geoip/</span>dbip-country-lite.csv.gz

<span class="hljs-regexp">/usr/</span>libexec<span class="hljs-regexp">/xtables-addons/</span>xt_geoip_build -D <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/xt_geoip/</span> -i <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/xt_geoip/</span>dbip-country-lite.csv

rm <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/xt_geoip/</span>dbip-country-lite.csv
</code></pre></div>
<p>最後就是放 crontab</p>
<div><pre class="hljs"><code><span class="hljs-symbol">11 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span> * * /<span class="hljs-keyword">usr</span>/local/bin/geo-update.sh</code></pre></div>
<p>iptables 看要怎麼玩:</p>
<div><pre class="hljs"><code># DROP ALL <span class="hljs-selector-tag">FROM</span> special country
iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -m geoip -<span class="hljs-selector-tag">p</span> tcp <span class="hljs-attr">--src-cc</span> RU,CN -j DROP

# allow <span class="hljs-number">443</span> <span class="hljs-selector-tag">from</span> TW
iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -m geoip -<span class="hljs-selector-tag">p</span> tcp <span class="hljs-attr">--dport</span> <span class="hljs-number">443</span> <span class="hljs-attr">--src-cc</span> TW -j ACCEPT
</code></pre></div>
<p>完！</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux switch ipv6]]></title>
            <guid>e4c0596599f84aa4ab5c1c8900f8ac3a</guid>
            <pubDate>Fri, 29 Dec 2023 01:46:35 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="linux-switch-ipv6">linux switch ipv6</h1>
<p>最近使用 name.com 遇到使用API需要加上白名單，但又不支援IPv6，只好停用。</p>
<p>每每都要 Google 一下語法，或是去network-manager 調整。</p>
<p>決定弄個script比較方便！</p>
<div><pre class="hljs"><code><span class="hljs-meta">#!/bin/bash</span>
iamroot=`whoami | grep root`
<span class="hljs-keyword">if</span> [ <span class="hljs-string">"X<span class="hljs-variable">$iamroot</span>"</span> == <span class="hljs-string">"X"</span> ];<span class="hljs-keyword">then</span>
    sudo <span class="hljs-variable">$0</span>
<span class="hljs-keyword">else</span>

    <span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-subst">$(sysctl -n net.ipv6.conf.all.disable_ipv6)</span>"</span> == <span class="hljs-string">'1'</span> ]; <span class="hljs-keyword">then</span>
        sysctl -w net.ipv6.conf.all.disable_ipv6=0
        sysctl -w net.ipv6.conf.default.disable_ipv6=0
    <span class="hljs-keyword">else</span>
        sysctl -w net.ipv6.conf.all.disable_ipv6=1
        sysctl -w net.ipv6.conf.default.disable_ipv6=1
    <span class="hljs-keyword">fi</span>
<span class="hljs-keyword">fi</span>
</code></pre></div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[轉移 google map place 到 kml]]></title>
            <guid>94e8807cdf454410bfe2f2c43d32ca9f</guid>
            <pubDate>Tue, 31 Oct 2023 01:31:53 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="轉移-google-map-place-到-kml">轉移 google map place 到 kml</h1>
<p>任何資料都不應該被單一雲端應用綁住。不知不覺間常常使用 Google Map 去標記常用的地點，驚訝的發現 Google Map 居然沒有匯出或是轉移的功能。於是做了一下功課，以下紀錄結果。</p>
<h2 id="匯出">匯出</h2>
<p>我查過 Google Map Place API 沒有 export 的功能，再查也沒有手動匯出的方式，除了 Google Takeout，從滿多地方可以看到討論有關<a title="https://support.google.com/maps/thread/69338785/how-can-i-get-export-to-export-all-saved-places?hl=en" href="https://support.google.com/maps/thread/69338785/how-can-i-get-export-to-export-all-saved-places?hl=en">如何從 Takeout 匯出</a></p>
<p>基本上就是先到 google takeout 網頁進行操作，網址：<a title="https://takeout.google.com" href="https://takeout.google.com">https://takeout.google.com</a><br />
<img src="/_resources/faa8fc6deff64929b2533f460e367210.png" /></p>
<p>建議先取消全選 再選取 地圖 (最愛地點)</p>
<p><img src="/_resources/77801a1e8bc84fa38271e8d9fb9ed31d.png" /></p>
<p>格式不用調整</p>
<p><img src="/_resources/e26312ebfe0548a085bd902349612de3.png" /></p>
<p>依序完成 takeout 設定之後，可以等 mail 收到下載連結。<br />
<img src="/_resources/2d6df7f52b264f67ae0d443b7083b3fd.png" /></p>
<p>或是存到其他空間。</p>
<p>我是選 mail 所以會收到下載連結</p>
<p><img src="/_resources/bdc59c346df7466881a33e80efe69c27.png" /></p>
<p>就存檔吧。</p>
<p>這邊比較可惜是不能設定持續，因為最多也就一年(6次)，所以，網頁也只能手動處理，非常不甘願...</p>
<h2 id="轉檔">轉檔</h2>
<p>雖然 GeoJSON 已經很多軟體有支援，but 我剛好要用的是 kml 。所以，上網找了 python kml ，不是很複雜，尤其是 <a title="https://simplekml.readthedocs.io" href="https://simplekml.readthedocs.io">simplekml</a>真的就是 SIMPLE...</p>
<p>直接拿 example 改寫，還比上網找工具快</p>
<div><pre class="hljs"><code>import json
import simplekml

f = open(<span class="hljs-string">'googlemap.json'</span>)
mapdata = json<span class="hljs-selector-class">.load</span>(f)
kml = simplekml<span class="hljs-selector-class">.Kml</span>()
kml<span class="hljs-selector-class">.document</span><span class="hljs-selector-class">.name</span> = <span class="hljs-string">"google"</span>

debug = True

<span class="hljs-keyword">for</span> point <span class="hljs-keyword">in</span> mapdata<span class="hljs-selector-attr">[<span class="hljs-string">'features'</span>]</span>:
    geometry = point<span class="hljs-selector-attr">[<span class="hljs-string">'geometry'</span>]</span>
    properties = point<span class="hljs-selector-attr">[<span class="hljs-string">'properties'</span>]</span>
    <span class="hljs-keyword">if</span> <span class="hljs-string">'location'</span> <span class="hljs-keyword">in</span> properties:
        location = properties<span class="hljs-selector-attr">[<span class="hljs-string">'location'</span>]</span>
        name = location<span class="hljs-selector-attr">[<span class="hljs-string">'name'</span>]</span>
        <span class="hljs-selector-tag">address</span> = location<span class="hljs-selector-attr">[<span class="hljs-string">'address'</span>]</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'address'</span> <span class="hljs-keyword">in</span> location <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
        country_code = location<span class="hljs-selector-attr">[<span class="hljs-string">'country_code'</span>]</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'country_code'</span> <span class="hljs-keyword">in</span> location <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
        <span class="hljs-keyword">if</span> <span class="hljs-string">'coordinates'</span> <span class="hljs-keyword">in</span> geometry:
            lon = geometry<span class="hljs-selector-attr">[<span class="hljs-string">'coordinates'</span>]</span><span class="hljs-selector-attr">[0]</span>
            lat = geometry<span class="hljs-selector-attr">[<span class="hljs-string">'coordinates'</span>]</span><span class="hljs-selector-attr">[1]</span>
        coordinates = <span class="hljs-selector-attr">[(lon, lat)]</span>
        pdate = properties<span class="hljs-selector-attr">[<span class="hljs-string">'date'</span>]</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'date'</span> <span class="hljs-keyword">in</span> properties <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
        url = properties<span class="hljs-selector-attr">[<span class="hljs-string">'google_maps_url'</span>]</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'google_maps_url'</span> <span class="hljs-keyword">in</span> properties <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
        description = <span class="hljs-string">"{}\n{}\n{}\n{}"</span><span class="hljs-selector-class">.format</span>(<span class="hljs-selector-tag">address</span>, country_code, pdate, url)

        <span class="hljs-keyword">if</span> debug == True: print(name, coordinates, description)
        pnt = kml<span class="hljs-selector-class">.newpoint</span>(name=name)
        pnt<span class="hljs-selector-class">.coords</span> = coordinates
        <span class="hljs-selector-id">#pnt</span><span class="hljs-selector-class">.address</span> = <span class="hljs-selector-tag">address</span>
        <span class="hljs-selector-id">#pnt</span><span class="hljs-selector-class">.snippet</span><span class="hljs-selector-class">.content</span> = url
        pnt.description=<span class="hljs-string">"address: {} ({})\n  datetime: {}\n url: {}"</span><span class="hljs-selector-class">.format</span>(<span class="hljs-selector-tag">address</span>, country_code, pdate, url)
        
kml<span class="hljs-selector-class">.save</span>(<span class="hljs-string">"googlemapPlace.kml"</span>)
</code></pre></div>
<h2 id="organic-maps">Organic Maps</h2>
<p>Organic Maps 就是之前的 maps.me，直接丟到檔案傳給 map app 就可以匯入 bookmark。</p>
<h2 id="reference">reference</h2>
<p><a title="https://support.google.com/maps/thread/69338785/how-can-i-get-export-to-export-all-saved-places?hl=en" href="https://support.google.com/maps/thread/69338785/how-can-i-get-export-to-export-all-saved-places?hl=en">https://support.google.com/maps/thread/69338785/how-can-i-get-export-to-export-all-saved-places?hl=en</a><br />
<a title="https://simplekml.readthedocs.io" href="https://simplekml.readthedocs.io">https://simplekml.readthedocs.io</a><br />
<a title="https://organicmaps.app/news/" href="https://organicmaps.app/news/">https://organicmaps.app/news/</a><br />
<a title="https://Maps.me" href="https://Maps.me">https://Maps.me</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CardDAV Sync]]></title>
            <guid>06195b16ad46459c8ab801bf496846c0</guid>
            <pubDate>Wed, 27 Sep 2023 01:33:45 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="carddav-sync">CardDAV Sync</h1>
<p>第一次使用 CardDAV 用來同步聯絡人，以 Xandikos 作為伺服器，用 vdirsyncer 進行主要同步，再配合 Thunder bird Tbsync 套件，堪稱完美。</p>
<h2 id="xandikos">Xandikos</h2>
<p>Xandikos 是一個輕量級但完整的 CalDAV 和 CardDAV 伺服器。</p>
<p>安裝；</p>
<div><pre class="hljs"><code>apt <span class="hljs-keyword">install</span> xandikos</code></pre></div>
<p>第一次啟動</p>
<div><pre class="hljs"><code>xandikos <span class="hljs-attr">--defaults</span> <span class="hljs-attr">--autocreate</span>  -d <span class="hljs-variable">$HOME</span>/dav -<span class="hljs-selector-tag">p</span> <span class="hljs-number">8888</span></code></pre></div>
<p>即可馬上進行測試與驗證，如果覺得不錯，想要持續使用，可以放到systemd user mode ; 因為 目前 xandikos Multi user 沒有很好用。</p>
<p>設定 systemd user mode 自動啟動：</p>
<div><pre class="hljs"><code>mkdir .config/systemd/user/xandikos.service </code></pre></div>
<p>xandikos.service</p>
<div><pre class="hljs"><code>[Unit]
Description=Xandikos CalDAV/CardDAV <span class="hljs-keyword">server</span>
<span class="hljs-keyword">After</span>=network.target

[Service]
ExecStart=/usr/bin/xandikos \
  <span class="hljs-comment">--directory $YOUR/DAV/PATH//dav \</span>
  <span class="hljs-comment">--listen-address 127.0.0.1 \</span>
  <span class="hljs-comment">--route-prefix=/dav \</span>
  <span class="hljs-comment">--port 8888 \</span>
  <span class="hljs-comment">--defaults</span>
<span class="hljs-keyword">Restart</span>=<span class="hljs-keyword">on</span>-failure
KillSignal=SIGQUIT
<span class="hljs-keyword">Type</span>=simple
NotifyAccess=<span class="hljs-keyword">all</span>

[Install]
WantedBy=multi-<span class="hljs-keyword">user</span>.target
</code></pre></div>
<div><pre class="hljs"><code>systemctl --<span class="hljs-keyword">user</span> <span class="hljs-title">daemon-reload</span>
systemctl --<span class="hljs-keyword">user</span> <span class="hljs-title">restart</span> xandikos.service</code></pre></div>
<p>同時有一個建議設定，因為系統已經有 apache2, 所以順便設定 recerse proxy</p>
<div><pre class="hljs"><code>       &lt;Location <span class="hljs-string">"/dav/"</span>&gt;
           ProxyPreserveHost On
           ProxyPass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8888</span><span class="hljs-regexp">/dav/</span>
           ProxyPassReverse http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8888</span><span class="hljs-regexp">/dav/</span>
           AuthType Basic
           AuthName DAV-Z
           AuthUserFile <span class="hljs-regexp">/xxxx/</span>.htpasswd
           Require valid-user
       &lt;/Location&gt; </code></pre></div>
<p>如此一來，我的DAV服務就是 <a title="https://xxx.thomas.org/dav/" href="https://xxx.thomas.org/dav/">https://xxx.thomas.org/dav/</a> 就會由 xandikos 進行。</p>
<h2 id="csv2vcf">csv2vcf</h2>
<p>我有固定去爬一些通訊錄檔成 csv 檔案，這時候要用 <a title="https://github.com/mridah/csv2vcf" href="https://github.com/mridah/csv2vcf">csv2vcf</a>，but vsf 3.0 thunderbird 不適應，所以魔改了一些</p>
<div><pre class="hljs"><code><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_to_vcard</span>(<span class="hljs-params">input_file, single_output, input_file_format</span>):
                                          
    FN = input_file_format[<span class="hljs-string">'name'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'name'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
    NICKNAME = input_file_format[<span class="hljs-string">'nickname'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'nickname'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
    ORG = input_file_format[<span class="hljs-string">'org'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'org'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
    DEP = input_file_format[<span class="hljs-string">'dep'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'dep'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
    TEL = input_file_format[<span class="hljs-string">'tel'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'tel'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
    TITLE = input_file_format[<span class="hljs-string">'TITLE'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'TITLE'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>                                                                                       
    EMAIL = input_file_format[<span class="hljs-string">'email'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'email'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
    ADDR = input_file_format[<span class="hljs-string">'addr'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'addr'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
    NOTE = input_file_format[<span class="hljs-string">'note'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'note'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
                                                                                    
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>( input_file, <span class="hljs-string">'r'</span> ) <span class="hljs-keyword">as</span> source_file:
        reader = csv.reader( source_file )                                
        i = <span class="hljs-number">0</span>         
        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:
                                       
            FN_VAL = row[FN] <span class="hljs-keyword">if</span> FN <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>                           
            NICKNAME_VAL = row[NICKNAME] <span class="hljs-keyword">if</span> NICKNAME <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
            ORG_VAL = row[ORG] <span class="hljs-keyword">if</span> ORG <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
            DEP_VAL = row[DEP] <span class="hljs-keyword">if</span> DEP <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
            TEL_VAL = row[TEL] <span class="hljs-keyword">if</span> TEL <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
            TITLE_VAL = row[TITLE] <span class="hljs-keyword">if</span> TITLE <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
            EMAIL_VAL = row[EMAIL] <span class="hljs-keyword">if</span> EMAIL <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>   
            ADDR_VAL = row[ADDR] <span class="hljs-keyword">if</span> ADDR <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
            NOTE_VAL = row[NOTE] <span class="hljs-keyword">if</span> NOTE <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
                  
            <span class="hljs-comment"># write each entry                                                                                                                                           </span>
            <span class="hljs-comment">#each_vcf = open('contacts/' + FN_VAL + '_' + TEL_VAL + ".vcf", 'w')</span>
            each_vcf = <span class="hljs-built_in">open</span>(<span class="hljs-string">'contacts/'</span> + NICKNAME_VAL.replace(<span class="hljs-string">" "</span>,<span class="hljs-string">""</span>) + <span class="hljs-string">".vcf"</span>, <span class="hljs-string">'w'</span>)
            each_vcf.write( <span class="hljs-string">'BEGIN:VCARD'</span> + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'VERSION:4.0'</span> + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'FN:'</span> + FN_VAL + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'NICKNAME:'</span> + NICKNAME_VAL + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'TEL;TYPE=work;VALUE=TEXT:'</span> + TEL_VAL + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'EMAIL;PREF=1:'</span> + EMAIL_VAL + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'ORG:'</span> + ORG_VAL + <span class="hljs-string">";"</span> + DEP_VAL +<span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'TITLE:'</span> + TITLE_VAL + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'ADR;TYPE=work:;;'</span> + ADDR_VAL + <span class="hljs-string">";;;;\n"</span>)
            each_vcf.write( <span class="hljs-string">'NOTE:'</span> + NOTE_VAL + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'END:VCARD'</span> + <span class="hljs-string">"\n"</span>)
            each_vcf.write(<span class="hljs-string">"\n"</span>)
            each_vcf.close()
  
            i += <span class="hljs-number">1</span>
  
        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">" VCARDS written"</span>)
        <span class="hljs-built_in">print</span>(<span class="hljs-string">'----------------------'</span>)

</code></pre></div>
<p>這樣 csv 內的所有資料都換換成 vcf 目錄，每個檔案都是一個單一個人通訊錄，且是 VCF 4.0 format，這樣就完成通訊錄轉換。</p>
<h2 id="vdirsync">vdirsync</h2>
<p>Vdirsyncer 是一個命令列工具，用於在各種伺服器和本機檔案系統之間同步日曆和通訊錄。最受歡迎的用例是將伺服器與本機資料夾同步，並使用一組其他程式來更改本地事件和聯絡人。然後，Vdirsyncer 可以將這些變更同步回伺服器。</p>
<p>所以目標就是把剛剛轉檔好的 vcf 同步到 xandikos ，設定：</p>
<p>先建立目錄<code>mkdir .vdirsyncer/</code></p>
<div><pre class="hljs"><code><span class="hljs-section">[general]</span>
<span class="hljs-attr">status_path</span> = <span class="hljs-string">"~/.vdirsyncer/status/"</span>

<span class="hljs-section">[pair narlabs_contacts]</span>
<span class="hljs-attr">a</span> = <span class="hljs-string">"my_labs_local"</span>
<span class="hljs-attr">b</span> = <span class="hljs-string">"my_labs_remote"</span>
<span class="hljs-attr">collections</span> = [<span class="hljs-string">"from a"</span>, <span class="hljs-string">"from b"</span>]

<span class="hljs-section">[storage my_labs_local]</span>
<span class="hljs-attr">type</span> = <span class="hljs-string">"filesystem"</span>
<span class="hljs-attr">path</span> = <span class="hljs-string">"~/.contacts/"</span>
<span class="hljs-attr">fileext</span> = <span class="hljs-string">".vcf"</span>

<span class="hljs-section">[storage my_labs_remote]</span>
<span class="hljs-attr">type</span> = <span class="hljs-string">"carddav"</span>

<span class="hljs-comment"># We can simplify this URL here as well. In theory it shouldn't matter.</span>
<span class="hljs-attr">url</span> = <span class="hljs-string">"https://www.thomas.org/dav/user/"</span>
<span class="hljs-attr">username</span> = <span class="hljs-string">""</span> 
<span class="hljs-attr">password</span> = <span class="hljs-string">""</span> 
</code></pre></div>
<p>執行 <code>vdirsync sync</code>  第一次跑可能會需要discover; 依照指令執行</p>
<div><pre class="hljs"><code>vdirsyncer discover labs_contacts
vdirsyncer <span class="hljs-keyword">sync</span></code></pre></div>
<h2 id="thunderbird">Thunderbird</h2>
<p>Thunder bird 安裝套件 tbsync 之後，開 tbsync, 新增帳號，選 carddav , 選 manual Configuration</p>
<p><img src="/_resources/28dfe5bd1bca48948beef2deb0dfc8fe.png" /></p>
<p>依序輸入 name, server, user, pass<br />
<img src="/_resources/689b00f0f40b43babfb59313ac092724.png" /></p>
<p>理論上就完成了！</p>
<p>之後我用 crontab 定期整理 lab 通訊錄，並且自動同步到主機，所有thunderbird 就可以快速更新通訊錄了！</p>
<h2 id="reference">Reference:</h2>
<p><a title="https://github.com/jelmer/xandikos" href="https://github.com/jelmer/xandikos">https://github.com/jelmer/xandikos</a><br />
<a title="https://www.xandikos.org/" href="https://www.xandikos.org/">https://www.xandikos.org/</a><br />
<a title="https://github.com/mridah/csv2vcf" href="https://github.com/mridah/csv2vcf">https://github.com/mridah/csv2vcf</a><br />
<a title="https://vdirsyncer.pimutils.org/en/stable/index.html" href="https://vdirsyncer.pimutils.org/en/stable/index.html">https://vdirsyncer.pimutils.org/en/stable/index.html</a><br />
<a title="https://vdirsyncer.pimutils.org/en/stable/tutorials/xandikos.html" href="https://vdirsyncer.pimutils.org/en/stable/tutorials/xandikos.html">https://vdirsyncer.pimutils.org/en/stable/tutorials/xandikos.html</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ACME.SH 實作]]></title>
            <guid>d6422f0316dc4c1e965099f18624dc08</guid>
            <pubDate>Fri, 28 Jul 2023 01:40:47 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="什麼時候會用到-acmesh">什麼時候會用到 acme.sh</h2>
<p>我的服務基本上決定不開放，所以沒有辦法符合 certbot 的 requirements  ，沒有開防火牆、沒有 port 80 的狀況，所以這時候可以用 <a title="https://letsencrypt.org/docs/challenge-types/#dns-01-challenge" href="https://letsencrypt.org/docs/challenge-types/#dns-01-challenge">acme.sh 來達成 dns-01</a>  的方式取得憑證，並設定好相關服務、自動更新憑證等措施，以下紀錄作法：</p>
<h2 id="install">install</h2>
<p><a title="https://github.com/acmesh-official/acme.sh" href="https://github.com/acmesh-official/acme.sh">acme.sh github 在這邊</a>，可以參考相關的指令用法。</p>
<p>最簡單的安裝方式：</p>
<div><pre class="hljs"><code>curl https://<span class="hljs-built_in">get</span>.acme.<span class="hljs-keyword">sh</span> | <span class="hljs-keyword">sh</span> -s email=tlinuxXXXXXX@gmail.<span class="hljs-keyword">com</span></code></pre></div>
<p>安裝好之後要讓路徑生效，可以重新登入，或是直接 reload bashrc</p>
<div><pre class="hljs"><code><span class="hljs-built_in">source</span> ~/.bashrc</code></pre></div>
<h2 id="透過-acmesh-以-dns-01-取得憑證">透過 acme.sh 以 dns-01 取得憑證</h2>
<p>以下步驟建議用root可以適當避免一些麻煩，畢竟需要重新啟動服務，讀寫一些設定檔，建議直接用 root 而不是sudo。</p>
<p>需要先準備 name.com 的 api token，可以再 <a title="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">這邊</a> 找到設定方式。</p>
<p>acme 部份如下</p>
<div><pre class="hljs"><code>sudo su

export Namecom_Username=<span class="hljs-string">'USERNAME'</span>
export Namecom_Token=<span class="hljs-string">'TOKEN'</span>

acme<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--issue</span> -d www<span class="hljs-selector-class">.libthomas</span><span class="hljs-selector-class">.org</span> <span class="hljs-attr">--dns</span> dns_namecom <span class="hljs-attr">--reloadcmd</span> <span class="hljs-string">"/etc/init.d/apache2 reload"</span>

acme<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--issue</span> -d imap<span class="hljs-selector-class">.libthomas</span><span class="hljs-selector-class">.org</span> <span class="hljs-attr">--dns</span> dns_namecom <span class="hljs-attr">--reloadcmd</span> <span class="hljs-string">"/etc/init.d/dovecot restart"</span></code></pre></div>
<p>順利完成之後，再沒有特別指定 install 路徑時，cert 相關檔案會在 /root/acme.sh/xxx_ecc/ 裏面。</p>
<h2 id="update-configuration">update configuration</h2>
<p>我有 web/apache2 與 imap/dovecot 兩個服務，分別修改下設定檔，再重新啟動服務來套用到新的路徑。</p>
<h3 id="webapache2">web/apache2</h3>
<p>/etc/apache2/sites-enabled/default-ssl.conf</p>
<div><pre class="hljs"><code>SSLCertificateFile <span class="hljs-regexp">/root/</span>.acme.sh<span class="hljs-regexp">/www.libthomas.org_ecc/</span>www.libthomas.org.cer
SSLCertificateKeyFile <span class="hljs-regexp">/root/</span>.acme.sh<span class="hljs-regexp">/www.libthomas.org_ecc/</span>www.libthomas.org.key
SSLCertificateChainFile <span class="hljs-regexp">/root/</span>.acme.sh<span class="hljs-regexp">/www.libthomas.org_ecc/</span>ca.cer</code></pre></div>
<h3 id="imapdocecot">imap/docecot</h3>
<p>/etc/dovecot/conf.d/10-ssl.conf</p>
<div><pre class="hljs"><code>ssl_cert = &lt;/root/<span class="hljs-selector-class">.acme</span>.sh/imap<span class="hljs-selector-class">.libthomas</span>.org_ecc/imap<span class="hljs-selector-class">.libthomas</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.cer</span>
ssl_key = &lt;/root/<span class="hljs-selector-class">.acme</span>.sh/imap<span class="hljs-selector-class">.libthomas</span>.org_ecc/imap<span class="hljs-selector-class">.libthomas</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.key</span>
</code></pre></div>
<h3 id="restart-or-reload-service">restart or reload service</h3>
<div><pre class="hljs"><code><span class="hljs-regexp">/etc/i</span>nit.d/apache2 reload
<span class="hljs-regexp">/etc/i</span>nit.d/dovecot restart</code></pre></div>
<h2 id="renew-and-notify">renew and notify</h2>
<p>acme.sh 會自動把 renew 放到 user crontab 裡</p>
<div><pre class="hljs"><code>crontab -l
<span class="hljs-number">46</span> <span class="hljs-number">0</span> * * * <span class="hljs-string">"/root/.acme.sh"</span><span class="hljs-regexp">/acme.sh --cron --home "/</span>root<span class="hljs-regexp">/.acme.sh" &gt; /</span>dev/<span class="hljs-keyword">null</span></code></pre></div>
<p>另外也提供 notify 機制，我的主機可以寄信，就直接用mail</p>
<div><pre class="hljs"><code><span class="hljs-built_in">export</span> <span class="hljs-attribute">MAIL_TO</span>=<span class="hljs-string">"tlinuxxxxxx@gmail.com"</span>
acme.sh --set-notify  --notify-hook mail</code></pre></div>
<h2 id="check">check</h2>
<p>可以看目前憑證</p>
<div><pre class="hljs"><code><span class="hljs-attribute">acme</span>.sh list
<span class="hljs-attribute">Main_Domain</span>         KeyLength  SAN_Domains  CA           Created               Renew
<span class="hljs-attribute">imap</span>.libthomas.org  <span class="hljs-string">"ec-256"</span>   no           ZeroSSL.com  <span class="hljs-number">2023</span>-<span class="hljs-number">07</span>-<span class="hljs-number">27</span>T15:<span class="hljs-number">17</span>:<span class="hljs-number">57</span>Z  <span class="hljs-number">2023</span>-<span class="hljs-number">09</span>-<span class="hljs-number">24</span>T15:<span class="hljs-number">17</span>:<span class="hljs-number">57</span>Z
<span class="hljs-attribute">www</span>.libthomas.org   <span class="hljs-string">"ec-256"</span>   no           ZeroSSL.com  <span class="hljs-number">2023</span>-<span class="hljs-number">07</span>-<span class="hljs-number">27</span>T15:<span class="hljs-number">08</span>:<span class="hljs-number">26</span>Z  <span class="hljs-number">2023</span>-<span class="hljs-number">09</span>-<span class="hljs-number">24</span>T15:<span class="hljs-number">08</span>:<span class="hljs-number">26</span>Z</code></pre></div>
<h2 id="namecom-2-api-兩階段認証錯誤">name.com 2 api 兩階段認証錯誤</h2>
<p>如果更新遇到錯誤：</p>
<div><pre class="hljs"><code>{<span class="hljs-comment">"message"</span>:<span class="hljs-comment">"Permission Denied"</span>,<span class="hljs-comment">"details"</span>:<span class="hljs-comment">"Authentication Error - Account Has Two Step Verification Enabled"</span>}</code></pre></div>
<p>有兩個地方要設定：</p>
<ol>
<li>name.com網頁 -&gt; account-&gt; settings -&gt; Security Settings -&gt; enable Name.com API Access<br />
<img src="/_resources/783c5fde5cd74677a597b4fec6ece4cc.png" /></li>
<li>name.com網頁 -&gt; account-&gt; settings -&gt; API tokens -&gt; Whitelisted IPs<br />
<img src="/_resources/d0bf2821e5c5427fa03fb66b5bf4cb60.png" /></li>
</ol>
<p>name.com 網頁設定好之後，應該就不會有認証問題！</p>
<h2 id="acmezerosslcom-出狀況">acme.zerossl.com 出狀況</h2>
<p>根據這邊 <a title="https://github.com/acmesh-official/acme.sh/issues/4927" href="https://github.com/acmesh-official/acme.sh/issues/4927">https://github.com/acmesh-official/acme.sh/issues/4927</a> 看到有類似的狀況。</p>
<p>處理方式是把憑證主機換掉</p>
<div><pre class="hljs"><code>acme.<span class="hljs-keyword">sh</span> --<span class="hljs-keyword">set</span>-default-<span class="hljs-keyword">ca</span> --server letsencrypt</code></pre></div>
<p>但是如果要 renew 就需要修改設定檔  /root/.acme.sh/some-domain.com/some-domain.com.conf</p>
<div><pre class="hljs"><code><span class="hljs-attr">Le_API</span>=<span class="hljs-string">'https://acme-v02.api.letsencrypt.org/directory'</span></code></pre></div>
<p>另外刪除設定檔內<br />
Le_OrderFinalize, Le_LinkOrder, and Le_LinkCert 這些設定，整行刪掉！</p>
<p>存檔之後 renwe<br />
"/root/.acme.sh"/acme.sh --cron --home "/root/.acme.sh"</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[於 Synology 啟用 lets encrypt 整合 name.com+2fa+auto renew]]></title>
            <guid>5c65c58a0ee44b88adfbc5422465630a</guid>
            <pubDate>Thu, 11 May 2023 08:53:13 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="於-synology-啟用-lets-encrypt-整合-namecom2faauto-renew">於 Synology 啟用 lets encrypt 整合 name.com+2fa+auto renew</h1>
<p>我的 Synology 設定再防火牆內，不對外直接提供服務，即使如此也是需要上 TLS 來提升安全性。基本上 Synology 已經支援 lets encrypt ，but 預設用的方式是 HTTP-01，所以在防火牆的的限制下，無法順利自動完成，也不法自動 renew 。之前解決方式就是另外找一個點，拿到 ca, certs 之後，再手動放進去，然後就過期了...</p>
<p>ACMESH 有提供解決方式 <a title="https://github.com/acmesh-official/acme.sh/wiki/Synology-NAS-Guide%EF%BC%8C%E4%B8%BB%E8%A6%81%E6%98%AF%E9%81%8B%E7%94%A8" href="https://github.com/acmesh-official/acme.sh/wiki/Synology-NAS-Guide%EF%BC%8C%E4%B8%BB%E8%A6%81%E6%98%AF%E9%81%8B%E7%94%A8">https://github.com/acmesh-official/acme.sh/wiki/Synology-NAS-Guide，主要是運用</a> DNS-01 的方式，這樣的方式可以再 Synology 跑，也可以再其他 linux 上執行並佈署到 NAS 內。</p>
<p>相關說明可以細看上面連結，我看完之後認為至少有一些需要測試：</p>
<ol>
<li>Firewall 不可更改 。應可用acme.sh 利用dns-01方式來排除</li>
<li>OTP/U2F 啟用，自動佈署問題。疑似可以用 Syno_DID</li>
<li>使用 name.com api。剛好有支援name.com api</li>
<li>確定可以 auto-renew</li>
</ol>
<p>第一次，我直接在 NAS 裏面做，但是權限和環境限制多，不方便做測試，決定先再linux server 上實作後再丟到NAS裏面跑。</p>
<h2 id="ubuntu-上測試">Ubuntu 上測試</h2>
<p>依上數網址陸續步驟執行：</p>
<h3 id="取得-acmesh-並解壓縮到-usrlocalshareacme">取得 acme.sh 並解壓縮到 /usr/local/share/acme/</h3>
<div><pre class="hljs"><code>sudo su
cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>
wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/acmesh-official/</span>acme.sh<span class="hljs-regexp">/archive/m</span>aster.tar.gz
tar xvf master.tar.gz
mv acme.sh-master/ acme
cd acme
.<span class="hljs-regexp">/acme.sh --install --nocron --home /u</span>sr<span class="hljs-regexp">/local/</span>share<span class="hljs-regexp">/acme/</span>certs --accountemail <span class="hljs-string">"email@gmailcom"</span>
source ~/.bashrc</code></pre></div>
<p>注意<code>--home</code> 建議用絕對路徑，且後面不需要root了</p>
<h3 id="設定-namecom-dns">設定 name.com dns</h3>
<p>我的 domain 是 name.com 註冊管理的，所有支援的都可以再 <a title="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">這邊</a> 找到設定方式，以我的name.com而例，需要進行</p>
<div><pre class="hljs"><code><span class="hljs-built_in">export</span> <span class="hljs-attribute">Namecom_Username</span>=<span class="hljs-string">"testuser"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">Namecom_Token</span>=<span class="hljs-string">"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span></code></pre></div>
<p>name.com 有提供 API ，用戶可以申請使用。</p>
<h3 id="creating-the-certificate-步驟">Creating the certificate 步驟</h3>
<div><pre class="hljs"><code><span class="hljs-built_in">export</span> <span class="hljs-attribute">Namecom_Username</span>=<span class="hljs-string">"testuser"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">Namecom_Token</span>=<span class="hljs-string">"ff........fff"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">CERT_DOMAIN</span>=<span class="hljs-string">"piracy.domain.org"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">CERT_DNS</span>=<span class="hljs-string">"dns_namecom"</span>
./acme.sh --issue --home /usr/local/share/acme/certs -d <span class="hljs-string">"<span class="hljs-variable">$CERT_DOMAIN</span>"</span> --dns <span class="hljs-string">"<span class="hljs-variable">$CERT_DNS</span>"</span></code></pre></div>
<p>可以看到 dns record 的變化，他會自動申請一個txt 然後驗證後刪掉。成功後相關的檔案就放在 certs/ 裏面！過程不需要 http 開通防火牆，算是成功用 dns-01 完成驗證。</p>
<h3 id="佈署到-nas">佈署到 NAS</h3>
<p>我的 Synology NAS 不支援只 listen 特定 FQDN 且有換 port 又有 OTP 搞得這邊有點麻煩。依照文件依序設定 SYNO_Username, SYNO_Password, SYNO_Hostname, SYNO_Scheme, SYNO_Port 都要有正確的設定。另外因為OTP，SYNO_DID 我測試不行，會表示無法登入，可能某個環節出錯；只好暫時用比較差勁的方式取代 SYNO_DID，那就是export SYNO_TOTP_SECRET=xxx 並安裝 oathtool</p>
<div><pre class="hljs"><code>sudo apt-<span class="hljs-built_in">get</span> install oathtool
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_TOTP_SECRET</span>=xxx</code></pre></div>
<p>TOTP 就搜尋 export totp 就有，例如備份google Authenticator 然那的檔案就有了。可以參考 <a title="https://support.google.com/accounts/answer/1066447?hl=en&amp;co=GENIE.Platform%3DiOS%E3%80%82" href="https://support.google.com/accounts/answer/1066447?hl=en&amp;co=GENIE.Platform%3DiOS%E3%80%82">https://support.google.com/accounts/answer/1066447?hl=en&amp;co=GENIE.Platform%3DiOS。</a></p>
<p>整個script 就像</p>
<div><pre class="hljs"><code><span class="hljs-comment">#!/bin/bash</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">CERT_DOMAIN</span>=<span class="hljs-string">"piracy.domain.org"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Username</span>=<span class="hljs-string">'user'</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Password</span>=<span class="hljs-string">'xxxx'</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Hostname</span>=<span class="hljs-string">"piracy.domain.org"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Scheme</span>=<span class="hljs-string">"https"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Port</span>=<span class="hljs-string">"8208"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_TOTP_SECRET</span>=<span class="hljs-string">"ffffffff"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Certificate</span>=<span class="hljs-string">""</span>
./acme.sh --deploy --insecure --home /usr/local/share/acme/certs -d <span class="hljs-string">"<span class="hljs-variable">$CERT_DOMAIN</span>"</span> --deploy-hook synology_dsm
</code></pre></div>
<p>順利就會看到完成，且佈署到 NAS 裏面。再從DSM去設定後續步驟就好。<br />
以上，基本完成，如果 ubuntu 再加上 crontab 就可以一直renew &amp; deploiy</p>
<p>但是我希望這個過程直接在 NAS 中進行，所以我把程式都搬到  NAS 裏面，再 ssh 進去處理。</p>
<h2 id="synology-nas-設定-renew">Synology NAS 設定 renew</h2>
<p>把剛剛寫的程式 acme/ 整個目錄搬到 NAS，基本上就是先從網頁上傳，然後用admin group user 用 ssh 登入，切換到 root 把程式放到 /usr/share/acme 就一樣了。</p>
<p>把上變步驟重新執行一次，install, dns, cert, deploy 都確認沒問題，就來renew。</p>
<p>NAS 上沒有 oathtool 可以另外找<a title="https://github.com/reedobrien/goathtool" href="https://github.com/reedobrien/goathtool">工具</a>代替。</p>
<p>renew code 很簡單，可以手動跑看看！</p>
<div><pre class="hljs"><code><span class="hljs-comment">#!/bin/bash</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">CERT_DOMAIN</span>=<span class="hljs-string">"piracy.domain.org"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Username</span>=<span class="hljs-string">'user'</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Password</span>=<span class="hljs-string">'xxxx'</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Hostname</span>=<span class="hljs-string">"piracy.domain.org"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Scheme</span>=<span class="hljs-string">"https"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Port</span>=<span class="hljs-string">"8208"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_TOTP_SECRET</span>=<span class="hljs-string">"ffffffff"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Certificate</span>=<span class="hljs-string">""</span>
./acme.sh --cron --home /usr/local/share/acme/certs -d <span class="hljs-string">"<span class="hljs-variable">$CERT_DOMAIN</span>"</span> --deploy-hook synology_dsm</code></pre></div>
<p>然後到 Synology 設定排程</p>
<blockquote>
<p>In DSM control panel, open the 'Task Scheduler' and create a new scheduled task for a &gt;user-defined script.</p>
</blockquote>
<blockquote>
<blockquote>
<p>General Setting: Task - Update default Cert. User - root<br />
Schedule: Setup a weekly renewal. For example, 11:00 am every saturday.<br />
Task setting: User-defined-script:</p>
</blockquote>
</blockquote>
<p>script 長這樣</p>
<div><pre class="hljs"><code><span class="hljs-built_in">export</span> <span class="hljs-attribute">CERT_DOMAIN</span>=<span class="hljs-string">"piracy.domain.org"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Username</span>=<span class="hljs-string">'user'</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Password</span>=<span class="hljs-string">'xxxx'</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Hostname</span>=<span class="hljs-string">"piracy.domain.org"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Scheme</span>=<span class="hljs-string">"https"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Port</span>=<span class="hljs-string">"8208"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_TOTP_SECRET</span>=<span class="hljs-string">"ffffffff"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Certificate</span>=<span class="hljs-string">""</span>
./acme.sh --cron --home /usr/local/share/acme/certs -d <span class="hljs-string">"<span class="hljs-variable">$CERT_DOMAIN</span>"</span> --deploy-hook synology_dsm</code></pre></div>
<p>差不多之後就是觀察會不會自動renew了！</p>
<p>後來也注意到 deploy 方法不少，也許之後換個更好的方式！</p>
<h2 id="reference">reference</h2>
<p><a title="https://lippertmarkus.com/2020/03/14/synology-le-dns-auto-renew/" href="https://lippertmarkus.com/2020/03/14/synology-le-dns-auto-renew/">https://lippertmarkus.com/2020/03/14/synology-le-dns-auto-renew/</a><br />
<a title="https://github.com/acmesh-official/acme.sh/wiki/Synology-NAS-Guide#configuring-certificate-renewal" href="https://github.com/acmesh-official/acme.sh/wiki/Synology-NAS-Guide#configuring-certificate-renewal">https://github.com/acmesh-official/acme.sh/wiki/Synology-NAS-Guide#configuring-certificate-renewal</a><br />
<a title="https://github.com/acmesh-official/acme.sh/wiki/deployhooks#20-deploy-the-cert-into-synology-dsm" href="https://github.com/acmesh-official/acme.sh/wiki/deployhooks#20-deploy-the-cert-into-synology-dsm">https://github.com/acmesh-official/acme.sh/wiki/deployhooks#20-deploy-the-cert-into-synology-dsm</a><br />
<a title="https://github.com/acmesh-official/acme.sh/wiki/deployhooks#20-deploy-the-cert-into-synology-dsm" href="https://github.com/acmesh-official/acme.sh/wiki/deployhooks#20-deploy-the-cert-into-synology-dsm">https://github.com/acmesh-official/acme.sh/wiki/deployhooks#20-deploy-the-cert-into-synology-dsm</a><br />
<a title="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a><br />
<a title="https://github.com/acmesh-official/acme.sh/issues/2727" href="https://github.com/acmesh-official/acme.sh/issues/2727">https://github.com/acmesh-official/acme.sh/issues/2727</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ssh-agent]]></title>
            <guid>d1f23bb1240c4c09b39dae3c29ba04ff</guid>
            <pubDate>Wed, 03 May 2023 06:27:56 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="ssh-agent">ssh-agent</h1>
<p>從 github 上看到</p>
<blockquote>
<blockquote>
<p>SSH agent forwarding can be used to make deploying to a server simple. It allows you to use your local SSH keys instead of leaving keys (without passphrases!) sitting on your server.</p>
</blockquote>
</blockquote>
<p>剛好很適合我最近再整理 ssh key 的需求。因為都換成實體金鑰(fido or tpm)整合模式，所以遠端的電腦要怎麼用 ssh key 來作認証，這時候 ssh-agent 就幫了大忙。</p>
<h2 id="實作1-用-fido-security-key">實作1 用 fido security key：</h2>
<h3 id="from-desktop">from desktop</h3>
<p>id_ecdsa_sk.pub 已經先上傳到github</p>
<div><pre class="hljs"><code><span class="hljs-built_in">eval</span> <span class="hljs-string">"$(ssh-agent -s)"</span>
ssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_ecdsa_sk
ssh -A server</code></pre></div>
<h3 id="from-server">from server</h3>
<p>主機內確認沒有任何 private key，但是可以用 ssh-agent 當作認証登入github</p>
<div><pre class="hljs"><code>ssh git@github.com  // 不會有提示，要再<span class="hljs-number">10</span>秒內按一下fido security key
PTY allocation request failed <span class="hljs-keyword">on</span> channel <span class="hljs-number">0</span>
Hi Thomas! You<span class="hljs-symbol">'ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.
Connection <span class="hljs-keyword">to</span> github.com closed. </code></pre></div>
<h2 id="實作2-用-tpm-security-key">實作2 用 TPM security key：</h2>
<p>和上面差異的只有 TPM security key</p>
<h3 id="from-notebook">from notebook</h3>
<p>public key 已經先上傳到 github</p>
<div><pre class="hljs"><code>eval <span class="hljs-string">"$(ssh-agent -s)"</span>
ssh-add -s <span class="hljs-regexp">/usr/</span>lib64<span class="hljs-regexp">/pkcs11/</span>opensc-pkcs11.so
ssh -A server</code></pre></div>
<h2 id="其他注意">其他注意</h2>
<h3 id="sshconfigure">ssh/configure</h3>
<p>可以考慮設定</p>
<div><pre class="hljs"><code>  <span class="hljs-attribute">AddKeysToAgent</span> <span class="hljs-literal">yes</span>
  ForwardAgent <span class="hljs-literal">yes</span></code></pre></div>
<p>但我沒有，反而需要的時候再手動重新<code>ssh-add ; ssh -A</code>就好！</p>
<h3 id="ssh-agent-2">ssh-agent</h3>
<p>一般比較常用 <code>ssh-add -l</code> 來看agent有沒有啟動、有沒有已經載入的 key！</p>
<p>不同 linux 不見得都會自動跑 ssh-agent ，所以如果要利用已經自動跑的ssh-agent可以這樣：</p>
<p><code>ps ax | grep ssh-agent </code> 觀察 bind_address 位置與 PID</p>
<div><pre class="hljs"><code>$ ps ax | <span class="hljs-keyword">grep</span> ssh-agent
   <span class="hljs-number">1319</span> ?        Ss     <span class="hljs-number">0</span>:<span class="hljs-number">00</span> <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/ssh-agent -D -a /</span>run<span class="hljs-regexp">/user/</span><span class="hljs-number">1000</span>/ssh-agent.socket
export SSH_AUTH_SOCK=<span class="hljs-regexp">/run/u</span>ser<span class="hljs-regexp">/1000/</span>ssh-agent.socket
export SSH_AGENT_PID=<span class="hljs-number">1319</span>
ssh-key -l</code></pre></div>
<p>如果找不到，可能就是沒有啟動agent 那就 <code>eval "$(ssh-agent -s)"</code>即可啟用動！</p>
<p>reference：</p>
<p><a title="https://www.howtogeek.com/devops/what-is-ssh-agent-forwarding-and-how-do-you-use-it/" href="https://www.howtogeek.com/devops/what-is-ssh-agent-forwarding-and-how-do-you-use-it/">https://www.howtogeek.com/devops/what-is-ssh-agent-forwarding-and-how-do-you-use-it/</a><br />
<a title="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding" href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding">https://docs.github.com/en/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding</a><br />
<a title="https://stackoverflow.com/questions/44250002/how-to-solve-sign-and-send-pubkey-signing-failed-agent-refused-operation" href="https://stackoverflow.com/questions/44250002/how-to-solve-sign-and-send-pubkey-signing-failed-agent-refused-operation">https://stackoverflow.com/questions/44250002/how-to-solve-sign-and-send-pubkey-signing-failed-agent-refused-operation</a><br />
<a title="https://stackdiary.com/linux-docs/ssh-add/" href="https://stackdiary.com/linux-docs/ssh-add/">https://stackdiary.com/linux-docs/ssh-add/</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[authprogs]]></title>
            <guid>b8f7c256ccc847bda768778acb27be3d</guid>
            <pubDate>Wed, 03 May 2023 05:55:40 GMT</pubDate>
            <content:encoded><![CDATA[<p>authprogs</p>
<p>目前已經把所有ssh key 換成 tpm or fido 但是 就是有一些特定用途需要用到 檔案 private key，通常都是一些自動相關的任務。</p>
<p>這時候可以透過 authproge 來限制 特定的 ssh key 只能執行 特定的 指令。</p>
<p>安裝：</p>
<div><pre class="hljs"><code>sudo apt-<span class="hljs-built_in">get</span> install authprogs</code></pre></div>
<p>設定 authorized_keys 讓這個 ssh key 知道要透過 authprogs 執行過慮後的任務：</p>
<div><pre class="hljs"><code>command=<span class="hljs-string">"/usr/bin/authprogs --run"</span> ssh-rsa AAAAB3NzaC1yc2EAAAABIwA####GrTQAISp6z6emA3yuXI5qOlIwDb1pzgJqXZU+..../phpkBpJKw== user@host
</code></pre></div>
<p>設定 authprogs.yml 來過慮可以執行的任務：</p>
<div><pre class="hljs"><code><span class="hljs-comment"># Simple commands, no IP restrictions.</span>
<span class="hljs-bullet">-</span>
  <span class="hljs-attribute">allow</span><span class="hljs-punctuation">:</span>
    <span class="hljs-bullet">-</span>
      <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/bin/ip</span>
      <span class="hljs-attribute">allow_trailing_args</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span></code></pre></div>
<p>先用一個簡單範例測試，上面範例允許遠端用sshkey登入後執行 <code>ip a</code> 這樣的指令。</p>
<p>之後如果用 key 登入則會出現</p>
<div><pre class="hljs"><code>authprogs: <span class="hljs-keyword">no</span> SSH command <span class="hljs-built_in">found</span>; interactive shell disallowed.
Shared <span class="hljs-keyword">connection</span> <span class="hljs-keyword">to</span> www.libthomas.org closed.</code></pre></div>
<p>這樣也會錯</p>
<div><pre class="hljs"><code>ssh host -i ~<span class="hljs-regexp">/.ssh/i</span>d_rsa... ip</code></pre></div>
<p>這樣才會正確</p>
<div><pre class="hljs"><code>ssh host -i ~<span class="hljs-regexp">/.ssh/i</span>d_rsa... <span class="hljs-regexp">/bin/i</span>p</code></pre></div>
<p>allow_trailing_args 則使允許參數</p>
<p>其他設定細節：<br />
<a title="https://manpages.ubuntu.com/manpages/impish/man1/authprogs.1.html" href="https://manpages.ubuntu.com/manpages/impish/man1/authprogs.1.html">https://manpages.ubuntu.com/manpages/impish/man1/authprogs.1.html</a><br />
<a title="https://github.com/daethnir/authprogs/blob/main/doc/authprogs.md" href="https://github.com/daethnir/authprogs/blob/main/doc/authprogs.md">https://github.com/daethnir/authprogs/blob/main/doc/authprogs.md</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SSH key with TPM]]></title>
            <guid>f401552ba59742b7964300cbe1431ac8</guid>
            <pubDate>Tue, 02 May 2023 14:42:30 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="ssh-key-with-tpm">SSH key with TPM</h1>
<h2 id="tpm-20">TPM 2.0</h2>
<p>新電腦很多都支援 TPM2.0了，可以用TPM當作SSH key 來加強安全性。</p>
<p>安裝：</p>
<div><pre class="hljs"><code>sudo apt install libtpm2-pkcs11-tools libtpm2-pkcs11<span class="hljs-number">-1</span>
sudo usermod -a -G tss <span class="hljs-string">"$(id -nu)"</span>
<span class="hljs-keyword">new</span><span class="hljs-type">group</span> tss</code></pre></div>
<p>測試：</p>
<div><pre class="hljs"><code>ls <span class="hljs-regexp">/dev/</span>tpm0
tpm2_getcap properties-fixed</code></pre></div>
<p>建key：</p>
<div><pre class="hljs"><code>tpm2_ptool init
tpm2_ptool addtoken <span class="hljs-attribute">--pid</span>=1 <span class="hljs-attribute">--label</span>=ssh <span class="hljs-attribute">--userpin</span>=MySecretPassword <span class="hljs-attribute">--sopin</span>=MyRecoveryPassword
tpm2_ptool addkey <span class="hljs-attribute">--label</span>=ssh <span class="hljs-attribute">--userpin</span>=MySecretPassword <span class="hljs-attribute">--algorithm</span>=rsa2048</code></pre></div>
<p>取得公鑰：</p>
<div><pre class="hljs"><code>ssh-keygen -D <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>libtpm2_pkcs11.so.<span class="hljs-number">1</span></code></pre></div>
<p>連線：</p>
<div><pre class="hljs"><code>ssh -I <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>libtpm2_pkcs11.so.<span class="hljs-number">1</span> server</code></pre></div>
<h2 id="tpm-12">TPM 1.2</h2>
<p>先確認 kernel 支援</p>
<div><pre class="hljs"><code>dmesg | grep -i tpm
[    <span class="hljs-number">5.167670</span>] tpm_tis <span class="hljs-number">00</span>:<span class="hljs-number">08</span>: <span class="hljs-number">1.2</span> TPM (device-<span class="hljs-built_in">id</span> <span class="hljs-number">0x1B</span>, rev-<span class="hljs-built_in">id</span> <span class="hljs-number">16</span>)</code></pre></div>
<div><pre class="hljs"><code><span class="hljs-attribute">thomas</span>@T460s:~$ lsmod|grep tpm
<span class="hljs-attribute">tpm_tis</span>                <span class="hljs-number">16384</span>  <span class="hljs-number">0</span>
<span class="hljs-attribute">tpm_tis_core</span>           <span class="hljs-number">28672</span>  <span class="hljs-number">1</span> tpm_tis
<span class="hljs-attribute">tpm</span>                    <span class="hljs-number">73728</span>  <span class="hljs-number">4</span> tpm_tis,tpm_tis_core
<span class="hljs-attribute">rng_core</span>               <span class="hljs-number">16384</span>  <span class="hljs-number">1</span> tpm</code></pre></div>
<p>看看有沒有裝置檔</p>
<div><pre class="hljs"><code>ls <span class="hljs-regexp">/dev/</span>tpm*</code></pre></div>
<p>要確認 tcsd 服務有安裝啟動</p>
<div><pre class="hljs"><code>sudo apt-get install trousers
systemctl status tcsd
● trousers.service - LSB: starts tcsd
<span class="hljs-symbol">     Loaded:</span> loaded (<span class="hljs-keyword">/etc/</span>init.d/<span class="hljs-attr">trousers</span><span class="hljs-punctuation">;</span> generated)
<span class="hljs-symbol">     Active:</span> active (running) since Fri <span class="hljs-number">2023</span><span class="hljs-number">-04</span><span class="hljs-number">-28</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">37</span> CST<span class="hljs-punctuation">;</span> <span class="hljs-number">4</span> days ago
<span class="hljs-symbol">       Docs:</span> man:systemd-sysv-generator(<span class="hljs-number">8</span>)
<span class="hljs-symbol">    Process:</span> <span class="hljs-number">7571</span> ExecS<span class="hljs-attr">tart</span><span class="hljs-operator">=</span><span class="hljs-keyword">/etc/</span>init.d/trousers start (<span class="hljs-attr">code</span><span class="hljs-operator">=</span>exited, <span class="hljs-attr">status</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>/SUCCESS)
<span class="hljs-symbol">      Tasks:</span> <span class="hljs-number">1</span> (limit: <span class="hljs-number">28635</span>)
<span class="hljs-symbol">     Memory:</span> <span class="hljs-number">776.0</span>K
<span class="hljs-symbol">        CPU:</span> <span class="hljs-number">2.817</span>s
<span class="hljs-symbol">     CGroup:</span> /system.slice/trousers.service
             └─<span class="hljs-number">7577</span> <span class="hljs-keyword">/usr/</span>sbin/tcsd
</code></pre></div>
<p>測試版本</p>
<div><pre class="hljs"><code><span class="hljs-attribute">$ tpm_version
  TPM 1.2 Version Info</span><span class="hljs-punctuation">:</span>
  <span class="hljs-attribute">Chip Version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">       1.2.6.40</span>
  <span class="hljs-attribute">Spec Level</span><span class="hljs-punctuation">:</span> <span class="hljs-string">         2</span>
  <span class="hljs-attribute">Errata Revision</span><span class="hljs-punctuation">:</span> <span class="hljs-string">    3</span>
  <span class="hljs-attribute">TPM Vendor ID</span><span class="hljs-punctuation">:</span> <span class="hljs-string">      IFX</span>
  <span class="hljs-attribute">Vendor Specific data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">062800be 0074706d 733038ff ff</span>
  <span class="hljs-attribute">TPM Version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">        01010000</span>
  <span class="hljs-attribute">Manufacturer Info</span><span class="hljs-punctuation">:</span> <span class="hljs-string">  49465800</span>

<span class="hljs-attribute">$ tpm_selftest -l info
  TPM Test Results</span><span class="hljs-punctuation">:</span> <span class="hljs-string">800001ff</span>
tpm_selftest succeeded
</code></pre></div>
<p>設定</p>
<div><pre class="hljs"><code>mkdir ~/.simple-tpm-pk11
stpm-keygen -o ~<span class="hljs-regexp">/.simple-tpm-pk11/my</span>.key
echo key my.key &gt; ~<span class="hljs-regexp">/.simple-tpm-pk11/</span>config</code></pre></div>
<p>取得公鑰：</p>
<div><pre class="hljs"><code>$ ssh-keygen -D <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>libsimple-tpm-pk11.so
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCTGgGIIZDZ+X+s823nBoAayFxfnv8uVJxcB9MEeOXalKsckqQV9tKgjcB0JOc7F3Dc0LMvTMhuICtf3xBEo6z0wyTt+sj1Q6tf6EVTTGQotYGvesLWUWGoNAmihRXRWSywL4yKgp5aVxE......e5EEE40fiDozFGDImrdFiSdt17iNOAQWjj5mmsaJMRzwvJLViO3oHbViP2sP3Hql1eo+ml x</code></pre></div>
<p>將公鑰丟到主機上 authorized_keys 然後登入時</p>
<div><pre class="hljs"><code>ssh SSH-SERVER -I <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>libsimple-tpm-pk11.so</code></pre></div>
<h2 id="reference">reference</h2>
<p><a title="https://blog.ledger.com/ssh-with-tpm/" href="https://blog.ledger.com/ssh-with-tpm/">https://blog.ledger.com/ssh-with-tpm/</a><br />
<a title="https://github.com/tpm2-software/tpm2-pkcs11/blob/1.6.0/docs/SSH.md" href="https://github.com/tpm2-software/tpm2-pkcs11/blob/1.6.0/docs/SSH.md">https://github.com/tpm2-software/tpm2-pkcs11/blob/1.6.0/docs/SSH.md</a><br />
<a title="https://blog.habets.se/2013/11/TPM-chip-protecting-SSH-keys---properly.html" href="https://blog.habets.se/2013/11/TPM-chip-protecting-SSH-keys---properly.html">https://blog.habets.se/2013/11/TPM-chip-protecting-SSH-keys---properly.html</a><br />
<a title="https://wiki.archlinux.org/title/Trusted_Platform_Module" href="https://wiki.archlinux.org/title/Trusted_Platform_Module">https://wiki.archlinux.org/title/Trusted_Platform_Module</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SSH JUMP]]></title>
            <guid>467ef73264e543968067852c5cb3a65a</guid>
            <pubDate>Tue, 02 May 2023 14:19:01 GMT</pubDate>
            <content:encoded><![CDATA[<p>SSH JUMP</p>
<p>前輩的介紹之下做了一下ssh jump 的測試，其實這工具真的非常好用且方便。</p>
<p>測試環境：<br />
proxyNode // DMZ 外，限定來源IP<br />
targetNode // DMZ 內，受保護服務</p>
<p>之前我要從 client ssh 到 targetNode 需要<br />
ssh 到 proxyNode ; 再從 proxyNode ssh 到 targetNode<br />
且可能會把 ssh private key 放到 proxyNode! // 危險!</p>
<p>用了 proxy jump 之後，基本用法就是</p>
<div><pre class="hljs"><code><span class="hljs-attribute">ssh -J proxyNode targetNode</span></code></pre></div>
<p>且不需要把 private key 放到 proxyNode // 安全!</p>
<p>jump 也可以一直跳下去</p>
<div><pre class="hljs"><code><span class="hljs-attribute">ssh</span> -J jumpuser1<span class="hljs-variable">@jump1</span>,jumpuser2<span class="hljs-variable">@jump2</span>,...,jumpuserN<span class="hljs-variable">@jumpN</span> user<span class="hljs-variable">@host</span></code></pre></div>
<p>透過ssh jump 可以直接連到 DMZ 但是有時候需要檔案I/O，例如 scp, rsync, sshfs</p>
<div><pre class="hljs"><code><span class="hljs-comment"># sshfs</span>
sshfs -o ssh_command=<span class="hljs-string">"ssh -J B_host"</span> C_host:/&lt;path&gt; &lt;mountpoint&gt; 

<span class="hljs-comment"># or rsync</span>
rsync -azv -e <span class="hljs-string">'ssh -A -J USER@PROXYHOST:PORT'</span> foo<span class="hljs-regexp">/ dest:./</span>foo/

<span class="hljs-comment"># or scp</span>
scp -J username@B username@C:<span class="hljs-regexp">/some/</span>path <span class="hljs-regexp">/some/</span>path</code></pre></div>
<p>最後建議用 .ssh/config , 設定如下：</p>
<div><pre class="hljs"><code>Host targetNode
    HostName targetNode.example.org
    IdentityFile ~/.ssh/targetNode.pem
    <span class="hljs-keyword">User</span> <span class="hljs-title">user1</span>
    ProxyJump proxyNode

Host proxyNode
    HostName proxyNode.example.org	
    IdentityFile ~/.ssh/id_rsa
    Port <span class="hljs-number">22</span>
    <span class="hljs-keyword">User</span> <span class="hljs-title">user2</span></code></pre></div>
<p>因為都用 key 登入，所以直接下 ssh targetNode 會自動 jump 。</p>
<p>另外 sshfs, scp, rsync 在有設定 config 的情況下使用，可以少很多參數。</p>
<p>例如</p>
<div><pre class="hljs"><code>sshfs targetNode:<span class="hljs-regexp">/etc /</span>etc</code></pre></div>
<p>以上，我開始重新設定所有的 ssh 都儘量改用 jump！</p>
<p>reference:<br />
<a title="https://serverfault.com/questions/941934/sshfs-over-a-jumphost" href="https://serverfault.com/questions/941934/sshfs-over-a-jumphost">https://serverfault.com/questions/941934/sshfs-over-a-jumphost</a><br />
<a title="https://blog.wu-boy.com/2016/10/ssh-agent-forwarding-proxycommand-tutorial/" href="https://blog.wu-boy.com/2016/10/ssh-agent-forwarding-proxycommand-tutorial/">https://blog.wu-boy.com/2016/10/ssh-agent-forwarding-proxycommand-tutorial/</a><br />
<a title="https://www.tecmint.com/access-linux-server-using-a-jump-host/" href="https://www.tecmint.com/access-linux-server-using-a-jump-host/">https://www.tecmint.com/access-linux-server-using-a-jump-host/</a><br />
<a title="https://nyogjtrc.github.io/posts/2020/03/ssh-proxyjump/" href="https://nyogjtrc.github.io/posts/2020/03/ssh-proxyjump/">https://nyogjtrc.github.io/posts/2020/03/ssh-proxyjump/</a><br />
<a title="https://mperdikeas.github.io/networking.html.files/scp-a-file-through-jump-host.html" href="https://mperdikeas.github.io/networking.html.files/scp-a-file-through-jump-host.html">https://mperdikeas.github.io/networking.html.files/scp-a-file-through-jump-host.html</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SSH and FIDO]]></title>
            <guid>1877beeb556d40958b07ba976a38ba90</guid>
            <pubDate>Tue, 02 May 2023 14:01:24 GMT</pubDate>
            <content:encoded><![CDATA[<p>SSH and FIDO</p>
<p>用 fido key 搭配 ssh-keygen 產生用來配合認証的實體金鑰</p>
<p>先上網買 fido2 的 usb 接上電腦</p>
<div><pre class="hljs"><code>[<span class="hljs-meta">44270.657019</span>] usb <span class="hljs-number">1</span><span class="hljs-number">-4</span>: <span class="hljs-keyword">new</span> full-speed USB device number <span class="hljs-number">7</span> <span class="hljs-keyword">using</span> xhci_hcd
[<span class="hljs-meta">44270.806521</span>] usb <span class="hljs-number">1</span><span class="hljs-number">-4</span>: New USB device found, idVendor=<span class="hljs-number">32</span>a3, idProduct=<span class="hljs-number">3201</span>, bcdDevice= <span class="hljs-number">1.10</span>
[<span class="hljs-meta">44270.806526</span>] usb <span class="hljs-number">1</span><span class="hljs-number">-4</span>: New USB device strings: Mfr=<span class="hljs-number">1</span>, Product=<span class="hljs-number">2</span>, SerialNumber=<span class="hljs-number">5</span>
[<span class="hljs-meta">44270.806528</span>] usb <span class="hljs-number">1</span><span class="hljs-number">-4</span>: Product: Idem Key
[<span class="hljs-meta">44270.806530</span>] usb <span class="hljs-number">1</span><span class="hljs-number">-4</span>: Manufacturer: GoTrust
[<span class="hljs-meta">44270.806531</span>] usb <span class="hljs-number">1</span><span class="hljs-number">-4</span>: SerialNumber: <span class="hljs-number">200801000734</span>
[<span class="hljs-meta">44270.810666</span>] hid-generic <span class="hljs-number">0003</span>:<span class="hljs-number">32</span>A3:<span class="hljs-number">3201.000</span>E: hiddev0,hidraw1: USB HID v1<span class="hljs-number">.00</span> Device [GoTrust Idem Key] <span class="hljs-keyword">on</span> usb<span class="hljs-number">-0000</span>:<span class="hljs-number">00</span>:<span class="hljs-number">14.0</span><span class="hljs-number">-4</span>/input1
[<span class="hljs-meta">44270.811503</span>] input: GoTrust Idem Key <span class="hljs-keyword">as</span> /devices/pci0000:<span class="hljs-number">00</span>/<span class="hljs-number">0000</span>:<span class="hljs-number">00</span>:<span class="hljs-number">14.0</span>/usb1/<span class="hljs-number">1</span><span class="hljs-number">-4</span>/<span class="hljs-number">1</span><span class="hljs-number">-4</span>:<span class="hljs-number">1.2</span>/<span class="hljs-number">0003</span>:<span class="hljs-number">32</span>A3:<span class="hljs-number">3201.000F</span>/input/input69
[<span class="hljs-meta">44270.873337</span>] hid-generic <span class="hljs-number">0003</span>:<span class="hljs-number">32</span>A3:<span class="hljs-number">3201.000F</span>: input,hidraw2: USB HID v1<span class="hljs-number">.01</span> Keyboard [GoTrust Idem Key] <span class="hljs-keyword">on</span> usb<span class="hljs-number">-0000</span>:<span class="hljs-number">00</span>:<span class="hljs-number">14.0</span><span class="hljs-number">-4</span>/input2</code></pre></div>
<p>產生 ssh key</p>
<div><pre class="hljs"><code>ssh-keygen -t ecdsa-sk

Generating <span class="hljs-keyword">public</span>/<span class="hljs-keyword">private</span> ecdsa-sk key pair.
You may need to touch your authenticator 
to authorize key generation.

Enter <span class="hljs-keyword">file</span> in which to save the key 
(<span class="hljs-regexp">/home/u</span>buntu<span class="hljs-regexp">/.ssh/i</span>d_ecdsa_sk):

Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase):

Enter same passphrase again:

Your identification has been saved in 
<span class="hljs-regexp">/home/u</span>buntu<span class="hljs-regexp">/.ssh/i</span>d_ecdsa_sk

Your <span class="hljs-keyword">public</span> key has been saved in 
<span class="hljs-regexp">/home/u</span>buntu<span class="hljs-regexp">/.ssh/i</span>d_ecdsa_sk.pub</code></pre></div>
<p>看看 .ssh 應該就有 id_ecdsa_sk...</p>
<p>複製公鑰到遠端</p>
<div><pre class="hljs"><code>ssh-<span class="hljs-keyword">copy</span>-id -i ~<span class="hljs-regexp">/.ssh/i</span>d_ecdsa_sk.pub user@host</code></pre></div>
<p>之後連線就可以使用</p>
<div><pre class="hljs"><code>ssh -<span class="hljs-selector-tag">i</span> id_ecdsa_sk user<span class="hljs-keyword">@host</span></code></pre></div>
<p>更新到 .ssh/config 例如：</p>
<div><pre class="hljs"><code>Host example
  <span class="hljs-keyword">User</span> <span class="hljs-title">user</span>
  HostName example.demo.com
  IdentityFile ~/.ssh/id_ecdsa_sk</code></pre></div>
<p>之後登入的時候 ssh example 即可！</p>
<p>建議也加上 MasterControl 在時間內可以用既有的session;  要不然一直要手點usb 稍微有點煩，可以這樣設定:</p>
<div><pre class="hljs"><code>Host *
    ControlMaster auto
    ControlPath /tmp/ssh-<span class="hljs-built_in">%r</span>@<span class="hljs-built_in">%h</span>:<span class="hljs-built_in">%p</span>
    ControlPersist <span class="hljs-number">600</span></code></pre></div>
<p>重點要注意 ssh 版本需要在 8.2以上，可以用<code>ssh -v</code> 看看！</p>
<p><a title="https://ubuntu.com/blog/enhanced-ssh-and-fido-authentication-in-ubuntu-20-04-lts" href="https://ubuntu.com/blog/enhanced-ssh-and-fido-authentication-in-ubuntu-20-04-lts">https://ubuntu.com/blog/enhanced-ssh-and-fido-authentication-in-ubuntu-20-04-lts</a><br />
<a title="https://developers.yubico.com/SSH/Securing_SSH_with_FIDO2.html" href="https://developers.yubico.com/SSH/Securing_SSH_with_FIDO2.html">https://developers.yubico.com/SSH/Securing_SSH_with_FIDO2.html</a><br />
<a title="https://docs.rc.fas.harvard.edu/kb/using-ssh-controlmaster-for-single-sign-on/" href="https://docs.rc.fas.harvard.edu/kb/using-ssh-controlmaster-for-single-sign-on/">https://docs.rc.fas.harvard.edu/kb/using-ssh-controlmaster-for-single-sign-on/</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[encfs 測試]]></title>
            <guid>46e070de2e0341ed8cfaa2832bf34f60</guid>
            <pubDate>Tue, 02 May 2023 13:48:46 GMT</pubDate>
            <content:encoded><![CDATA[<p>encfs 測試</p>
<p>之前嘗試用 luks 應把一個 raw file 當作 device 去加密保護資料；用的時候不麻煩，但是如果要同步就很麻煩。且 key 的保存也是問題。</p>
<p>嘗試了一些工具，例如:<br />
cryfs - <a title="https://www.cryfs.org/howitworks" href="https://www.cryfs.org/howitworks">https://www.cryfs.org/howitworks</a><br />
VeraCrypt - <a title="https://www.veracrypt.fr/code/VeraCrypt/" href="https://www.veracrypt.fr/code/VeraCrypt/">https://www.veracrypt.fr/code/VeraCrypt/</a><br />
encfs - <a title="https://github.com/vgough/encfs" href="https://github.com/vgough/encfs">https://github.com/vgough/encfs</a></p>
<p>最後再一定風險下，嘗試用 encfs 覺得還可以，先試試看吧。</p>
<p>debian or ubuntu 上基本上就是</p>
<p>安裝與加密掛載</p>
<div><pre class="hljs"><code><span class="hljs-title">apt</span>-get install encfs
<span class="hljs-title">mkdir</span> .<span class="hljs-class"><span class="hljs-keyword">data</span></span>
<span class="hljs-title">mkdir</span> <span class="hljs-class"><span class="hljs-keyword">data</span></span>
<span class="hljs-title">encfs</span> `pwd`/.<span class="hljs-class"><span class="hljs-keyword">data</span> `pwd`/<span class="hljs-keyword">data</span></span></code></pre></div>
<p>解密就</p>
<div><pre class="hljs"><code>fusermount -u `pwd`/data</code></pre></div>
<p>.data 就是實際的檔案 會加密檔名和內容。</p>
<p>目前寫了一個陽春script 只有需要的時候才解開，10分鐘之後就umount，基本就是mount-&gt;sleep-&gt;umount 這麼簡單！</p>
<p>後續觀察看看是否會有問題。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[天氣 - wttr.in]]></title>
            <guid>2dea8623554c4cd4a8078a21f2bc0fb9</guid>
            <pubDate>Sun, 29 Jan 2023 11:46:43 GMT</pubDate>
            <content:encoded><![CDATA[<p>天氣</p>
<p>自動判斷所在城市 <code>curl wttr.in/</code></p>
<p>or 加上城市 <code>curl wttr.in/taipei</code></p>
<p>跑出這樣</p>
<div><pre class="hljs"><code>Weather report: hsinchu

     \  /       Partly cloudy
   _ /<span class="hljs-string">""</span>.-.     +<span class="hljs-number">15</span>(<span class="hljs-number">13</span>) °C     
     \_(   ).   ↙ <span class="hljs-number">31</span> km/h      
     /(___(__)  <span class="hljs-number">10</span> km          
                <span class="hljs-number">0.0</span> mm         
                                                       ┌─────────────┐                                                       
┌──────────────────────────────┬───────────────────────┤  Sun <span class="hljs-number">29</span> Jan ├───────────────────────┬──────────────────────────────┐
│            Morning           │             Noon      └──────┬──────┘     Evening           │             Night            │
├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
│     \   <span class="hljs-regexp">/     Sunny          │     \   /</span>     Sunny          │     \   <span class="hljs-regexp">/     Clear          │     \   /</span>     Clear          │
│      .-.      +<span class="hljs-number">13</span>(<span class="hljs-number">11</span>) °C     │      .-.      <span class="hljs-number">18</span> °C          │      .-.      <span class="hljs-number">16</span> °C          │      .-.      +<span class="hljs-number">13</span>(<span class="hljs-number">11</span>) °C     │
│   ― (   ) ―   ↙ <span class="hljs-number">26</span>-<span class="hljs-number">30</span> km<span class="hljs-regexp">/h   │   ― (   ) ―   ↓ 27-31 km/</span>h   │   ― (   ) ―   ↙ <span class="hljs-number">27</span>-<span class="hljs-number">31</span> km<span class="hljs-regexp">/h   │   ― (   ) ―   ↙ 25-33 km/</span>h   │
│      `-’      <span class="hljs-number">10</span> km          │      `-’      <span class="hljs-number">10</span> km          │      `-’      <span class="hljs-number">10</span> km          │      `-’      <span class="hljs-number">10</span> km          │
│     <span class="hljs-regexp">/   \     0.0 mm | 0%    │     /</span>   \     <span class="hljs-number">0.0</span> mm | <span class="hljs-number">0</span>%    │     <span class="hljs-regexp">/   \     0.0 mm | 0%    │     /</span>   \     <span class="hljs-number">0.0</span> mm | <span class="hljs-number">0</span>%    │
└──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────┘
                                                       ┌─────────────┐                                                       
┌──────────────────────────────┬───────────────────────┤  Mon <span class="hljs-number">30</span> Jan ├───────────────────────┬──────────────────────────────┐
│            Morning           │             Noon      └──────┬──────┘     Evening           │             Night            │
├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
│     \   <span class="hljs-regexp">/     Sunny          │     \   /</span>     Sunny          │     \   <span class="hljs-regexp">/     Clear          │     \   /</span>     Clear          │
│      .-.      <span class="hljs-number">16</span> °C          │      .-.      +<span class="hljs-number">22</span>(<span class="hljs-number">24</span>) °C     │      .-.      <span class="hljs-number">19</span> °C          │      .-.      +<span class="hljs-number">15</span>(<span class="hljs-number">14</span>) °C     │
│   ― (   ) ―   ↙ <span class="hljs-number">24</span>-<span class="hljs-number">28</span> km<span class="hljs-regexp">/h   │   ― (   ) ―   ↓ 27-31 km/</span>h   │   ― (   ) ―   ↙ <span class="hljs-number">27</span>-<span class="hljs-number">31</span> km<span class="hljs-regexp">/h   │   ― (   ) ―   ↙ 21-29 km/</span>h   │
│      `-’      <span class="hljs-number">10</span> km          │      `-’      <span class="hljs-number">10</span> km          │      `-’      <span class="hljs-number">10</span> km          │      `-’      <span class="hljs-number">10</span> km          │
│     <span class="hljs-regexp">/   \     0.0 mm | 0%    │     /</span>   \     <span class="hljs-number">0.0</span> mm | <span class="hljs-number">0</span>%    │     <span class="hljs-regexp">/   \     0.0 mm | 0%    │     /</span>   \     <span class="hljs-number">0.0</span> mm | <span class="hljs-number">0</span>%    │
└──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────┘
                                                       ┌─────────────┐                                                       
┌──────────────────────────────┬───────────────────────┤  Tue <span class="hljs-number">31</span> Jan ├───────────────────────┬──────────────────────────────┐
│            Morning           │             Noon      └──────┬──────┘     Evening           │             Night            │
├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
│     \   <span class="hljs-regexp">/     Sunny          │     \   /</span>     Sunny          │     \   <span class="hljs-regexp">/     Clear          │     \   /</span>     Clear          │
│      .-.      <span class="hljs-number">17</span> °C          │      .-.      <span class="hljs-number">21</span> °C          │      .-.      <span class="hljs-number">18</span> °C          │      .-.      <span class="hljs-number">16</span> °C          │
│   ― (   ) ―   ↗ <span class="hljs-number">4</span>-<span class="hljs-number">5</span> km<span class="hljs-regexp">/h     │   ― (   ) ―   → 11-13 km/</span>h   │   ― (   ) ―   ↗ <span class="hljs-number">5</span>-<span class="hljs-number">6</span> km<span class="hljs-regexp">/h     │   ― (   ) ―   ↗ 3-4 km/</span>h     │
│      `-’      <span class="hljs-number">10</span> km          │      `-’      <span class="hljs-number">10</span> km          │      `-’      <span class="hljs-number">10</span> km          │      `-’      <span class="hljs-number">10</span> km          │
│     <span class="hljs-regexp">/   \     0.0 mm | 0%    │     /</span>   \     <span class="hljs-number">0.0</span> mm | <span class="hljs-number">0</span>%    │     <span class="hljs-regexp">/   \     0.0 mm | 0%    │     /</span>   \     <span class="hljs-number">0.0</span> mm | <span class="hljs-number">0</span>%    │
└──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────┘
Location: 新竹市, 臺灣 [<span class="hljs-number">24.8066333</span>,<span class="hljs-number">120.9686833</span>]

Follow @igor_chubin <span class="hljs-keyword">for</span> wttr.<span class="hljs-keyword">in</span> updates
</code></pre></div>
<p><img src="/_resources/a7bac0fb1bcb484690c949ab386f0045.png" /></p>
<p>最後加個 watch 可以loop update</p>
<div><pre class="hljs"><code>watch -ct -n <span class="hljs-number">3600</span> curl -s http:<span class="hljs-regexp">//</span>wttr.<span class="hljs-keyword">in</span></code></pre></div>
<p>reference:<br />
<a title="https://blog.m157q.tw/posts/2017/10/20/wttr-in/" href="https://blog.m157q.tw/posts/2017/10/20/wttr-in/">https://blog.m157q.tw/posts/2017/10/20/wttr-in/</a><br />
<a title="https://github.com/chubin/wttr.in" href="https://github.com/chubin/wttr.in">https://github.com/chubin/wttr.in</a><br />
<a title="https://wttr.in/:help" href="https://wttr.in/:help">https://wttr.in/:help</a><br />
<a title="https://ubunlog.com/zh-TW/%E5%A4%A9%E6%B0%A3%E9%A0%90%E5%A0%B1%E7%B5%82%E7%AB%AF%E5%A4%A9%E6%B0%A3/" href="https://ubunlog.com/zh-TW/%E5%A4%A9%E6%B0%A3%E9%A0%90%E5%A0%B1%E7%B5%82%E7%AB%AF%E5%A4%A9%E6%B0%A3/">https://ubunlog.com/zh-TW/天氣預報終端天氣/</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google Photo Sync]]></title>
            <guid>eb2dc2accca641d0a2fd3be3a2de1356</guid>
            <pubDate>Thu, 19 Jan 2023 02:45:38 GMT</pubDate>
            <content:encoded><![CDATA[<p>Title: Google Photo Sync<br />
Date: 2022/12/26<br />
Tags: linux<br />
Category: calendar<br />
Author: ThomasTsai<br />
Summary: sync photo from google photo service</p>
<h1 id="google-photo-sync">Google Photo Sync</h1>
<p>我手機上的照片都統以sync到google photo去了，被綁架！總之，就先這樣，但是我local還想要keep一份，避免被綁架走不了。所以就找到一個 <a title="https://github.com/gilesknap/gphotos-sync" href="https://github.com/gilesknap/gphotos-sync">gphotos-sync</a> 的工具，可以協助我 Linux 上進行自動備份照片。以下步驟來自<a title="https://www.linuxuprising.com/2019/06/how-to-backup-google-photos-to-your.html" href="https://www.linuxuprising.com/2019/06/how-to-backup-google-photos-to-your.html">部落格</a>(我用debian+bash)：</p>
<div><pre class="hljs"><code>sudo apt install <span class="hljs-keyword">python3</span>-pip
<span class="hljs-keyword">echo</span> <span class="hljs-string">"export PATH=\"\$PATH:\$HOME/.local/bin\""</span> &gt;&gt; ~/.bashrc
<span class="hljs-keyword">python3</span> -<span class="hljs-keyword">m</span> pip install pipenv
<span class="hljs-built_in">mkdir</span> ~/gphotos-<span class="hljs-keyword">sync</span>
<span class="hljs-keyword">cd</span> ~/gphotos-<span class="hljs-keyword">sync</span>
pipenv install gphotos-<span class="hljs-keyword">sync</span>
pipenv run gphotos-<span class="hljs-keyword">sync</span></code></pre></div>
<p>and then, 最麻煩就是要到 google 那邊拿 api token</p>
<ol>
<li>
<p>到 <a title="https://console.cloud.google.com/cloud-resource-manager" href="https://console.cloud.google.com/cloud-resource-manager">google cloud</a> 建立專案<br />
<img src="/_resources/039ff7b7ceb041cfadd5e5b97ef6b114.png" /></p>
</li>
<li>
<p>到 api 清單啟用 photo api ，先到網址： <a title="https://console.cloud.google.com/apis/library?project=_" href="https://console.cloud.google.com/apis/library?project=_">https://console.cloud.google.com/apis/library?project=_</a> ， 選擇剛建立的Project，再去搜尋 "Photos Library API "，再進去啟用，結果如下圖<br />
<img src="/_resources/a80696a40d674a22b2930ae68c92d2d5.png" /><br />
reference:<br />
<a title="https://github.com/gilesknap/gphotos-sync" href="https://github.com/gilesknap/gphotos-sync">https://github.com/gilesknap/gphotos-sync</a><br />
<a title="https://www.linuxuprising.com/2019/06/how-to-backup-google-photos-to-your.html" href="https://www.linuxuprising.com/2019/06/how-to-backup-google-photos-to-your.html">https://www.linuxuprising.com/2019/06/how-to-backup-google-photos-to-your.html</a></p>
</li>
<li>
<p>再到  <a title="https://console.cloud.google.com/" href="https://console.cloud.google.com/">https://console.cloud.google.com/</a> 產生token。左上角下拉式選單選好project，然後左側的導覽選單找"api和服務" 內的 "憑證"<br />
<img src="/_resources/617336c7f71141ccbd83ac04cc5c874b.png" /></p>
</li>
<li>
<p>新增憑證，要新增 oauth 2.0<br />
新增憑證的時候選電腦版應用程式<br />
<img src="/_resources/322b35a0cce045c6a4c29fd9a087d131.png" /></p>
</li>
</ol>
<p><img src="/_resources/a052fd43c744479dbfe2c760912cf47c.png" /></p>
<blockquote>
<blockquote>
<blockquote>
<p>You can see the complete procedure for setting up OAuth 2.0 with your new project on <a title="https://support.google.com/cloud/answer/6158849" href="https://support.google.com/cloud/answer/6158849">https://support.google.com/cloud/answer/6158849</a></p>
</blockquote>
</blockquote>
</blockquote>
<p>然後下載憑證到</p>
<div><pre class="hljs"><code>~<span class="hljs-regexp">/.config/g</span>photos-sync/</code></pre></div>
<p>執行同步看看</p>
<div><pre class="hljs"><code><span class="hljs-keyword">cd</span> gphotos-<span class="hljs-keyword">sync</span>
pipenv run gphotos-<span class="hljs-keyword">sync</span> ~/gphotos-<span class="hljs-keyword">sync</span></code></pre></div>
<p>這樣就可以同步了！</p>
<p>crontab 自動同步<br />
寫一支腳本  <code>~/bin/gphotos-sync.sh</code></p>
<div><pre class="hljs"><code><span class="hljs-meta">#!/bin/bash</span>
<span class="hljs-built_in">export</span> PATH=<span class="hljs-string">"/home/thomas/.local/bin:<span class="hljs-variable">$PATH</span>"</span>
<span class="hljs-built_in">pushd</span> /home/thomas/gphotos-sync
pipenv run gphotos-sync ~/gphotos-sync
<span class="hljs-built_in">popd</span></code></pre></div>
<p>編輯並加入 <code>$ crontab -e</code></p>
<div><pre class="hljs"><code><span class="hljs-symbol">17 </span><span class="hljs-number">16</span> * * * /home/thomas/bin/gphotos-sync.sh</code></pre></div>
<p>看起來都有好好的同步！</p>
<p><img src="/_resources/4ca38828e9544adcb87524b2dcc2a1fe.png" /></p>
<p>refererence:<br />
<a title="https://www.linuxuprising.com/2019/06/how-to-backup-google-photos-to-your.html" href="https://www.linuxuprising.com/2019/06/how-to-backup-google-photos-to-your.html">https://www.linuxuprising.com/2019/06/how-to-backup-google-photos-to-your.html</a><br />
<a title="https://github.com/gilesknap/gphotos-sync" href="https://github.com/gilesknap/gphotos-sync">https://github.com/gilesknap/gphotos-sync</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Miniflux]]></title>
            <guid>732d631202134541a2ed5a574ed77a2e</guid>
            <pubDate>Mon, 26 Dec 2022 04:29:03 GMT</pubDate>
            <content:encoded><![CDATA[<p>Title: Miniflux<br />
Date: 2022/12/26<br />
Tags: linux<br />
Category: calendar<br />
Author: ThomasTsai<br />
Summary: TT-RSS 替代版</p>
<h1 id="mingflux">MINGFLUX</h1>
<p><code>Miniflux is a minimalist and opinionated feed reader.</code></p>
<p>TT-RSS 一直是我 rss 閱讀器首選，可以自己架設再自己的伺服器，十分方便，安全。幾年之後，慢慢出現問題，TT-RSS 之前對 PHP 支援動作太慢，我 DEBIAN 一更新就會出問題。隨後，我就懶得去弄了，直到最近連資料重新init也跑步出來。官方也直接轉換到docker，不再支援 host 安裝的說明與維護，實在是無能為力阿。</p>
<p>只好把 TT-RSS 換掉，，準備用線上版的 rss reader，突然看到 MINIFLUX，也是可以架設再自己的伺服器，看了一下release log 也滿積極的，所幸把rss 匯出成 opml ，再從頭架設 MINIFLUX，rss opml 匯入、閱讀文章也沒有問和問題！</p>
<p>以下安裝步驟</p>
<h2 id="database-configuration">Database Configuration</h2>
<div><pre class="hljs"><code>sudo apt-<span class="hljs-keyword">get</span> install postgresql<span class="hljs-number">-13</span>

# Switch <span class="hljs-keyword">to</span> the postgres <span class="hljs-keyword">user</span>
$ sudo su - postgres

# <span class="hljs-keyword">Create</span> a <span class="hljs-keyword">database</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">for</span> Miniflux
$ createuser -P miniflux
Enter <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">new</span> <span class="hljs-keyword">role</span>: ******
Enter it again: ******

# <span class="hljs-keyword">Create</span> a <span class="hljs-keyword">database</span> <span class="hljs-keyword">for</span> miniflux that belongs <span class="hljs-keyword">to</span> our <span class="hljs-keyword">user</span>
$ <span class="hljs-keyword">createdb</span> -O miniflux miniflux

# <span class="hljs-keyword">Create</span> the <span class="hljs-keyword">extension</span> hstore <span class="hljs-keyword">as</span> <span class="hljs-keyword">superuser</span>
$ psql miniflux -c <span class="hljs-string">'create extension hstore'</span>
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">EXTENSION</span></code></pre></div>
<h2 id="installing-miniflux">Installing Miniflux</h2>
<div><pre class="hljs"><code>echo <span class="hljs-string">"deb [trusted=yes] https://repo.miniflux.app/apt/ /"</span> | sudo tee /etc/apt/sources.list.d/miniflux.list &gt; /dev/<span class="hljs-literal">null</span>
sudo apt-<span class="hljs-built_in">get</span> update
sudo apt-<span class="hljs-built_in">get</span> install miniflux
<span class="hljs-built_in">EXPORT</span>  <span class="hljs-attribute">DATABASE_URL</span>=<span class="hljs-string">"postgres://miniflux:xxxxxxxx@localhost/miniflux?sslmode=disable"</span>
miniflux -migrate</code></pre></div>
<h2 id="update-configuration">update configuration</h2>
<p>因為我主機8080被用掉了，所以凱8081</p>
<p>BASE_URL 也是因為我需要用apache2 proxy 所以一定要設定</p>
<p>vi /etc/miniflux.conf</p>
<div><pre class="hljs"><code><span class="hljs-comment"># See https://miniflux.app/docs/configuration.html</span>

<span class="hljs-attr">RUN_MIGRATIONS</span>=<span class="hljs-number">1</span>
<span class="hljs-attr">LISTEN_ADDR</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span>
<span class="hljs-attr">BASE_URL</span>=https://www.mydomain.org/rss/
<span class="hljs-attr">DATABASE_URL</span>=<span class="hljs-string">"postgres://miniflux:xxxxxxxx@localhost/miniflux?sslmode=disable"</span></code></pre></div>
<p>重新啟動看看</p>
<div><pre class="hljs"><code>systemctl <span class="hljs-built_in">restart</span> miniflux.service
systemctl <span class="hljs-built_in">status</span> miniflux.service</code></pre></div>
<p>ps: 如果有錯，可以設定環境變數後 手動直接跑miniflux 錯誤會丟到stderr 然後開始除錯。</p>
<h2 id="apache2-reverse-proxy-mode">Apache2 reverse proxy mode</h2>
<p>先 enable proxy</p>
<div><pre class="hljs"><code><span class="hljs-attribute">a2enmod</span> proxy
a2enmod proxy_http</code></pre></div>
<p>設定 site (我是放 virtual_host內)</p>
<div><pre class="hljs"><code>       <span class="hljs-attribute">ProxyRequests</span> <span class="hljs-literal">Off</span>
       <span class="hljs-section">&lt;Proxy *&gt;</span>
           <span class="hljs-attribute">Order</span> <span class="hljs-literal">allow</span>,<span class="hljs-literal">deny</span>
           <span class="hljs-attribute">Allow</span> from <span class="hljs-literal">all</span>
       <span class="hljs-section">&lt;/Proxy&gt;</span>
       
       <span class="hljs-section">&lt;Location <span class="hljs-string">"/rss/"</span>&gt;</span>
           <span class="hljs-attribute">ProxyPreserveHost</span> <span class="hljs-literal">On</span>
           <span class="hljs-attribute">ProxyPass</span> http://<span class="hljs-number">127.0.0.1:8081</span>/rss/
           <span class="hljs-attribute">ProxyPassReverse</span> http://<span class="hljs-number">127.0.0.1:8081</span>/rss/
       <span class="hljs-section">&lt;/Location&gt;</span> 
    <span class="hljs-section">&lt;/VirtualHost&gt;</span>
</code></pre></div>
<p>存檔之後restart apache2 <code>systemctl restart apache2.service</code>，直接瀏覽看看：</p>
<p>curl <a title="http://www.mydomain.org/rss/" href="http://www.mydomain.org/rss/">http://www.mydomain.org/rss/</a></p>
<p>登入後匯入rss，正常用！好用，分享紀錄起來！</p>
<p>reference:</p>
<ul>
<li><a title="https://miniflux.app/" href="https://miniflux.app/">https://miniflux.app/</a></li>
<li><a title="https://miniflux.app/docs/installation.html#debian" href="https://miniflux.app/docs/installation.html#debian">https://miniflux.app/docs/installation.html#debian</a></li>
<li><a title="https://miniflux.app/docs/howto.html#reverse-proxy" href="https://miniflux.app/docs/howto.html#reverse-proxy">https://miniflux.app/docs/howto.html#reverse-proxy</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[寬銀幕之下應用WMCTRL控制視窗]]></title>
            <guid>e6a6e7ff40c1462681857bf63a8d86d3</guid>
            <pubDate>Fri, 09 Dec 2022 01:47:40 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="寬銀幕之下應用wmctrl控制視窗">寬銀幕之下應用WMCTRL控制視窗</h2>
<p>最近入手了21:9高解析寬銀幕整體不錯但是，有個痛點，就是太寬。</p>
<p>視窗放大之後無寬，大部份狀況不習慣阿，自己調整之後，視窗layout最好是：</p>
<ul>
<li>常用的左邊，比例約70%</li>
<li>不常用但需要注意的右邊，比例約30%</li>
</ul>
<p>Linux Mint 指令 有快捷鍵，ALT+up/down/left/right ，但是比例一般都是50%。</p>
<p>搜尋一下之後，看到 WMCTRL 不錯用，可以參考這兩篇用法(<a title="https://www.twblogs.net/a/5e5365e2bd9eee2117c3e824" href="https://www.twblogs.net/a/5e5365e2bd9eee2117c3e824">控制窗口應用範例</a>、<a title="https://ephrain.net/linux-%E4%BD%BF%E7%94%A8-wmctrl-%E6%8C%87%E4%BB%A4%EF%BC%8C%E5%88%97%E5%87%BA%E7%8F%BE%E6%9C%89%E7%9A%84%E8%A6%96%E7%AA%97%E4%B8%A6%E9%97%9C%E9%96%89/" href="https://ephrain.net/linux-%E4%BD%BF%E7%94%A8-wmctrl-%E6%8C%87%E4%BB%A4%EF%BC%8C%E5%88%97%E5%87%BA%E7%8F%BE%E6%9C%89%E7%9A%84%E8%A6%96%E7%AA%97%E4%B8%A6%E9%97%9C%E9%96%89/">[Linux] 使用 wmctrl 指令，列出現有的視窗並關閉</a>)，或是 <a title="https://linux.die.net/man/1/wmctrl" href="https://linux.die.net/man/1/wmctrl">WMCTRL MAN PAGE</a>。</p>
<p>share 一下我的腳本：</p>
<p>two-thirds-app.sh:</p>
<div><pre class="hljs"><code><span class="hljs-meta">#!/bin/bash</span>
current_active_window=$(xprop -id $(xprop -root 32x <span class="hljs-string">'\t$0'</span> _NET_ACTIVE_WINDOW | cut -f 2) _NET_WM_NAME|sed s/.*=\ //g|sed s/\"//g)
wmctrl -r <span class="hljs-variable">$current_active_window</span>  -e <span class="hljs-string">"0,0,0,2200,1440"</span></code></pre></div>
<p>one-thirds-app.sh</p>
<div><pre class="hljs"><code><span class="hljs-meta">#!/bin/bash</span>
current_active_window=$(xprop -id $(xprop -root 32x <span class="hljs-string">'\t$0'</span> _NET_ACTIVE_WINDOW | cut -f 2) _NET_WM_NAME|sed s/.*=\ //g|sed s/\"//g)
wmctrl -r <span class="hljs-variable">$current_active_window</span>  -e <span class="hljs-string">"0,2200,0,1240,1440"</span>
</code></pre></div>
<p>上述可以將 active 視窗，依指令上的數字調整大小。這邊寫死，懶得寫成自動。</p>
<p>再用 mint 介面增加 custom shortcuts<br />
<img src="/_resources/4edd857d59a74659836eddffb9093f6d.png" /></p>
<p>然後，就可以愉快的讓視窗layout符合習慣使用！</p>
<p>最後，又寫了一個自動調整所以常用視窗的layout如下：</p>
<div><pre class="hljs"><code>#!/bin/bash
### <span class="hljs-keyword">help</span> to get current <span class="hljs-keyword">app</span>, location and size
## wmctrl -<span class="hljs-keyword">Gl</span> |awk '{<span class="hljs-keyword">print</span> <span class="hljs-variable">$8</span>,<span class="hljs-variable">$2</span>,<span class="hljs-variable">$3</span>,<span class="hljs-variable">$4</span>,<span class="hljs-variable">$5</span>,<span class="hljs-variable">$6}</span>'|sed -<span class="hljs-keyword">e</span> <span class="hljs-string">"s/ /,/g"</span>
## wmctrl -<span class="hljs-keyword">Gl</span> |awk '{printf <span class="hljs-string">"wmctrl -r \"</span>%s\<span class="hljs-string">" -e \"</span>%s,%s,%s,%s,%s\<span class="hljs-string">"\n"</span>,<span class="hljs-variable">$8</span>,<span class="hljs-variable">$2</span>,<span class="hljs-variable">$3</span>,<span class="hljs-variable">$4</span>,<span class="hljs-variable">$5</span>,<span class="hljs-variable">$6</span>;}'

## setting current <span class="hljs-keyword">app</span>, location and size
wmctrl -r <span class="hljs-string">"LINE"</span> -<span class="hljs-keyword">e</span> <span class="hljs-string">"0,2465,0,984,1300"</span>
wmctrl -r <span class="hljs-string">"Skype"</span> -<span class="hljs-keyword">e</span> <span class="hljs-string">"0,2394,100,1055,1334"</span>
wmctrl -r <span class="hljs-string">"Messenger"</span> -<span class="hljs-keyword">e</span> <span class="hljs-string">"0,2297,110,1152,1250"</span>
wmctrl -r <span class="hljs-string">"Caprine"</span> -<span class="hljs-keyword">e</span> <span class="hljs-string">"0,2297,110,1152,1250"</span>
wmctrl -r <span class="hljs-string">"Telegram"</span> -<span class="hljs-keyword">e</span> <span class="hljs-string">"0,2212,200,1237,1235"</span>
wmctrl -r <span class="hljs-string">"Mattermost"</span> -<span class="hljs-keyword">e</span> <span class="hljs-string">"0,2127,250,1322,1181"</span>
wmctrl -r <span class="hljs-string">"Slack"</span> -<span class="hljs-keyword">e</span> <span class="hljs-string">"0,2021,300,1428,1125"</span>

wmctrl -a <span class="hljs-string">"Mattermost"</span>
wmctrl -a <span class="hljs-string">"Telegram"</span>
wmctrl -a <span class="hljs-string">"Slack"</span>
wmctrl -a <span class="hljs-string">"Messenger"</span>
wmctrl -a <span class="hljs-string">"Caprine"</span>
wmctrl -a <span class="hljs-string">"Skype"</span>
wmctrl -a <span class="hljs-string">"LINE"</span></code></pre></div>
<p>這樣可以把指定的應用程式排列整齊。</p>
<p>歐 之前其實有用過 xtile 之類的工具，但是，總是找錯視窗，大小搞亂之類的，有點可惜。</p>
]]></content:encoded>
        </item>
    </channel>
</rss>