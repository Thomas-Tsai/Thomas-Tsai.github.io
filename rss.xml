<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Fri, 21 Mar 2025 06:06:47 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Joplin Pages Publisher</generator>
        <item>
            <title><![CDATA[Apple M2 Clonezilla 備份還原成功]]></title>
            <guid>3f64d3ddce104878b810414af650bb6a</guid>
            <pubDate>Thu, 06 Mar 2025 03:09:15 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="apple-m2-clonezilla-備份還原成功">Apple M2 Clonezilla 備份還原成功</h1>
<p>經過了2個月的努力，陸續解決所有的雷，<a href="/article/apple-m1-mini-for-clonezilla-live-boot-test">APPLE M1 MINI for Clonezilla Live boot test</a> -&gt; <a href="/article/asahi-linux-image-and-clonezilla-live">Asahi linux image and clonezilla live</a> -&gt; <a href="/article/apple-silicon-apfs">Apple silicon APFS 備份問題</a> 之後，首次備份+還原成功。</p>
<h1 id="作法概述">作法概述</h1>
<h2 id="抓-clonezilla-live-arm">抓 clonezilla live arm</h2>
<p>找一台Linux進行操做</p>
<p>到這邊去找新版 ARM zip<br />
<a title="https://free.nchc.org.tw/clonezilla-live/experimental/arm/" href="https://free.nchc.org.tw/clonezilla-live/experimental/arm/">https://free.nchc.org.tw/clonezilla-live/experimental/arm/</a></p>
<p>以我為例，我使用 <a title="https://free.nchc.org.tw/clonezilla-live/experimental/arm/3.2.1-9/clonezilla-live-3.2.1-9-arm64.zip" href="https://free.nchc.org.tw/clonezilla-live/experimental/arm/3.2.1-9/clonezilla-live-3.2.1-9-arm64.zip">https://free.nchc.org.tw/clonezilla-live/experimental/arm/3.2.1-9/clonezilla-live-3.2.1-9-arm64.zip</a> 這個。</p>
<p>抓下來之後要換 Asahi Linux 可以參考 <a href="/article/asahi-linux-image-and-clonezilla-live">Asahi linux image and clonezilla live</a>，clonezilla 升級到 5.8.20 已經不用 patch，所以可以直接</p>
<div><pre class="hljs"><code><span class="hljs-attribute">apt</span>-get install clonezilla // 需要確認版本 <span class="hljs-number">5</span>.<span class="hljs-number">8</span>.<span class="hljs-number">20</span> 以上
<span class="hljs-attribute">ocs</span>-live-swap-kernel clonezilla-live-<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>-<span class="hljs-number">9</span>-arm64.zip linux-image-<span class="hljs-number">6</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>-asahi-<span class="hljs-number">00780</span>-g62806c2c6f29_6.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>-<span class="hljs-number">00780</span>-g62806c2c6f29-<span class="hljs-number">1</span>_arm64.deb</code></pre></div>
<h2 id="裝-uefi-boot-on-apple-mini-m2">裝 uefi boot on apple mini m2</h2>
<p>在 MAC MINI 上執行</p>
<div><pre class="hljs"><code>curl https:<span class="hljs-regexp">//</span>alx.sh | sh</code></pre></div>
<p>只安裝 UEFI environment only (m1n1 + U-Boot + ESP)</p>
<p>參考 <a href="/article/apple-m1-mini-for-clonezilla-live-boot-test">APPLE M1 MINI for Clonezilla Live boot test</a></p>
<h2 id="解除保護">解除保護</h2>
<p>重開機並設定 Reduce Security</p>
<p><img src="/_resources/268769e867be4582aeb6ac71f8f4ced7.png" /></p>
<p>參考 <a href="/article/apple-silicon-apfs">Apple silicon APFS 備份問題</a></p>
<h2 id="clonezilla-live-開機">Clonezilla Live 開機</h2>
<p>重開機由維護模式選 uboot 開機</p>
<p>當進入 shell 互動模式輸入：// 也可以自動</p>
<div><pre class="hljs"><code>env <span class="hljs-built_in">set</span> boot_efi_bootmgr
<span class="hljs-built_in">run</span> bootcmd_usb0</code></pre></div>
<p>就可以順利進入 Clonezilla Live 選單</p>
<p>參考 <a href="/article/apple-m1-mini-for-clonezilla-live-boot-test">APPLE M1 MINI for Clonezilla Live boot test</a></p>
<h2 id="備份">備份</h2>
<p>透過 Clonezilla Live 備份 Disks</p>
<p>有辨識到三顆硬碟，主要是第一顆，其他的沒有備份。<br />
<img src="/_resources/33f497a8664e4bf8899dff99df0f0714.png" /></p>
<p>自動偵測到 partitions ; 就會備份這些<br />
<img src="/_resources/e9e346491ff34b1fadf6febb18ff572a.png" /></p>
<p><img src="/_resources/0d38b669237c4688ac4c3368412a4ca7.png" /></p>
<p><img src="/_resources/334d4953b6f54bcabaa591124a8601dc.png" /></p>
<p><img src="/_resources/88ef647fe51240e18987dd8a9b653d50.png" /></p>
<p><img src="/_resources/f054c42083274961a69be4191ce82bf0.png" /></p>
<p><img src="/_resources/1fbf9e9a49f348c08ab12ce79f7fb6b0.png" /></p>
<p><img src="/_resources/2364ac28f65e4639a8b1a38cf5bc04de.png" /></p>
<p><img src="/_resources/d4a6d0bc84ef4e688c473825736cf9b1.png" /></p>
<h2 id="摧毀">摧毀</h2>
<p>這邊我就沒有截圖<br />
大致上我是</p>
<div><pre class="hljs"><code>dd <span class="hljs-attribute">if</span>=/dev/zero <span class="hljs-attribute">of</span>=/dev/nvme0n1 <span class="hljs-attribute">bs</span>=1M <span class="hljs-attribute">count</span>=20480</code></pre></div>
<p>再以 blkid 確認資料都不見了！這時候先萬保佑不要當機重開，會變磚塊。</p>
<h2 id="還原">還原</h2>
<p>馬上用 clonezilla live 選單選還原 disk ，跑完之後可以正常開進 MAC-OS。</p>
<h2 id="注意事項">注意事項</h2>
<p>我們以玩樂的心情進行開發。如果你有要嘗試，我們很歡迎但是</p>
<p>！！！建議先自己有備份！！！這是研究性質！！！</p>
<p>如果萬一變磚塊，你可以用 <a title="https://support.apple.com/zh-tw/108900" href="https://support.apple.com/zh-tw/108900">Apple configurator 以 DFU</a> 重新刷回去，但是資料就都沒了。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Apple silicon APFS 備份問題]]></title>
            <guid>a58a2e9f10a74eb19938f9745d60ef17</guid>
            <pubDate>Wed, 05 Mar 2025 14:02:53 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="apple-apfs-無法讀取">Apple  APFS 無法讀取</h2>
<p>用 Clonezilla Live 開機之後，以 Partclone.apfs 進行備份，部份APFS磁區會出現失敗。</p>
<p>先觀察 gpt 資料如下</p>
<h3 id="gdisk">gdisk</h3>
<div><pre class="hljs"><code><span class="hljs-attribute">Found</span> valid GPT with protective MBR; using GPT.
<span class="hljs-attribute">Disk</span> /dev/nvme0n1: <span class="hljs-number">61279344</span> sectors, <span class="hljs-number">233</span>.<span class="hljs-number">8</span> GiB
<span class="hljs-attribute">Model</span>: APPLE SSD AP0256Z                       
<span class="hljs-attribute">Sector</span> size (logical/physical): <span class="hljs-number">4096</span>/<span class="hljs-number">4096</span> bytes
<span class="hljs-attribute">Disk</span> identifier (GUID): B2AF6879-DEC6-<span class="hljs-number">422</span>B-AE54-B21C581B37EB
<span class="hljs-attribute">Partition</span> table holds up to <span class="hljs-number">128</span> entries
<span class="hljs-attribute">Main</span> partition table begins at sector <span class="hljs-number">2</span> and ends at sector <span class="hljs-number">5</span>
<span class="hljs-attribute">First</span> usable sector is <span class="hljs-number">6</span>, last usable sector is <span class="hljs-number">61279338</span>
<span class="hljs-attribute">Partitions</span> will be aligned <span class="hljs-literal">on</span> <span class="hljs-number">2</span>-sector boundaries
<span class="hljs-attribute">Total</span> free space is <span class="hljs-number">30543728</span> sectors (<span class="hljs-number">116</span>.<span class="hljs-number">5</span> GiB)

<span class="hljs-attribute">Number</span>  Start (sector)    End (sector)  Size       Code  Name
   <span class="hljs-attribute">1</span>               <span class="hljs-number">6</span>          <span class="hljs-number">128005</span>   <span class="hljs-number">500</span>.<span class="hljs-number">0</span> MiB   AF0B  iBootSystemContainer
   <span class="hljs-attribute">2</span>          <span class="hljs-number">128006</span>        <span class="hljs-number">24542213</span>   <span class="hljs-number">93</span>.<span class="hljs-number">1</span> GiB    AF0A  Container
   <span class="hljs-attribute">3</span>        <span class="hljs-number">24542214</span>        <span class="hljs-number">25152517</span>   <span class="hljs-number">2</span>.<span class="hljs-number">3</span> GiB     AF0A  
   <span class="hljs-attribute">4</span>        <span class="hljs-number">25152518</span>        <span class="hljs-number">25277701</span>   <span class="hljs-number">489</span>.<span class="hljs-number">0</span> MiB   EF00  
   <span class="hljs-attribute">5</span>        <span class="hljs-number">25277702</span>        <span class="hljs-number">29424901</span>   <span class="hljs-number">15</span>.<span class="hljs-number">8</span> GiB    <span class="hljs-number">8300</span>  
   <span class="hljs-attribute">6</span>        <span class="hljs-number">59968630</span>        <span class="hljs-number">61279338</span>   <span class="hljs-number">5</span>.<span class="hljs-number">0</span> GiB     AF0C  RecoveryOSContainer
</code></pre></div>
<p>一般狀況就是 gpt code <code>AF0A</code>會有問題。</p>
<h3 id="blkid">blkid</h3>
<p>以 <code>blkid</code> 看磁區資訊，則沒有什麼異常</p>
<div><pre class="hljs"><code>root@debian:/home/thomas# blkid
/dev/nvme0n1p5: <span class="hljs-attribute">UUID</span>=<span class="hljs-string">"b2987700-28dd-450a-b0e9-5f2e8a121cbb"</span> <span class="hljs-attribute">BLOCK_SIZE</span>=<span class="hljs-string">"4096"</span> <span class="hljs-attribute">TYPE</span>=<span class="hljs-string">"ext4"</span> <span class="hljs-attribute">PARTUUID</span>=<span class="hljs-string">"e77b2894-4740-45b1-951c-f61d4b8f97d2"</span>
/dev/nvme0n1p3: <span class="hljs-attribute">UUID</span>=<span class="hljs-string">"0f126770-2c2b-4b91-b298-fd08d20a9988"</span> <span class="hljs-attribute">BLOCK_SIZE</span>=<span class="hljs-string">"4096"</span> <span class="hljs-attribute">TYPE</span>=<span class="hljs-string">"apfs"</span> <span class="hljs-attribute">PARTUUID</span>=<span class="hljs-string">"e3a97025-7b7f-4d26-8ecf-416316ce27c6"</span>
/dev/nvme0n1p1: <span class="hljs-attribute">UUID</span>=<span class="hljs-string">"27a5e297-e02e-4c76-aca0-ba66b8f95bea"</span> <span class="hljs-attribute">BLOCK_SIZE</span>=<span class="hljs-string">"4096"</span> <span class="hljs-attribute">TYPE</span>=<span class="hljs-string">"apfs"</span> <span class="hljs-attribute">PARTLABEL</span>=<span class="hljs-string">"iBootSystemContainer"</span> <span class="hljs-attribute">PARTUUID</span>=<span class="hljs-string">"904b9d04-bdea-4471-a4ec-7bd17b74b469"</span>
/dev/nvme0n1p6: <span class="hljs-attribute">UUID</span>=<span class="hljs-string">"64a78f4b-c221-4b3f-b480-8afb00b9562d"</span> <span class="hljs-attribute">BLOCK_SIZE</span>=<span class="hljs-string">"4096"</span> <span class="hljs-attribute">TYPE</span>=<span class="hljs-string">"apfs"</span> <span class="hljs-attribute">PARTLABEL</span>=<span class="hljs-string">"RecoveryOSContainer"</span> <span class="hljs-attribute">PARTUUID</span>=<span class="hljs-string">"1b4755bf-8391-4c0e-9e84-c11fe3775627"</span>
/dev/nvme0n1p4: <span class="hljs-attribute">LABEL_FATBOOT</span>=<span class="hljs-string">"EFI - DEBIA"</span> <span class="hljs-attribute">LABEL</span>=<span class="hljs-string">"EFI - DEBIA"</span> <span class="hljs-attribute">UUID</span>=<span class="hljs-string">"BFFB-100B"</span> <span class="hljs-attribute">BLOCK_SIZE</span>=<span class="hljs-string">"4096"</span> <span class="hljs-attribute">TYPE</span>=<span class="hljs-string">"vfat"</span> <span class="hljs-attribute">PARTUUID</span>=<span class="hljs-string">"38514106-b274-4e79-94d1-45696d24307f"</span>
/dev/nvme0n1p2: <span class="hljs-attribute">UUID</span>=<span class="hljs-string">"7e9b172c-ef57-465e-b10c-c65888e706fa"</span> <span class="hljs-attribute">BLOCK_SIZE</span>=<span class="hljs-string">"4096"</span> <span class="hljs-attribute">TYPE</span>=<span class="hljs-string">"apfs"</span> <span class="hljs-attribute">PARTLABEL</span>=<span class="hljs-string">"Container"</span> <span class="hljs-attribute">PARTUUID</span>=<span class="hljs-string">"e8152f74-d982-4cab-af9c-d4044b932f83"</span>
</code></pre></div>
<h3 id="fsapfsinfo">fsapfsinfo</h3>
<p>安裝 libfsapfs-utils 之後可以用程式 fsapfsinfo 檢視 APFS 摘要資訊。</p>
<p>可以看到 nvme0n1p1 可以正常讀取資訊</p>
<div><pre class="hljs"><code>/usr/bin/fsapfsinfo /dev/nvme0n1p1
fsapfsinfo 20201107

Apple File System (APFS) information:                                                                                                                                                       
Container information:                                                
<span class="hljs-code">        Identifier                      : 27a5e297-e02e-4c76-aca0-ba66b8f95bea </span>
<span class="hljs-code">        Number of volumes               : 4 </span>
Volume: 1 information: 
<span class="hljs-code">        Identifier                      : cee8dbdc-009a-4270-9783-f8fbc70981b5</span>
<span class="hljs-code">        Name                            : iSCPreboot </span>
<span class="hljs-code">        Compatible features             : 0x00000002 </span>
<span class="hljs-code">                (NX_FEATURE_LCFD) </span>
<span class="hljs-code"> </span>
<span class="hljs-code">        Incompatible features           : 0x00000001 </span>
<span class="hljs-code">                (NX_INCOMPAT_VERSION1) </span>

<span class="hljs-code">        Read-only compatible features   : 0x00000000</span>
<span class="hljs-code">....
....
....</span></code></pre></div>
<h4 id="受保護的-apfs">受保護的 APFS:</h4>
<p>此外以 fsapfsinfo 檢視受保護的 APFS<br />
可以看到 nvme0n1p2 無法正常讀取資訊</p>
<div><pre class="hljs"><code>root@debian:/home/thomas# /usr/bin/fsapfsinfo /dev/nvme0n1p2
fsapfsinfo <span class="hljs-number">20201107</span>                                                                           

Unable <span class="hljs-keyword">to</span> open: /dev/nvme0n1p2.
<span class="hljs-symbol">libcaes_context_initialize:</span> unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">set</span> padding <span class="hljs-keyword">in</span> context <span class="hljs-keyword">with</span> <span class="hljs-keyword">error</span>: <span class="hljs-keyword">error</span>:<span class="hljs-number">00000000</span>:<span class="hljs-keyword">lib</span>(<span class="hljs-number">0</span>)::reason(<span class="hljs-number">0</span>).
<span class="hljs-symbol">libcaes_tweaked_context_initialize:</span> unable <span class="hljs-keyword">to</span> initialize main context.
<span class="hljs-symbol">libfsapfs_encryption_context_initialize:</span> unable <span class="hljs-keyword">to</span> initialize decryption context.
<span class="hljs-symbol">libfsapfs_container_key_bag_read_file_io_handle:</span> unable <span class="hljs-keyword">to</span> initialize encryption context.
<span class="hljs-symbol">libfsapfs_internal_container_open_read:</span> unable <span class="hljs-keyword">to</span> read container <span class="hljs-keyword">key</span> bag at offset: <span class="hljs-number">16803950592</span> (<span class="hljs-number">0</span>x3e997f000).
<span class="hljs-symbol">libfsapfs_container_open_file_io_handle:</span> unable <span class="hljs-keyword">to</span> read <span class="hljs-keyword">from</span> file IO handle.
<span class="hljs-symbol">info_handle_open_input:</span> unable <span class="hljs-keyword">to</span> open input container.
</code></pre></div>
<p>可以看到關鍵錯誤訊息<code>libfsapfs_container_key_bag_read_file_io_handle: unable to initialize encryption context.</code></p>
<p>所以目前確認預設安裝是有啟動保護措施，相關的APFS有</p>
<p>/dev/nvme0n1p1: 一般 - iBootSystemContainer	<br />
/dev/nvme0n1p2: 保護 - Container / MAC-OS<br />
/dev/nvme0n1p3: 保護 - NA / for m1-debian only<br />
/dev/nvme0n1p6: 一般 - RecoveryOSContainer</p>
<h3 id="原因">原因！</h3>
<p>證實有啟動保護措施<br />
Mac with Apple silicon, Data Protection defaults to Class C (see Data Protection classes)</p>
<p><code>On a Mac with Apple silicon, Data Protection defaults to Class C (see Data Protection classes) but utilises a volume key rather than a per-extent or per-file key — effectively recreating the security model of FileVault for user data. Users must still opt in to FileVault to receive the full protection of entangling the encryption key hierarchy with their password. Developers can also opt in to a higher protection class that uses a per-file or per-extent key.</code></p>
<p>文章出處：<br />
<a title="https://support.apple.com/en-in/guide/security/secb010e978a/1/web/1" href="https://support.apple.com/en-in/guide/security/secb010e978a/1/web/1">https://support.apple.com/en-in/guide/security/secb010e978a/1/web/1</a><br />
<a title="https://support.apple.com/en-in/guide/security/secf6276da8a/1/web/1" href="https://support.apple.com/en-in/guide/security/secf6276da8a/1/web/1">https://support.apple.com/en-in/guide/security/secf6276da8a/1/web/1</a></p>
<h3 id="手動-usb-storage-加密進行測試">手動 usb storage 加密進行測試</h3>
<p>手動於 MAC OS 將外接隨身碟進行 APFS 格式加密，再用  fsapfsinfo 檢視 APFS 看看錯誤訊息為何？！結果就是一樣<code>libfsapfs_encryption_context_initialize: unable to initialize decryption context. </code></p>
<div><pre class="hljs"><code>thomas@debian-lab:~/tmp/mnt/tmp/macminim2$ sudo /usr/bin/fsapfsinfo /dev/sdc2
fsapfsinfo <span class="hljs-number">20201107</span>

Unable <span class="hljs-keyword">to</span> open: /dev/sdc2.
<span class="hljs-symbol">libcaes_context_initialize:</span> unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">set</span> padding <span class="hljs-keyword">in</span> context <span class="hljs-keyword">with</span> <span class="hljs-keyword">error</span>: <span class="hljs-keyword">error</span>:<span class="hljs-number">00000000</span>:<span class="hljs-keyword">lib</span>(<span class="hljs-number">0</span>)::reason(<span class="hljs-number">0</span>).
<span class="hljs-symbol">libcaes_tweaked_context_initialize:</span> unable <span class="hljs-keyword">to</span> initialize main context.
<span class="hljs-symbol">libfsapfs_encryption_context_initialize:</span> unable <span class="hljs-keyword">to</span> initialize decryption context.
<span class="hljs-symbol">libfsapfs_container_key_bag_read_file_io_handle:</span> unable <span class="hljs-keyword">to</span> initialize encryption context.
<span class="hljs-symbol">libfsapfs_internal_container_open_read:</span> unable <span class="hljs-keyword">to</span> read container <span class="hljs-keyword">key</span> bag at offset: <span class="hljs-number">16777302016</span> (<span class="hljs-number">0</span>x3e8015000).
<span class="hljs-symbol">libfsapfs_container_open_file_io_handle:</span> unable <span class="hljs-keyword">to</span> read <span class="hljs-keyword">from</span> file IO handle.
<span class="hljs-symbol">info_handle_open_input:</span> unable <span class="hljs-keyword">to</span> open input container.</code></pre></div>
<h3 id="解密-or-解除保護">解密 or 解除保護</h3>
<p>因為 <code>On a Mac with Apple silicon, Data Protection defaults to Class C </code> 會讓 Clonezilla 以 dd 進行 APFS 備份，所以尋找解法，讓 linux tools or partclone 可以進行備份。</p>
<p>經過大量查詢可能的問題之後，發現主要是 security policy 差異造成的，預設為 <code>Full Security</code> ，只有signed 過的程式可以讀取；反之，就只有修改為 <code>Reduced Security</code>。</p>
<blockquote>
<p>Full Security: Ensures that only your current OS, or signed operating system software currently trusted by Apple, can run. This mode requires a network connection at software installation time.<br />
Reduced Security: Allows any version of signed operating system software ever trusted by Apple to run.</p>
</blockquote>
<p><img src="/_resources/74088898e97d48908e95a8a53a6a5aef.png" /></p>
<p>節錄過程如下：</p>
<blockquote>
<p>If you’re the administrator of the Mac, you can change the level of security used on your startup disk.</p>
<p>On the Mac with Apple silicon, choose Apple menu &gt; Shut Down.</p>
<p>Press and hold the power button until “Loading startup options” appears.</p>
<p>Click Options, then click Continue.</p>
<p>Select a startup disk, then click Next.</p>
<p>Select an administrator account, then click Next.</p>
<p>Enter the password for the administrator account, then click Continue.</p>
<p>In the Recovery app, choose Utilities &gt; Startup Security Utility.</p>
<p>Select the system you want to use to set the security policy.</p>
<p>If the disk is encrypted with FileVault, click Unlock, enter the password, then click Unlock.</p>
<p>Click Security Policy.</p>
<p>Select one of the following security options:</p>
<pre><code>   Full Security: Ensures that only your current OS, or signed operating system software currently trusted by Apple, can run. This mode requires a network connection at software installation time.

   Reduced Security: Allows any version of signed operating system software ever trusted by Apple to run.
</code></pre>
<p>If you selected Reduced Security, select any of the following options, if needed:<br />
Startup Security Utility window showing the Reduced Security options.</p>
<pre><code>   Allow user management of kernel extensions from identified developers: Allows installation of software that uses legacy kernel extensions.

   Allow remote management of kernel extensions and automatic software updates: Authorizes remote management of legacy kernel extensions and software updates using a mobile device management (MDM) solution.
</code></pre>
</blockquote>
<p>完成上述操作之後，再用 m1-debian or Clonezilla Live 去讀取 APFS 就都是解密狀態，且可以備份與還原！</p>
<p>以上前題是預設狀態，也就是使用者沒有手動進行 APFS 加密，如果有，還是需要先進行解密，再設定為 <code>Reduce Security</code> 才可以備份。</p>
<h2 id="reference">Reference</h2>
<p><a title="https://support.apple.com/en-vn/guide/mac-help/mchl768f7291/mac" href="https://support.apple.com/en-vn/guide/mac-help/mchl768f7291/mac">https://support.apple.com/en-vn/guide/mac-help/mchl768f7291/mac</a><br />
<a title="https://support.apple.com/en-vn/guide/mac-help/mchl0f9af76f/15.0/mac/15.0" href="https://support.apple.com/en-vn/guide/mac-help/mchl0f9af76f/15.0/mac/15.0">https://support.apple.com/en-vn/guide/mac-help/mchl0f9af76f/15.0/mac/15.0</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Asahi linux image and clonezilla live]]></title>
            <guid>8d0b0766ef9b48e099469870fe375978</guid>
            <pubDate>Tue, 18 Feb 2025 04:23:09 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="clonezilla-live-rebuild">clonezilla live rebuild</h1>
<p>之前測試<a href="/article/apple-m1-mini-for-clonezilla-live-boot-test">APPLE M1 MINI for Clonezilla Live boot test</a>已經大致確認開機流程，但是clonezilla live進不去，其實主要就是kernel, initramfs 做怪，大概嘗試了2周之後，才找到原因。</p>
<p>解法就是先準備好 clonezilla-live zip</p>
<p>安裝 clonezilla<br />
<code>apt-get install clonezilla</code></p>
<p>透過 <code>ocs-live-swap-kernel</code> 換 asahi linux kernel 重新打包並置換 linux kernel</p>
<p>需要包好的 asahilinux kernel 可以從這邊下載 <a title="https://thomas.glanzmann.de/asahi" href="https://thomas.glanzmann.de/asahi">https://thomas.glanzmann.de/asahi</a> ，我下載的是 <code>linux-image-6.5.0-asahi-00780-g62806c2c6f29_6.5.0-00780-g62806c2c6f29-1_arm64.deb</code></p>
<p>換之前先簡單patch下 <code>ocs-live-swap-kernel</code>：</p>
<div><pre class="hljs"><code><span class="hljs-meta">$ </span><span class="language-bash">diff /usr/sbin/ocs-live-swap-kernel ./ocs-live-swap-kernel</span> 
176c176
&lt;   cp_mod_cmd="rsync -a $rsync_vopt ../../$wd_tmp/usr/lib/modules/ squashfs-root/usr/lib/modules/"
---
<span class="hljs-meta">&gt; </span><span class="language-bash">  cp_mod_cmd=<span class="hljs-string">"rsync -a <span class="hljs-variable">$rsync_vopt</span> ../../<span class="hljs-variable">$wd_tmp</span>/lib/modules/ squashfs-root/usr/lib/modules/"</span></span>
186a187,190
<span class="hljs-meta">&gt; </span><span class="language-bash">  <span class="hljs-built_in">echo</span> <span class="hljs-string">"Adding Asahi Linux Modules"</span></span>
<span class="hljs-meta">&gt; </span><span class="language-bash">  <span class="hljs-built_in">echo</span> <span class="hljs-string">"tps6598x"</span> &gt;&gt; squashfs-root/etc/initramfs-tools/modules</span>
<span class="hljs-meta">&gt; </span><span class="language-bash">  <span class="hljs-built_in">echo</span> <span class="hljs-string">"phy_apple_atc"</span> &gt;&gt; squashfs-root/etc/initramfs-tools/modules</span>
<span class="hljs-meta">&gt; </span><span class="language-bash">  <span class="hljs-built_in">echo</span> <span class="hljs-string">"typec"</span> &gt;&gt; squashfs-root/etc/initramfs-tools/modules</span></code></pre></div>
<p>變成這樣：<br />
<a type="application/octet-stream" href="/_resources/144d6baa13b243cb966839920bb1af77.">ocs-live-swap-kernel</a></p>
<p>執行</p>
<div><pre class="hljs"><code><span class="hljs-attribute">sudo</span> ./ocs-live-swap-kernel clonezilla-live-<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>-<span class="hljs-number">31</span>-arm64.zip linux-image-<span class="hljs-number">6</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>-asahi-<span class="hljs-number">00780</span>-g62806c2c6f29_6.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>-<span class="hljs-number">00780</span>-g62806c2c6f29-<span class="hljs-number">1</span>_arm64.deb</code></pre></div>
<p>把新的 zip <code>clonezilla-live-3.2.0-31-arm64-k6.5.0-asahi-00780-g62806c2c6f29.zip</code> 解壓縮到隨身碟用 type-c port 開機即可</p>
<p>開機過程：</p>
<p><a type="video/mp4" href="/_resources/81fd47adf0cd4518b242056b870c912a.mp4">video_2025-02-18_12-25-08.mp4</a></p>
<h1 id="補充資訊">補充資訊</h1>
<h2 id="modules">modules</h2>
<p>測試發現缺少重要的module導致預設 initramfs 沒有辦法驅動usb type-c; 所以需要加以下內容到 squashfs-root/etc/initramfs-tools/modules ; 再進行更新<br />
例如 MAC m2 2023 需要：</p>
<div><pre class="hljs"><code><span class="hljs-title">tps6598x</span>
<span class="hljs-title">phy_apple_atc</span>
typec</code></pre></div>
<p>建議?：</p>
<div><pre class="hljs"><code><span class="hljs-attr">CONFIG_HID_DOCKCHANNEL</span>=m
<span class="hljs-attr">CONFIG_PHY_APPLE_ATC</span>=m
<span class="hljs-attr">CONFIG_PHY_APPLE_DPTX</span>=m
<span class="hljs-attr">CONFIG_HID_APPLE</span>=m
<span class="hljs-attr">CONFIG_USB_XHCI_HCD</span>=m
<span class="hljs-attr">CONFIG_USB_DWC3</span>=m
<span class="hljs-attr">CONFIG_TYPEC_TPS6598X</span>=m</code></pre></div>
<p>需要載入的modules<br />
<a title="https://leo3418.github.io/asahi-wiki-build/kernel-config-notes-for-distros/" href="https://leo3418.github.io/asahi-wiki-build/kernel-config-notes-for-distros/">https://leo3418.github.io/asahi-wiki-build/kernel-config-notes-for-distros/</a></p>
<h2 id="m1debian">m1debian</h2>
<p>大量參考 m1debian 的成果，建議有需要的話可以看以下內容</p>
<blockquote>
<blockquote></blockquote>
</blockquote>
<pre><code>- prepare_rust.sh - Prepares a rust installation suitable for kernel compilation
- m1n1_uboot_kernel.sh - Builds m1n1, u-boot and the kernel including gpu support.
- mesa.sh - Creates mesa packages
- bootstrap.sh - Creates Debian root and live filesystem
- meta.sh - Meta package which makes sure that we always get latest and greatest kernel.
</code></pre>
<blockquote>
<blockquote></blockquote>
</blockquote>
<h2 id="asahi-linux-image">Asahi linux image</h2>
<p><a title="https://thomas.glanzmann.de/asahi" href="https://thomas.glanzmann.de/asahi">https://thomas.glanzmann.de/asahi</a></p>
<div><pre class="hljs"><code> <span class="hljs-comment"># Debian asahi packages</span>

cat &lt;&lt;<span class="hljs-string">'EOF'</span> | sudo tee <span class="hljs-regexp">/etc/</span>X11<span class="hljs-regexp">/xorg.conf.d/</span><span class="hljs-number">30</span>-modeset.conf
Section <span class="hljs-string">"OutputClass"</span>
    Identifier <span class="hljs-string">"appledrm"</span>
    MatchDriver <span class="hljs-string">"apple"</span>
    Driver <span class="hljs-string">"modesetting"</span>
    Option <span class="hljs-string">"PrimaryGPU"</span> <span class="hljs-string">"true"</span>
EndSection
EOF

echo <span class="hljs-string">'deb https://thomas.glanzmann.de/asahi testing main'</span> | sudo tee <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/g</span>lanzmann.list
sudo curl -sL -o <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/trusted.gpg.d/</span>thomas-glanzmann.gpg https:<span class="hljs-regexp">//</span>tg.st<span class="hljs-regexp">/u/</span>thomas-glanzmann.gpg

sudo apt update
sudo apt install -y m1n1 linux-image-asahi libgl1-mesa-dri
sudo apt upgrade -y
</code></pre></div>
<h2 id="m1n1">m1n1</h2>
<p>m1n1 is the bootloader developed by the Asahi Linux project to bridge the Apple (XNU) boot ecosystem to the Linux boot ecosystem.</p>
<blockquote>
<blockquote>
<p>Initializes hardware<br />
Puts up a pretty logo<br />
Loads embedded (appended) payloads, which can be:<br />
Device Trees (FDTs), with automatic selection based on the platform<br />
Initramfs images (compressed CPIO archives)<br />
Kernel images in Linux ARM64 boot format (optionally compressed)<br />
Configuration statements<br />
Chainloads another version of itself from a FAT32 partition (if configured to do so)</p>
</blockquote>
<blockquote></blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Boot chain overview<br />
Apple stuff → m1n1 stage 1 → m1n1 stage 2 → DT + U-Boot → GRUB → Linux</p>
</blockquote>
<blockquote></blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>m1n1 stage 1 is installed by the Asahi Linux installer from recovery mode (in step2.sh), is signed by an internal machine-specific key in the process (as part of Apple’s secure boot policy), and can be considered immutable. Upgrading it should seldom be needed, we’ll make tooling for this when it becomes necessary. It has the PARTUUID of the EFI system partition assigned to this OS hardcoded into it (set at install time), and chainloads m1n1 stage 2 from ESP/m1n1/boot.bin (the ESP must be in internal NVMe storage, no external storage is supported). It also passes through this PARTUUID to the next stage (as a to-be-set /chosen property, see below), so the next stage knows what partition it’s booting from.</p>
</blockquote>
</blockquote>
<p>有一個很重要的地方<br />
<strong>(the ESP must be in internal NVMe storage, no external storage is supported)</strong></p>
<p>這就是為什麼需要先透過asahi linux 安裝程序先在 mac 上安裝 uboot 開機的原因！</p>
<p>編譯與實作參考:<br />
GitHub: AsahiLinux/m1n1 <a title="https://github.com/AsahiLinux/m1n1" href="https://github.com/AsahiLinux/m1n1">https://github.com/AsahiLinux/m1n1</a></p>
<h2 id="linux-image-asahi-編譯">linux-image-asahi 編譯</h2>
<p>需要包好的 asahilinux kernel 可以到這邊下載：<br />
<a title="https://thomas.glanzmann.de/asahi" href="https://thomas.glanzmann.de/asahi">https://thomas.glanzmann.de/asahi</a></p>
<p>編譯參考<br />
<a title="https://git.zerfleddert.de/cgi-bin/gitweb.cgi/m1-debian/blob/HEAD:/m1n1_uboot_kernel.sh" href="https://git.zerfleddert.de/cgi-bin/gitweb.cgi/m1-debian/blob/HEAD:/m1n1_uboot_kernel.sh">https://git.zerfleddert.de/cgi-bin/gitweb.cgi/m1-debian/blob/HEAD:/m1n1_uboot_kernel.sh</a></p>
<h1 id="reference">Reference</h1>
<ul>
<li><a title="https://git.zerfleddert.de/cgi-bin/gitweb.cgi/m1-debian/" href="https://git.zerfleddert.de/cgi-bin/gitweb.cgi/m1-debian/">https://git.zerfleddert.de/cgi-bin/gitweb.cgi/m1-debian/</a></li>
<li><a title="https://thomas.glanzmann.de/asahi/README.txt" href="https://thomas.glanzmann.de/asahi/README.txt">https://thomas.glanzmann.de/asahi/README.txt</a></li>
<li><a title="https://leo3418.github.io/asahi-wiki-build/m1n1user-guide/" href="https://leo3418.github.io/asahi-wiki-build/m1n1user-guide/">https://leo3418.github.io/asahi-wiki-build/m1n1user-guide/</a></li>
<li><a title="https://leo3418.github.io/asahi-wiki-build/distroboot-process-guide/" href="https://leo3418.github.io/asahi-wiki-build/distroboot-process-guide/">https://leo3418.github.io/asahi-wiki-build/distroboot-process-guide/</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Raspberry Pi 5 clonezilla boot from usb]]></title>
            <guid>253e68279e6d4f2bb9aa155a87db218c</guid>
            <pubDate>Thu, 13 Feb 2025 07:23:20 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="raspberry-pi-5-clonezilla-boot-from-usb">Raspberry Pi 5 clonezilla boot from usb</h1>
<h2 id="clonezilla-usb">clonezilla usb</h2>
<p>取得 Clonezilla arm64 zip; 解壓縮到 usb /dev/sdc1</p>
<div><pre class="hljs"><code><span class="hljs-attribute">mount</span>/dev/sdc1 /mnt

<span class="hljs-attribute">wget</span> https://free.nchc.org.tw/clonezilla-live/experimental/arm/<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>-<span class="hljs-number">31</span>/clonezilla-live-<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>-<span class="hljs-number">31</span>-arm64.zip
<span class="hljs-attribute">unzip</span> clonezilla-live-<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>-<span class="hljs-number">31</span>-arm64.zip /mnt</code></pre></div>
<p>取得 efi , download  RPi5_UEFI_Release_v0.3.zip  from <a title="https://github.com/worproject/rpi5-uefi/releases" href="https://github.com/worproject/rpi5-uefi/releases">https://github.com/worproject/rpi5-uefi/releases</a></p>
<p>解壓縮到  usb /dev/sdc1</p>
<div><pre class="hljs"><code>unzip RPi5_UEFI_Release_v0.<span class="hljs-number">3</span><span class="hljs-selector-class">.zip</span> /mnt/

ls /mnt
arm64-release<span class="hljs-selector-class">.txt</span>  bcm2712-rpi-<span class="hljs-number">5</span>-<span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.dtb</span>  boot  Clonezilla-Live-Version  config<span class="hljs-selector-class">.txt</span>  EFI  GPL  home  live  RPi5_UEFI_Release_v0.<span class="hljs-number">3</span><span class="hljs-selector-class">.zip</span>  RPI_EFI.fd</code></pre></div>
<h2 id="raspberry-pi">raspberry pi</h2>
<h3 id="預設開機">預設開機</h3>
<p>RPI5 目前預設都是 sd-card 開機</p>
<h3 id="測試-usb-only">測試 usb only</h3>
<p>沒有接 sd-card<br />
接上clonezilla usb 直接可以用 clonezilla live</p>
<h3 id="有-sd-card-的狀況">有 sd-card 的狀況</h3>
<p>預設會sd-card 開機，開機登入之後可以修改開機順序</p>
<p>在 rpi os 內修改 boot order</p>
<div><pre class="hljs"><code>sudo rpi-eeprom-<span class="hljs-built_in">config</span> <span class="hljs-comment">--edit</span></code></pre></div>
<p>更改 BOOT_ORDER <code>Try USB first, followed by SD then repeat</code></p>
<div><pre class="hljs"><code><span class="hljs-attr">BOOT_UART</span>=<span class="hljs-number">1</span>
<span class="hljs-attr">POWER_OFF_ON_HALT</span>=<span class="hljs-number">0</span>
<span class="hljs-attr">BOOT_ORDER</span>=<span class="hljs-number">0</span>xf14</code></pre></div>
<p><img src="/_resources/97d45575ac434906b8d065f7ae9e6b59.png" /></p>
<p>修改完之後就會優先開 usb ; 如果 usb 開機失敗就會為到 sd-card 開機</p>
<h2></h2>
<p>測試：</p>
<p><a type="video/webm" href="/_resources/f71893844a1d4df397054af41dd3274a.webm">2025-02-13-153033.webm</a></p>
<h2 id="reference">reference</h2>
<p><a title="https://forums.raspberrypi.com/viewtopic.php?t=366106" href="https://forums.raspberrypi.com/viewtopic.php?t=366106">https://forums.raspberrypi.com/viewtopic.php?t=366106</a><br />
<a title="https://github.com/worproject/rpi5-uefi/releases" href="https://github.com/worproject/rpi5-uefi/releases">https://github.com/worproject/rpi5-uefi/releases</a><br />
<a title="https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#eeprom-boot-flow" href="https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#eeprom-boot-flow">https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#eeprom-boot-flow</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[APPLE M1 MINI for Clonezilla Live boot test]]></title>
            <guid>fe549df4984e47efad100d79d862cf5f</guid>
            <pubDate>Thu, 09 Jan 2025 04:01:21 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="apple-m1-mac-mini-clonezilla-live-boot-測試">APPLE M1 - MAC MINI Clonezilla live Boot 測試</h1>
<h2 id="目標-m1-mini-u-boot-for-clonezilla">目標 M1 MINI U-Boot for Clonezilla</h2>
<h2 id="實作方向">實作方向</h2>
<p><a title="https://asahilinux.org/" href="https://asahilinux.org/">Asahi Linux</a> 支援 Apple Silicon 已經一陣子了，之前(2022?)還不支援 MAC MINI 的安裝，會卡住。最近(2025/01)嘗試已經可以順利安裝 Asahi Linux Fedora 的環境，且可以正常啟動。</p>
<p>下一步的目標就是 Clonezilla 隨身碟可以開機、備份、還原，路還很遠，但是可以先試試看開機流程。</p>
<h2 id="大致作法">大致作法</h2>
<p>根據 <a title="https://git.zerfleddert.de/cgi-bin/gitweb.cgi/m1-debian/" href="https://git.zerfleddert.de/cgi-bin/gitweb.cgi/m1-debian/">m1-debian</a> 剛好有提到 Live System 的方式，大致步驟就是：</p>
<ol>
<li>安裝 Asahi Linux installer, 但是只安裝 UEFI environment only (m1n1 + U-Boot + ESP)</li>
<li>安裝預先 build 好的 Live Debian with Asahi Linux kernel 隨身碟</li>
<li>u-Boot 開機、Grub 開機、Debian Live boot</li>
<li>再測試 Clonezilla UEFI boot</li>
</ol>
<h2 id="結論">結論</h2>
<ul>
<li>可以接到 Clonezilla Live uEFI boot 畫面</li>
<li>The USB-A Port on the Mac Mini will not work in u-boot and grub.</li>
<li>目前 Debian Kernel 還不支援, 所以 Clonezilla uefi 開機選單之後無畫面</li>
</ul>
<p><a type="video/mp4" href="/_resources/cc048deea36940cdbe2d725d96c6ab46.mp4">VID_20250107_151024.mp4</a></p>
<p>有時間的話，後續嘗試 clonezilla live build 加上 asahi 特製版。那這樣就有機會完成 m1 clonezilla live 。只是對使用者而言，要動分割區，安裝asahi UEFI 是個大挑戰！</p>
<h2 id="實作細節">實作細節</h2>
<h3 id="asahi-安裝">Asahi 安裝</h3>
<p>可以的話先看一下官方實作影片！ <a title="https://tg.st/u/live.mp4" href="https://tg.st/u/live.mp4">https://tg.st/u/live.mp4</a></p>
<p>建議先升級 macOS to version 12.3 or later。我目前的版本是 mac os 15.2</p>
<p>升級之後執行</p>
<div><pre class="hljs"><code>curl https:<span class="hljs-regexp">//</span>alx.sh | sh</code></pre></div>
<p>只安裝 UEFI environment only (m1n1 + U-Boot + ESP)</p>
<p>安裝細節就自行上網查！</p>
<h3 id="debian-live-隨身碟">Debian Live 隨身碟</h3>
<p>以下我都是在Linux主機下操作的。先用 <code>lsblk</code> 找到要安裝的隨身碟，建議找一支沒有資料的用來測試。不要選到自己的 partition ，出事自己負責...xd</p>
<p>以下是我的範例，我的隨身碟是 /dev/sdc, 依照以下指令進行</p>
<div><pre class="hljs"><code>DEVICE=<span class="hljs-regexp">/dev/</span>sdc
parted -a optimal <span class="hljs-variable">$DEVICE</span> mklabel msdos
parted -a optimal <span class="hljs-variable">$DEVICE</span> mkpart primary fat32 <span class="hljs-number">2048</span>s <span class="hljs-number">100</span>%
mkfs.vfat <span class="hljs-variable">${DEVICE}</span><span class="hljs-number">1</span>
mount <span class="hljs-variable">${DEVICE}</span><span class="hljs-number">1</span> /mnt
curl -sL https:<span class="hljs-regexp">//</span>tg.st<span class="hljs-regexp">/u/</span>asahi-debian-live.tar | tar -C /mnt -xf -
umount /mnt</code></pre></div>
<h3 id="uefi-boot-開機">UEFI BOOT 開機</h3>
<p>以 Start in safe mode 方式開機，在 MAC MINI 上就是一直按著 power 不要放，等到 圖形開機選單出現。這時候選 UEFI Boot 開機。下一階段他會自動 boot。shell 會提示, 任意鍵盤按一下之後可以中斷自動開機，並進入 shell 互動模式。</p>
<p>開機前接上隨身碟，因為 USB-A 不支援，所以隨身碟、鍵盤啥的，在 UEFI Boot、GRUB 階段都不能用。但是 type-c usb port 是可以用的。所以用 type-c 的 port。我是用 type-C 轉 USB-A 接上 usb hub 再接隨身碟和鍵盤。</p>
<p><img src="/_resources/890adedfe0784b3d9fbd118b5b9ce859.jpg" /></p>
<p>當進入 shell 互動模式輸入：</p>
<div><pre class="hljs"><code>env <span class="hljs-built_in">set</span> boot_efi_bootmgr
<span class="hljs-built_in">run</span> bootcmd_usb0</code></pre></div>
<p><img src="/_resources/720d8e45f0194df3afab1f0df82e3073.jpg" /></p>
<p>接下來進入 grub 但是 live 隨身碟預設的路徑不對，所以要手動輸入。<br />
如果畫面停在 <code>grub&gt;</code></p>
<p>可以嘗試，在輸入的同時畫面可能會亂掉，要有耐心，多試幾次！</p>
<p>先用 <code>ls</code> 找檔案路徑，優先找到 (hdX,msdos1) 的結果來嘗試，我的就會是(hd3,msdos1)</p>
<div><pre class="hljs"><code><span class="hljs-function"><span class="hljs-title">linux</span> <span class="hljs-params">(hd3,msdos1)</span>/<span class="hljs-title">vmlinuz</span>
<span class="hljs-title">initrd</span> <span class="hljs-params">(hd3,msdos1)</span>/<span class="hljs-title">initrd</span>.<span class="hljs-title">zstd</span>
<span class="hljs-title">boot</span></span></code></pre></div>
<p>注意：</p>
<ul>
<li>可以先用 ls 列出路徑與檔案</li>
<li>可以 <tab class="jop-noMdConv"> 補齊檔名</tab></li>
<li>(hdX,msdos1) 不要有空格，這不是寫論文也不是程式！</li>
</ul>
<p>boot 執行之後，如果順利載入之後就可以看到 Debian 開機畫面。</p>
<h3 id="clonezilla-live-隨身碟">Clonezilla Live  隨身碟</h3>
<p>證實可以用 debioan live 就可以進行 clonezilla live test。準備隨身碟的方式基本相同，找一支隨身碟，用上述步驟製作，只是最後是<a title="https://free.nchc.org.tw/clonezilla-live/experimental/arm/" href="https://free.nchc.org.tw/clonezilla-live/experimental/arm/">下載 clonezilla arm64</a> 的 zip 解壓縮到 /mnt</p>
<p>開機步驟同上。Start in safe mode 方式開機 -&gt; UEFI BOOT -&gt; shell 模式輸入</p>
<div><pre class="hljs"><code>env <span class="hljs-built_in">set</span> boot_efi_bootmgr
<span class="hljs-built_in">run</span> bootcmd_usb0</code></pre></div>
<p>就會自動載入 Clonezilla EFI 開機選單。</p>
<p>等有空真的換上可以用的 clonezilla live 再看看有沒有機會完成整的備份還原程序。</p>
<h2 id="reference">Reference</h2>
<p><a title="https://git.zerfleddert.de/cgi-bin/gitweb.cgi/m1-debian/" href="https://git.zerfleddert.de/cgi-bin/gitweb.cgi/m1-debian/">https://git.zerfleddert.de/cgi-bin/gitweb.cgi/m1-debian/</a><br />
<a title="https://g3la.de/hedgedoc/buDIXGBuRzKMwUnYOpStuw#" href="https://g3la.de/hedgedoc/buDIXGBuRzKMwUnYOpStuw#">https://g3la.de/hedgedoc/buDIXGBuRzKMwUnYOpStuw#</a><br />
<a title="https://wiki.debian.org/InstallingDebianOn/Apple/M1" href="https://wiki.debian.org/InstallingDebianOn/Apple/M1">https://wiki.debian.org/InstallingDebianOn/Apple/M1</a><br />
<a title="https://git.zerfleddert.de/cgi-bin/gitweb.cgi/m1-debian/blob_plain/refs/heads/master:/files/quickstart.txt" href="https://git.zerfleddert.de/cgi-bin/gitweb.cgi/m1-debian/blob_plain/refs/heads/master:/files/quickstart.txt">https://git.zerfleddert.de/cgi-bin/gitweb.cgi/m1-debian/blob_plain/refs/heads/master:/files/quickstart.txt</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SSL Medium Strength Cipher Suites Supported (SWEET32)]]></title>
            <guid>4991ed8a3b314b9ba9b292f1c63b0093</guid>
            <pubDate>Tue, 24 Dec 2024 07:14:18 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="ssl-medium-strength-cipher-suites-supported-sweet32">SSL Medium Strength Cipher Suites Supported (SWEET32)</h2>
<p>我有一台 Ubuntu 安裝 microk8s 被若掃到，掃到的弱點是 SSL Medium Strength Cipher Suites Supported (SWEET32)。紀錄一下處理方式，其中我比較少用 nmap，所以才現 nmap 可以這樣檢查。另外 microk8s 相關服務，以前也很少改動的經驗，</p>
<h3 id="驗證弱點">驗證弱點</h3>
<p>可以根據弱掃報告提供的資料看來是</p>
<ul>
<li>16443 	API server</li>
<li>25000 	cluster-agent</li>
<li>10257 	kube-controller</li>
<li>10259 	kube-scheduler</li>
</ul>
<p>這些服務有問題。</p>
<p>可以用 nmap 重新確認：</p>
<div><pre class="hljs"><code>$ nmap --script ssl-enum-ciphers -p <span class="hljs-number">16443</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>
Starting Nmap <span class="hljs-number">7.94</span>SVN ( https:<span class="hljs-comment">//nmap.org ) at 2024-12-24 07:13 UTC</span>
Nmap scan report for localhost (<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>)
Host is up (<span class="hljs-number">0.00021</span>s latency).

PORT      STATE SERVICE
<span class="hljs-number">16443</span>/tcp open  unknown
<span class="hljs-string">| ssl-enum-ciphers: </span>
<span class="hljs-string">|   TLSv1.2: </span>
<span class="hljs-string">|     ciphers: </span>
<span class="hljs-string">|       TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (secp256r1) - A</span>
<span class="hljs-string">|       TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 (secp256r1) - A</span>
<span class="hljs-string">|       TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (secp256r1) - A</span>
<span class="hljs-string">|       TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (secp256r1) - A</span>
<span class="hljs-string">|       TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (secp256r1) - A</span>
<span class="hljs-string">|       TLS_RSA_WITH_AES_128_GCM_SHA256 (rsa 2048) - A</span>
<span class="hljs-string">|       TLS_RSA_WITH_AES_256_GCM_SHA384 (rsa 2048) - A</span>
<span class="hljs-string">|       TLS_RSA_WITH_AES_128_CBC_SHA (rsa 2048) - A</span>
<span class="hljs-string">|       TLS_RSA_WITH_AES_256_CBC_SHA (rsa 2048) - A</span>
<span class="hljs-string">|       TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA (secp256r1) - C</span>
<span class="hljs-string">|     compressors: </span>
<span class="hljs-string">|       NULL</span>
<span class="hljs-string">|     cipher preference: server</span>
<span class="hljs-string">|     warnings: </span>
<span class="hljs-string">|       64-bit block cipher 3DES vulnerable to SWEET32 attack</span>
<span class="hljs-string">|   TLSv1.3: </span>
<span class="hljs-string">|     ciphers: </span>
<span class="hljs-string">|       TLS_AKE_WITH_AES_128_GCM_SHA256 (ecdh_x25519) - A</span>
<span class="hljs-string">|       TLS_AKE_WITH_AES_256_GCM_SHA384 (ecdh_x25519) - A</span>
<span class="hljs-string">|       TLS_AKE_WITH_CHACHA20_POLY1305_SHA256 (ecdh_x25519) - A</span>
<span class="hljs-string">|     cipher preference: server</span>
<span class="hljs-string">|_  least strength: C</span>

Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned in <span class="hljs-number">0.29</span> seconds
</code></pre></div>
<p>warning 是 <code>64-bit block cipher 3DES vulnerable to SWEET32 </code>，查詢相關資料之後確認是需要 disable <code>TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</code>。</p>
<h3 id="作法">作法</h3>
<p>microk8s 的 <a title="https://github.com/canonical/microk8s/issues/1419" href="https://github.com/canonical/microk8s/issues/1419">issue</a> 有相關作法：</p>
<p>需要修改相關檔案</p>
<ul>
<li>/var/snap/microk8s/current/args/kube-apiserver</li>
<li>/var/snap/microk8s/current/args/kube-scheduler</li>
<li>/var/snap/microk8s/current/args/kube-controller-manager</li>
<li>/var/snap/microk8s/current/args/cluster-agent</li>
</ul>
<h4 id="varsnapmicrok8scurrentargskube-apiserver">/var/snap/microk8s/current/args/kube-apiserver</h4>
<h4 id="varsnapmicrok8scurrentargskube-scheduler">/var/snap/microk8s/current/args/kube-scheduler</h4>
<h4 id="varsnapmicrok8scurrentargskube-controller-manager">/var/snap/microk8s/current/args/kube-controller-manager</h4>
<p>找到 <code>tls-cipher-suites</code> 那一行，根據需要自己增刪修改，<br />
我這邊有問題的是 <code>TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</code>，所以我只要刪除掉就好。<br />
所以我目前修改後的設定像這樣：</p>
<div><pre class="hljs"><code>--tls-cipher-suites=TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDS<span class="hljs-built_in">A_WITH</span>_AES_128_CBC_SHA,TLS_ECDHE_ECDS<span class="hljs-built_in">A_WITH</span>_AES_128_GCM_SHA256,TLS_ECDHE_ECDS<span class="hljs-built_in">A_WITH</span>_AES_256_CBC_SHA,TLS_ECDHE_ECDS<span class="hljs-built_in">A_WITH</span>_AES_256_GCM_SHA384,TLS_ECDHE_ECDS<span class="hljs-built_in">A_WITH</span>_CHACHA20_POLY1305,TLS_ECDHE_ECDS<span class="hljs-built_in">A_WITH</span>_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RS<span class="hljs-built_in">A_WITH</span>_AES_128_CBC_SHA,TLS_ECDHE_RS<span class="hljs-built_in">A_WITH</span>_AES_128_GCM_SHA256,TLS_ECDHE_RS<span class="hljs-built_in">A_WITH</span>_AES_256_CBC_SHA,TLS_ECDHE_RS<span class="hljs-built_in">A_WITH</span>_AES_256_GCM_SHA384,TLS_ECDHE_RS<span class="hljs-built_in">A_WITH</span>_CHACHA20_POLY1305,TLS_ECDHE_RS<span class="hljs-built_in">A_WITH</span>_CHACHA20_POLY1305_SHA256,TLS_RS<span class="hljs-built_in">A_WITH</span>_AES_128_CBC_SHA,TLS_RS<span class="hljs-built_in">A_WITH</span>_AES_128_GCM_SHA256,TLS_RS<span class="hljs-built_in">A_WITH</span>_AES_256_CBC_SHA,TLS_RS<span class="hljs-built_in">A_WITH</span>_AES_256_GCM_SHA384
</code></pre></div>
<h4 id="varsnapmicrok8scurrentargscluster-agent">/var/snap/microk8s/current/args/cluster-agent</h4>
<p>只要加上</p>
<div><pre class="hljs"><code><span class="hljs-attr">--min-tls-version</span>=tls13</code></pre></div>
<h3 id="重新驗證">重新驗證</h3>
<p>通通好之後跑 <code>microk8s stop</code> and  <code>microk8s start</code><br />
之後用nmap檢查！</p>
<div><pre class="hljs"><code>$ nmap --script ssl-enum-ciphers -p <span class="hljs-number">16443</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>
Starting Nmap <span class="hljs-number">7.94</span>SVN ( https:<span class="hljs-comment">//nmap.org ) at 2024-12-24 07:27 UTC</span>
Nmap scan report for localhost (<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>)
Host is up (<span class="hljs-number">0.00018</span>s latency).

PORT      STATE SERVICE
<span class="hljs-number">16443</span>/tcp open  unknown
<span class="hljs-string">| ssl-enum-ciphers: </span>
<span class="hljs-string">|   TLSv1.2: </span>
<span class="hljs-string">|     ciphers: </span>
<span class="hljs-string">|       TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (secp256r1) - A</span>
<span class="hljs-string">|       TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 (secp256r1) - A</span>
<span class="hljs-string">|       TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (secp256r1) - A</span>
<span class="hljs-string">|       TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (secp256r1) - A</span>
<span class="hljs-string">|       TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (secp256r1) - A</span>
<span class="hljs-string">|       TLS_RSA_WITH_AES_128_GCM_SHA256 (rsa 2048) - A</span>
<span class="hljs-string">|       TLS_RSA_WITH_AES_256_GCM_SHA384 (rsa 2048) - A</span>
<span class="hljs-string">|       TLS_RSA_WITH_AES_128_CBC_SHA (rsa 2048) - A</span>
<span class="hljs-string">|       TLS_RSA_WITH_AES_256_CBC_SHA (rsa 2048) - A</span>
<span class="hljs-string">|     compressors: </span>
<span class="hljs-string">|       NULL</span>
<span class="hljs-string">|     cipher preference: server</span>
<span class="hljs-string">|   TLSv1.3: </span>
<span class="hljs-string">|     ciphers: </span>
<span class="hljs-string">|       TLS_AKE_WITH_AES_128_GCM_SHA256 (ecdh_x25519) - A</span>
<span class="hljs-string">|       TLS_AKE_WITH_AES_256_GCM_SHA384 (ecdh_x25519) - A</span>
<span class="hljs-string">|       TLS_AKE_WITH_CHACHA20_POLY1305_SHA256 (ecdh_x25519) - A</span>
<span class="hljs-string">|     cipher preference: server</span>
<span class="hljs-string">|_  least strength: A</span>

Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned in <span class="hljs-number">0.29</span> seconds
</code></pre></div>
<p>已經沒有warning!</p>
<h3 id="reference">Reference:</h3>
<p><a title="https://microk8s.io/docs/services-and-ports" href="https://microk8s.io/docs/services-and-ports">https://microk8s.io/docs/services-and-ports</a><br />
<a title="https://github.com/canonical/microk8s/issues/1419" href="https://github.com/canonical/microk8s/issues/1419">https://github.com/canonical/microk8s/issues/1419</a><br />
<a title="https://www.reddit.com/r/sysadmin/comments/1f1p7ip/ssl_medium_strength_cipher_suites_supported/" href="https://www.reddit.com/r/sysadmin/comments/1f1p7ip/ssl_medium_strength_cipher_suites_supported/">https://www.reddit.com/r/sysadmin/comments/1f1p7ip/ssl_medium_strength_cipher_suites_supported/</a><br />
<a title="https://help.defense.com/en/articles/6302810-ssl-medium-strength-cipher-suite-supported-sweet32-windows" href="https://help.defense.com/en/articles/6302810-ssl-medium-strength-cipher-suite-supported-sweet32-windows">https://help.defense.com/en/articles/6302810-ssl-medium-strength-cipher-suite-supported-sweet32-windows</a><br />
<a title="https://shantanudeyanik.medium.com/configure-kubernetes-with-strong-cipher-suites-0053ca0accba" href="https://shantanudeyanik.medium.com/configure-kubernetes-with-strong-cipher-suites-0053ca0accba">https://shantanudeyanik.medium.com/configure-kubernetes-with-strong-cipher-suites-0053ca0accba</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ubuntu 人臉辨識登入]]></title>
            <guid>5caccf0158c248b288f2b7699bcd5228</guid>
            <pubDate>Sat, 19 Oct 2024 10:23:34 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="ubuntu-人臉辨識登入">Ubuntu 人臉辨識登入</h1>
<p>Howdy 為 Linux 提供 Windows Hello™ 風格的身份驗證。使用內建紅外線發射器和攝影機與臉部辨識相結合來證明您是誰。</p>
<p>預設搭配使用 PAM 可以在您需要驗證身份的任何時候自動進行辨識：登入、鎖定螢幕、sudo、su 等，都可以用！</p>
<h2 id="安裝-howdy">安裝 HOWDY</h2>
<p>Debian/Ubuntu 常見的方式！</p>
<div><pre class="hljs"><code>sudo<span class="hljs-built_in"> add-apt-repository </span>ppa:boltgolt/howdy
sudo apt update
sudo apt install howdy</code></pre></div>
<h2 id="設定">設定</h2>
<p>安裝好之後就會有指令 howdy</p>
<div><pre class="hljs"><code>Usage:

howdy [-U user] [-y] command [argument]

Command 	Description
<span class="hljs-built_in">add</span> 	<span class="hljs-built_in">Add</span> a new face model <span class="hljs-keyword">for</span> a<span class="hljs-built_in"> user
</span>clear 	<span class="hljs-built_in">Remove</span> all face models <span class="hljs-keyword">for</span> a<span class="hljs-built_in"> user
config </span>	Open the<span class="hljs-built_in"> config </span>file <span class="hljs-keyword">in</span> your<span class="hljs-built_in"> default </span>editor
<span class="hljs-built_in">disable</span> 	<span class="hljs-built_in">Disable</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">enable</span> howdy
list 	List all saved face models <span class="hljs-keyword">for</span> a<span class="hljs-built_in"> user
</span><span class="hljs-built_in">remove</span> 	<span class="hljs-built_in">Remove</span> a specific model <span class="hljs-keyword">for</span> a<span class="hljs-built_in"> user
</span>snapshot 	Take a snapshot of your camera input
test 	Test the camera <span class="hljs-keyword">and</span> recognition methods
version 	<span class="hljs-built_in">Print</span> the current version number</code></pre></div>
<h2 id="增加-model">增加 model</h2>
<p>例如</p>
<div><pre class="hljs"><code>sudo howdy <span class="hljs-built_in">add</span> -U USERNAME</code></pre></div>
<p>建議多做一些，另外也應該定時多更新，我發現可能太久沒建模，常常登入失敗。</p>
<p>另外，也可以用 config 調整設定</p>
<div><pre class="hljs"><code>sudo howdy config</code></pre></div>
<p>我覺的 dark_threshold 預設 50 有點嚴格，建議調整到75...看個人經驗摟</p>
<h2 id="reference">Reference</h2>
<p><a title="https://github.com/boltgolt/howdy" href="https://github.com/boltgolt/howdy">https://github.com/boltgolt/howdy</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Uninstall k8s]]></title>
            <guid>d16ebe7c0fae4c609fc4284ba63356c1</guid>
            <pubDate>Wed, 16 Oct 2024 02:13:45 GMT</pubDate>
            <content:encoded><![CDATA[<p>uninstall k8s</p>
<p>平常都是直接幹掉VM，剛好遇到不能這麼做時候，發現不知道怎麼移除k8s</p>
<p>如果 Ubuntu 就這樣：</p>
<div><pre class="hljs"><code>kubeadm reset
sudo apt-<span class="hljs-built_in">get</span> purge kubeadm kubectl kubelet kubernetes-cni kube*   
sudo apt-<span class="hljs-built_in">get</span> autoremove  
sudo rm -rf ~/.kube</code></pre></div>
<p>參考資料：<br />
<a title="https://stackoverflow.com/questions/44698283/how-to-completely-uninstall-kubernetes" href="https://stackoverflow.com/questions/44698283/how-to-completely-uninstall-kubernetes">https://stackoverflow.com/questions/44698283/how-to-completely-uninstall-kubernetes</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[KASM Workspace 經驗與紀錄]]></title>
            <guid>718da3e8741942239278378778a127c9</guid>
            <pubDate>Mon, 14 Oct 2024 15:19:20 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="kasm">KASM</h1>
<p>KASM 是工作串流平台，</p>
<p>從任何位置將您的工作空間直接傳輸到任何裝置上的網路瀏覽器。部份開放原始碼。運作於一些類似居家上班、安全運算環境之分析架構平台。透過網頁就可以開啟遠端桌面，因為使用容器，速度也比較快。該專案也有提供一些資料保護措施。</p>
<h3 id="offline-kasm-installation">offline KASM installation</h3>
<p>先安裝好 docker 然後開始安裝 KASM</p>
<div><pre class="hljs"><code>curl -O https:<span class="hljs-comment">//kasm-static-content.s3.amazonaws.com/kasm_release_1.15.0.06fdc8.tar.gz</span>
curl -O https:<span class="hljs-comment">//kasm-static-content.s3.amazonaws.com/kasm_release_service_images_amd64_1.15.0.06fdc8.tar.gz</span>
curl -O https:<span class="hljs-comment">//kasm-static-content.s3.amazonaws.com/kasm_release_workspace_images_amd64_1.15.0.06fdc8.tar.gz</span>
tar -xf kasm_release_1.<span class="hljs-number">15.0</span>.<span class="hljs-number">06</span>fdc8<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span>
sudo bash kasm_release/install<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--offline-workspaces</span> /tmp/kasm_release_workspace_images_amd64_1.<span class="hljs-number">15.0</span>.<span class="hljs-number">06</span>fdc8<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> <span class="hljs-attr">--offline-service</span> /tmp/kasm_release_service_images_amd64_1.<span class="hljs-number">15.0</span>.<span class="hljs-number">06</span>fdc8<span class="hljs-selector-class">.tar</span>.gz</code></pre></div>
<p>安裝完成會顯示：</p>
<div><pre class="hljs"><code>Kasm UI Login Credentials

<span class="hljs-code">------------------------------------
  username: admin@kasm.local
  password: ddddddd
------------------------------------</span>
<span class="hljs-code">  username: user@kasm.local</span>
<span class="hljs-section">  password: ddddddd
------------------------------------</span>

<span class="hljs-section">Kasm Database Credentials
------------------------------------</span>
<span class="hljs-code">  username: kasmapp</span>
<span class="hljs-section">  password: ddddddd
------------------------------------</span>

<span class="hljs-section">Kasm Redis Credentials
------------------------------------</span>
<span class="hljs-section">  password: ddddddd
------------------------------------</span>

<span class="hljs-section">Kasm Manager Token
------------------------------------</span>
<span class="hljs-section">  password: ddddddd
------------------------------------</span>

<span class="hljs-section">Kasm Guac Token
------------------------------------</span>
<span class="hljs-section">  password: ddddddd
------------------------------------</span>

<span class="hljs-section">Service Registration Token
------------------------------------</span>
<span class="hljs-section">  password: ddddddd
------------------------------------</span>
</code></pre></div>
<p>好好保留，之後一些設定可能會用到。</p>
<h3 id="dlp-data-loss-prevention-措施">DLP (Data Loss Prevention) 措施</h3>
<p>KASM 有提供 Data Loss Prevention 的防護，例如</p>
<h3 id="watermark-浮水印">watermark 浮水印</h3>
<p><a title="https://kasmweb.com/docs/latest/how_to/kasmvnc_dlp_policies.html" href="https://kasmweb.com/docs/latest/how_to/kasmvnc_dlp_policies.html">https://kasmweb.com/docs/latest/how_to/kasmvnc_dlp_policies.html</a></p>
<p>watermark 實作</p>
<p>group-&gt;all user-&gt;file mapping</p>
<div><pre class="hljs"><code><span class="hljs-symbol">network:</span> 
<span class="hljs-symbol">  ssl:</span>
<span class="hljs-symbol">   pem_certificate:</span> $<span class="hljs-punctuation">{</span>HOME<span class="hljs-punctuation">}</span>/.vnc/self.pem
<span class="hljs-symbol">   pem_key:</span> $<span class="hljs-punctuation">{</span>HOME<span class="hljs-punctuation">}</span>/.vnc/self.pem
<span class="hljs-symbol">  udp:</span>
<span class="hljs-symbol">    public_ip:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>
<span class="hljs-symbol">data_loss_prevention:</span>
<span class="hljs-symbol">  watermark:</span>
<span class="hljs-symbol">    repeat_spacing:</span> <span class="hljs-number">50</span>
<span class="hljs-symbol">    tint:</span> <span class="hljs-number">200</span>,<span class="hljs-number">200</span>,<span class="hljs-number">235</span>,<span class="hljs-number">60</span>
<span class="hljs-symbol">    text:</span>
<span class="hljs-symbol">      template:</span> <span class="hljs-string">"TRE UserID ${KASM_USER} (${KASM_ID}) at %F %H:%M"</span>
<span class="hljs-symbol">      font:</span> auto
<span class="hljs-symbol">      font_size:</span> <span class="hljs-number">36</span>
<span class="hljs-symbol">      timezone_name:</span> Asia/Taipei</code></pre></div>
<p><img src="/_resources/b1c957971f734b48958082f35d16333f.png" /></p>
<h3 id="file-download-upload-clipboard-資料傳輸限制">file download upload clipboard ... 資料傳輸限制</h3>
<p><a title="https://kasmweb.com/docs/latest/security/data_loss_prevention.html#group-settings" href="https://kasmweb.com/docs/latest/security/data_loss_prevention.html#group-settings">https://kasmweb.com/docs/latest/security/data_loss_prevention.html#group-settings</a></p>
<h3 id="session-recording-桌面錄影">session recording 桌面錄影</h3>
<p><a title="https://kasmweb.com/docs/latest/guide/session_recording.html" href="https://kasmweb.com/docs/latest/guide/session_recording.html">https://kasmweb.com/docs/latest/guide/session_recording.html</a></p>
<p>Session recording is configured but not licensed. Will not enable. // 需要付費！</p>
<p>費用可以參考這邊<br />
<a title="https://www.kasmweb.com/server-checkout" href="https://www.kasmweb.com/server-checkout">https://www.kasmweb.com/server-checkout</a></p>
<h3 id="session-recording-實作">session recording 實作</h3>
<p>settings -&gt; global -&gt; Session Recording</p>
<p>access key &amp; secret key<br />
path:<br />
s3://kasm@tos.nchahahahc.org.tw/session-record/{user_id}/{image_friendly_name}-{start_date}.mp4</p>
<p>enable active code// 需要錢！</p>
<p>架構上，如果需要提供更安全的環境，一般會做</p>
<h3 id="multi-server-多主機架構">multi server 多主機架構</h3>
<p><a title="https://kasmweb.com/docs/latest/install/multi_server_install.html" href="https://kasmweb.com/docs/latest/install/multi_server_install.html">https://kasmweb.com/docs/latest/install/multi_server_install.html</a><br />
<a title="https://kasmweb.com/docs/latest/guide/compute/pools.html" href="https://kasmweb.com/docs/latest/guide/compute/pools.html">https://kasmweb.com/docs/latest/guide/compute/pools.html</a></p>
<p>基本上需要的是 docker agent<br />
找一台linux ubuntu2204 不需要publicl ip / private ip也可以<br />
安裝agent</p>
<div><pre class="hljs"><code>cd /tmp
curl -O https:<span class="hljs-comment">//kasm-static-content.s3.amazonaws.com/kasm_release_1.15.0.06fdc8.tar.gz</span>
tar -xf kasm_release_1.<span class="hljs-number">15.0</span>.<span class="hljs-number">06</span>fdc8<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span>
sudo bash kasm_release/install<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--role</span> agent <span class="hljs-attr">--public-hostname</span> <span class="hljs-selector-attr">[AGENT_HOSTNAME]</span> <span class="hljs-attr">--manager-hostname</span> <span class="hljs-selector-attr">[MANAGER_HOSTNAME]</span> <span class="hljs-attr">--manager-token</span> <span class="hljs-selector-attr">[MANAGER_TOKEN]</span></code></pre></div>
<p>MANAGER_HOSTNAME : kasm.hahaha.org<br />
MANAGER_TOKEN : ddddddd<br />
AGENT_HOSTNAME : 192.168.1.130</p>
<p>裝好之後回到admin可以看到已經自動新增了agent<br />
<img src="/_resources/09cc2c6550e646e59359bfda35bd9ad8.png" /></p>
<p>這時候docker還沒有辦法派到這邊，需要增加到pool<br />
<img src="/_resources/24a3e064069e41fa8f2b80d6bc2d5d04.png" /></p>
<p><img src="/_resources/dfa78470b10247dda0a011cc7f3982f9.png" /></p>
<p>之後workspace就會分散到pool</p>
<h3 id="ime">IME</h3>
<p>啟用輸入法切換，啟動之後輸入法切換才會正常<br />
<a title="https://kasmweb.com/docs/latest/how_to/ime.html" href="https://kasmweb.com/docs/latest/how_to/ime.html">https://kasmweb.com/docs/latest/how_to/ime.html</a></p>
<h3 id="keep-data">keep data</h3>
<p>啟用家目錄儲存<br />
<a title="https://kasmweb.com/docs/latest/guide/persistent_data.html" href="https://kasmweb.com/docs/latest/guide/persistent_data.html">https://kasmweb.com/docs/latest/guide/persistent_data.html</a></p>
<p>persistent data 實作</p>
<p>settings -&gt; global -&gt; Storage<br />
<img src="/_resources/eeff9faa03234b64b83afae0a5b049bd.png" /></p>
<p>group setting for <code>allow_persistent_profile </code> should be enabled</p>
<p>Persistent Profile Path<br />
s3://kasm@tos.hahaha.org.tw/user-profile/{username}/{image_id}/</p>
<h3 id="persistent-data-for-every-workspace-and-size-limit">persistent data for every workspace and size limit</h3>
<h3 id="docker-run-config-override-json">Docker Run Config Override (JSON)</h3>
<div><pre class="hljs"><code><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"hostname"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"kasm"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"extra_hosts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"proxy.ha.ha.org.tw"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"192.168.139.101"</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"environment"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"KASM_PROFILE_SIZE_LIMIT"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"20000"</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span></code></pre></div>
<p><img src="/_resources/d410aa67fb994612974aa008b091c267.png" /></p>
<h3 id="custom-network">custom network</h3>
<p><a title="https://kasmweb.com/docs/latest/how_to/bridged_network_source_nat.html" href="https://kasmweb.com/docs/latest/how_to/bridged_network_source_nat.html">https://kasmweb.com/docs/latest/how_to/bridged_network_source_nat.html</a></p>
<p>關鍵是：</p>
<div><pre class="hljs"><code>-<span class="hljs-keyword">A</span> POSTROUTING -s <span class="hljs-number">172.19.0.0</span>/<span class="hljs-number">16</span> -d <span class="hljs-number">203.145.220.209</span>/<span class="hljs-number">32</span> ! -o z_custom_a -j SNAT --to-source <span class="hljs-number">192.168.0.89</span></code></pre></div>
<p>Custom network for agent 實作</p>
<div><pre class="hljs"><code><span class="hljs-attribute">ip</span> a

<span class="hljs-number">2</span>: ens3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">8942</span> qdisc fq_codel state UP group default qlen <span class="hljs-number">1000</span>                                                                                                                                          
    link/ether fa:<span class="hljs-number">16</span>:3e:d8:b9:<span class="hljs-number">62</span> brd ff:ff:ff:ff:ff:ff                                                                
    altname enp0s3                                
    inet <span class="hljs-number">192.168.0.202</span>/<span class="hljs-number">24</span> metric <span class="hljs-number">100</span> brd <span class="hljs-number">192.168.0.255</span> scope global dynamic ens3
       valid_lft 39485sec preferred_lft 39485sec
    inet6 fe80::f816:3eff:fed8:b962/<span class="hljs-number">64</span> scope link 
       valid_lft forever preferred_lft forever


sudo docker network create \
    --driver bridge \
    --attachable \
    --opt <span class="hljs-string">"com.docker.network.bridge.name"</span>=<span class="hljs-string">"z_custom_a"</span> \
    --opt <span class="hljs-string">"com.docker.network.bridge.enable_ip_masquerade"</span>=<span class="hljs-string">"false"</span> \
    z_custom_a
    
ubuntu<span class="hljs-variable">@instance</span>-agent-<span class="hljs-number">1</span>:~$ sudo docker inspect z_custom_a | grep Subnet
                    <span class="hljs-string">"Subnet"</span>: <span class="hljs-string">"172.20.0.0/16"</span>,
                
ubuntu<span class="hljs-variable">@instance</span>-agent-<span class="hljs-number">1</span>:~$ sudo iptables -t nat -A POSTROUTING -s  <span class="hljs-number">172.20.0.0</span>/<span class="hljs-number">16</span> -d <span class="hljs-number">192.110.139.101</span>  ! -o z_custom_a -j SNAT --to-source  <span class="hljs-number">192.168.0.202</span>
ubuntu<span class="hljs-variable">@instance</span>-agent-<span class="hljs-number">1</span>:~$ 
ubuntu<span class="hljs-variable">@instance</span>-agent-<span class="hljs-number">1</span>:~$ sudo iptables -t nat -A POSTROUTING -s  <span class="hljs-number">172.20.0.0</span>/<span class="hljs-number">16</span> -d <span class="hljs-number">10.231.0.0</span>/<span class="hljs-number">16</span>  ! -o z_custom_a -j SNAT --to-source  <span class="hljs-number">192.168.0.202</span>
 
ubuntu<span class="hljs-variable">@instance</span>-agent-<span class="hljs-number">1</span>:~$ sudo iptables -t nat -A POSTROUTING -s  <span class="hljs-number">172.20.0.0</span>/<span class="hljs-number">16</span> -d <span class="hljs-number">192.168.0.0</span>/<span class="hljs-number">16</span>  ! -o z_custom_a -j SNAT --to-source  <span class="hljs-number">192.168.0.202</span>
</code></pre></div>
<p>以及其他功能，我的一些 Production 都有用上，感覺不錯！</p>
<h3 id="external_proxy-透過-proxy-進行防護">external_proxy 透過 Proxy 進行防護</h3>
<p><a title="https://kasmweb.com/docs/latest/how_to/external_proxy.html" href="https://kasmweb.com/docs/latest/how_to/external_proxy.html">https://kasmweb.com/docs/latest/how_to/external_proxy.html</a></p>
<h3 id="saml-認証">saml 認証</h3>
<p><a title="https://kasmweb.com/docs/latest/guide/saml_authentication.html" href="https://kasmweb.com/docs/latest/guide/saml_authentication.html">https://kasmweb.com/docs/latest/guide/saml_authentication.html</a></p>
<h3 id="workspace-registry">workspace registry</h3>
<p><a title="https://github.com/kasmtech/workspaces_registry_template" href="https://github.com/kasmtech/workspaces_registry_template">https://github.com/kasmtech/workspaces_registry_template</a><br />
<a title="https://github.com/kasmtech/workspaces_registry_template?tab=readme-ov-file" href="https://github.com/kasmtech/workspaces_registry_template?tab=readme-ov-file">https://github.com/kasmtech/workspaces_registry_template?tab=readme-ov-file</a><br />
<a title="https://github.com/Thomas-Tsai/kasm_registry/actions" href="https://github.com/Thomas-Tsai/kasm_registry/actions">https://github.com/Thomas-Tsai/kasm_registry/actions</a><br />
<a title="https://blog.libthomas.org/kasm_registry/1.0/" href="https://blog.libthomas.org/kasm_registry/1.0/">https://blog.libthomas.org/kasm_registry/1.0/</a></p>
<h3 id="custom-image">custom image</h3>
<p>build proxy desktop<br />
<a title="https://kasmweb.com/docs/latest/how_to/external_proxy.html" href="https://kasmweb.com/docs/latest/how_to/external_proxy.html">https://kasmweb.com/docs/latest/how_to/external_proxy.html</a><br />
add custom image to custom workspace<br />
<a title="https://github.com/kasmtech/workspaces_registry_template?tab=readme-ov-file#5-creating-workspaces" href="https://github.com/kasmtech/workspaces_registry_template?tab=readme-ov-file#5-creating-workspaces">https://github.com/kasmtech/workspaces_registry_template?tab=readme-ov-file#5-creating-workspaces</a></p>
<p>雖然不是完全的開源軟體，但是也很有誠意的釋出不少開源專案，如果非營利組織，在client 數量限制下用是沒有問題。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[測試用的 Windows]]></title>
            <guid>b0cbabcfc51b4436acd10450ff7a65c8</guid>
            <pubDate>Wed, 20 Mar 2024 03:31:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="測試用的-windows">測試用的 Windows</h1>
<p>最近有點人氣的 專案<br />
<a title="https://github.com/dockur/windows" href="https://github.com/dockur/windows">https://github.com/dockur/windows</a></p>
<h2 id="先用-docker-指令嘗試一下">先用 docker 指令嘗試一下</h2>
<div><pre class="hljs"><code>docker <span class="hljs-built_in">run</span> -it --rm --name windows -p 8006:8006 <span class="hljs-attribute">--device</span>=/dev/kvm --cap-<span class="hljs-built_in">add</span> NET_ADMIN --stop-timeout 120 dockurr/windows</code></pre></div>
<p>會看到訊息</p>
<div><pre class="hljs"><code><span class="hljs-attribute">BdsDxe</span>: failed to load Boot0002 <span class="hljs-string">"UEFI QEMU QEMU HARDDISK "</span> from PciRoot(<span class="hljs-number">0</span>x0)/Pci(<span class="hljs-number">0</span>xA,<span class="hljs-number">0</span>x0)/Scsi(<span class="hljs-number">0</span>x0,<span class="hljs-number">0</span>x0): Not Found
<span class="hljs-attribute">windows</span> | BdsDxe: loading Boot0001 <span class="hljs-string">"UEFI QEMU QEMU CD-ROM "</span> from PciRoot(<span class="hljs-number">0</span>x0)/Pci(<span class="hljs-number">0</span>x5,<span class="hljs-number">0</span>x0)/Scsi(<span class="hljs-number">0</span>x0,<span class="hljs-number">0</span>x0)
<span class="hljs-attribute">windows</span> | BdsDxe: starting Boot0001 <span class="hljs-string">"UEFI QEMU QEMU CD-ROM "</span> from PciRoot(<span class="hljs-number">0</span>x0)/Pci(<span class="hljs-number">0</span>x5,<span class="hljs-number">0</span>x0)/Scsi(<span class="hljs-number">0</span>x0,<span class="hljs-number">0</span>x0)</code></pre></div>
<p><a title="https://github.com/dockur/windows/issues/226#issuecomment-1997248926" href="https://github.com/dockur/windows/issues/226#issuecomment-1997248926">回應</a>是 <code>this normal</code>，所以不用管他。</p>
<p>然後開瀏覽器連到 127.0.0.1:8006</p>
<p>一開始會看到自動安裝、重開機，最後可以登入使用</p>
<p><img src="/_resources/b0553328f6464c469f2d5a6313520485.png" /></p>
<h2 id="嘗試用-docker-compose">嘗試用 docker-compose</h2>
<p>docker-compose 就是比較方便！</p>
<p>寫 docker-compose.yml</p>
<div><pre class="hljs"><code><span class="hljs-symbol">version:</span> <span class="hljs-string">"3"</span>
<span class="hljs-symbol">services:</span>
<span class="hljs-symbol">  windows:</span>
<span class="hljs-symbol">    image:</span> dockurr/windows
<span class="hljs-symbol">    container_name:</span> windows
<span class="hljs-symbol">    devices:</span>
      - <span class="hljs-keyword">/dev/</span>kvm
<span class="hljs-symbol">    cap_add:</span>
      - NET_ADMIN
<span class="hljs-symbol">    ports:</span>
      - <span class="hljs-number">8006</span>:<span class="hljs-number">8006</span>
      - <span class="hljs-number">3389</span>:<span class="hljs-number">3389</span>/tcp
      - <span class="hljs-number">3389</span>:<span class="hljs-number">3389</span>/udp
<span class="hljs-symbol">    stop_grace_period:</span> <span class="hljs-number">2</span>m
<span class="hljs-symbol">    restart:</span> on-failure
<span class="hljs-symbol">    environment:</span>
<span class="hljs-symbol">      RAM_SIZE:</span> <span class="hljs-string">"16G"</span>
<span class="hljs-symbol">      CPU_CORES:</span> <span class="hljs-string">"8"</span>
<span class="hljs-symbol">      DISK_SIZE:</span> <span class="hljs-string">"256G"</span>
<span class="hljs-symbol">    volumes:</span>
      - <span class="hljs-keyword">/home/</span>ubuntu<span class="hljs-keyword">/tmp/</span>win:/storage</code></pre></div>
<p>再用<code>docker-compose up -d</code> 去啟動安裝；之後再啟動就用<code>docker-compose start</code> 就可以開機。</p>
<p>很多需要的資訊<a title="https://github.com/dockur/windows?tab=readme-ov-file#faq" href="https://github.com/dockur/windows?tab=readme-ov-file#faq">FAQ</a>都有</p>
<p>例如</p>
<ol>
<li>手動安裝</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-symbol">environment:</span>
<span class="hljs-symbol">  MANUAL:</span> <span class="hljs-string">"Y"</span></code></pre></div>
<ol start="2">
<li>接上家裡的路由器</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span>
  <span class="hljs-attribute">DHCP</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Y"</span>
<span class="hljs-attribute">devices</span><span class="hljs-punctuation">:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">/dev/vhost-net</span>
<span class="hljs-attribute">device_cgroup_rules</span><span class="hljs-punctuation">:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">'c *:* rwm'</span></code></pre></div>
<p>等等。</p>
<h2 id="心得">心得</h2>
<p>就是方便快速弄的臨時的windows  還可以選版本，但是我覺得效能好像有打折...，還是 windows 不該要求效能...。但這樣的時綽方式也滿有趣的，看 Dockerfile 可以知道是用 scratch / debian base image，然後安裝一些套件，還有 qemux/qemu-docker:4.18 當作基礎在用。之後就是用 qemu 來啟動 windows  安裝與使用。這樣的方式一般確實會犧牲效能，但是操作好像滿方便的。先留著目前測試環境，會用一陣子看看。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[用 iptables 擋特定國家區域連線]]></title>
            <guid>4aecaf4dd5584ac7ab8747faa102d942</guid>
            <pubDate>Fri, 05 Jan 2024 02:35:04 GMT</pubDate>
            <content:encoded><![CDATA[<p>用 iptables 擋特定國家區域連線</p>
<p>這邊都說明的非常仔細了！照做</p>
<p><a title="https://blog.gslin.org/archives/2021/10/16/10377/%E7%94%A8-iptables-%E6%93%8B%E7%89%B9%E5%AE%9A%E5%9C%8B%E5%AE%B6%E7%9A%84%E5%B0%81%E5%8C%85/" href="https://blog.gslin.org/archives/2021/10/16/10377/%E7%94%A8-iptables-%E6%93%8B%E7%89%B9%E5%AE%9A%E5%9C%8B%E5%AE%B6%E7%9A%84%E5%B0%81%E5%8C%85/">https://blog.gslin.org/archives/2021/10/16/10377/用-iptables-擋特定國家的封包/</a></p>
<p><a title="https://ultramookie.com/2020/10/geoip-blocking-ubuntu-20.04/" href="https://ultramookie.com/2020/10/geoip-blocking-ubuntu-20.04/">https://ultramookie.com/2020/10/geoip-blocking-ubuntu-20.04/</a></p>
<p>安裝</p>
<div><pre class="hljs"><code>sudo apt-<span class="hljs-built_in">get</span> update; sudo apt-<span class="hljs-built_in">get</span> -y<span class="hljs-built_in"> upgrade
</span>sudo apt-<span class="hljs-built_in">get</span> install curl unzip perl
sudo apt-<span class="hljs-built_in">get</span> install xtables-addons-common
sudo apt-<span class="hljs-built_in">get</span> install libtext-csv-xs-perl libmoosex-types-netaddr-ip-perl</code></pre></div>
<p>更新我有小改：</p>
<div><pre class="hljs"><code><span class="hljs-comment">#!/bin/bash</span>

MON=$(date +<span class="hljs-string">"%m"</span>)
YR=$(date +<span class="hljs-string">"%Y"</span>)

wget https:<span class="hljs-regexp">//</span>download.db-ip.com<span class="hljs-regexp">/free/</span>dbip-country-lite-<span class="hljs-variable">${YR}</span>-<span class="hljs-variable">${MON}</span>.csv.gz -O <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/xt_geoip/</span>dbip-country-lite.csv.gz
gunzip <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/xt_geoip/</span>dbip-country-lite.csv.gz

<span class="hljs-regexp">/usr/</span>libexec<span class="hljs-regexp">/xtables-addons/</span>xt_geoip_build -D <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/xt_geoip/</span> -i <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/xt_geoip/</span>dbip-country-lite.csv

rm <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/xt_geoip/</span>dbip-country-lite.csv
</code></pre></div>
<p>最後就是放 crontab</p>
<div><pre class="hljs"><code><span class="hljs-symbol">11 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span> * * /<span class="hljs-keyword">usr</span>/local/bin/geo-update.sh</code></pre></div>
<p>iptables 看要怎麼玩:</p>
<div><pre class="hljs"><code># DROP ALL <span class="hljs-selector-tag">FROM</span> special country
iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -m geoip -<span class="hljs-selector-tag">p</span> tcp <span class="hljs-attr">--src-cc</span> RU,CN -j DROP

# allow <span class="hljs-number">443</span> <span class="hljs-selector-tag">from</span> TW
iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -m geoip -<span class="hljs-selector-tag">p</span> tcp <span class="hljs-attr">--dport</span> <span class="hljs-number">443</span> <span class="hljs-attr">--src-cc</span> TW -j ACCEPT
</code></pre></div>
<p>完！</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[linux switch ipv6]]></title>
            <guid>e4c0596599f84aa4ab5c1c8900f8ac3a</guid>
            <pubDate>Fri, 29 Dec 2023 01:46:35 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="linux-switch-ipv6">linux switch ipv6</h1>
<p>最近使用 name.com 遇到使用API需要加上白名單，但又不支援IPv6，只好停用。</p>
<p>每每都要 Google 一下語法，或是去network-manager 調整。</p>
<p>決定弄個script比較方便！</p>
<div><pre class="hljs"><code><span class="hljs-meta">#!/bin/bash</span>
iamroot=`whoami | grep root`
<span class="hljs-keyword">if</span> [ <span class="hljs-string">"X<span class="hljs-variable">$iamroot</span>"</span> == <span class="hljs-string">"X"</span> ];<span class="hljs-keyword">then</span>
    sudo <span class="hljs-variable">$0</span>
<span class="hljs-keyword">else</span>

    <span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-subst">$(sysctl -n net.ipv6.conf.all.disable_ipv6)</span>"</span> == <span class="hljs-string">'1'</span> ]; <span class="hljs-keyword">then</span>
        sysctl -w net.ipv6.conf.all.disable_ipv6=0
        sysctl -w net.ipv6.conf.default.disable_ipv6=0
    <span class="hljs-keyword">else</span>
        sysctl -w net.ipv6.conf.all.disable_ipv6=1
        sysctl -w net.ipv6.conf.default.disable_ipv6=1
    <span class="hljs-keyword">fi</span>
<span class="hljs-keyword">fi</span>
</code></pre></div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[轉移 google map place 到 kml]]></title>
            <guid>94e8807cdf454410bfe2f2c43d32ca9f</guid>
            <pubDate>Tue, 31 Oct 2023 01:31:53 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="轉移-google-map-place-到-kml">轉移 google map place 到 kml</h1>
<p>任何資料都不應該被單一雲端應用綁住。不知不覺間常常使用 Google Map 去標記常用的地點，驚訝的發現 Google Map 居然沒有匯出或是轉移的功能。於是做了一下功課，以下紀錄結果。</p>
<h2 id="匯出">匯出</h2>
<p>我查過 Google Map Place API 沒有 export 的功能，再查也沒有手動匯出的方式，除了 Google Takeout，從滿多地方可以看到討論有關<a title="https://support.google.com/maps/thread/69338785/how-can-i-get-export-to-export-all-saved-places?hl=en" href="https://support.google.com/maps/thread/69338785/how-can-i-get-export-to-export-all-saved-places?hl=en">如何從 Takeout 匯出</a></p>
<p>基本上就是先到 google takeout 網頁進行操作，網址：<a title="https://takeout.google.com" href="https://takeout.google.com">https://takeout.google.com</a><br />
<img src="/_resources/faa8fc6deff64929b2533f460e367210.png" /></p>
<p>建議先取消全選 再選取 地圖 (最愛地點)</p>
<p><img src="/_resources/77801a1e8bc84fa38271e8d9fb9ed31d.png" /></p>
<p>格式不用調整</p>
<p><img src="/_resources/e26312ebfe0548a085bd902349612de3.png" /></p>
<p>依序完成 takeout 設定之後，可以等 mail 收到下載連結。<br />
<img src="/_resources/2d6df7f52b264f67ae0d443b7083b3fd.png" /></p>
<p>或是存到其他空間。</p>
<p>我是選 mail 所以會收到下載連結</p>
<p><img src="/_resources/bdc59c346df7466881a33e80efe69c27.png" /></p>
<p>就存檔吧。</p>
<p>這邊比較可惜是不能設定持續，因為最多也就一年(6次)，所以，網頁也只能手動處理，非常不甘願...</p>
<h2 id="轉檔">轉檔</h2>
<p>雖然 GeoJSON 已經很多軟體有支援，but 我剛好要用的是 kml 。所以，上網找了 python kml ，不是很複雜，尤其是 <a title="https://simplekml.readthedocs.io" href="https://simplekml.readthedocs.io">simplekml</a>真的就是 SIMPLE...</p>
<p>直接拿 example 改寫，還比上網找工具快</p>
<div><pre class="hljs"><code>import json
import simplekml

f = open(<span class="hljs-string">'googlemap.json'</span>)
mapdata = json<span class="hljs-selector-class">.load</span>(f)
kml = simplekml<span class="hljs-selector-class">.Kml</span>()
kml<span class="hljs-selector-class">.document</span><span class="hljs-selector-class">.name</span> = <span class="hljs-string">"google"</span>

debug = True

<span class="hljs-keyword">for</span> point <span class="hljs-keyword">in</span> mapdata<span class="hljs-selector-attr">[<span class="hljs-string">'features'</span>]</span>:
    geometry = point<span class="hljs-selector-attr">[<span class="hljs-string">'geometry'</span>]</span>
    properties = point<span class="hljs-selector-attr">[<span class="hljs-string">'properties'</span>]</span>
    <span class="hljs-keyword">if</span> <span class="hljs-string">'location'</span> <span class="hljs-keyword">in</span> properties:
        location = properties<span class="hljs-selector-attr">[<span class="hljs-string">'location'</span>]</span>
        name = location<span class="hljs-selector-attr">[<span class="hljs-string">'name'</span>]</span>
        <span class="hljs-selector-tag">address</span> = location<span class="hljs-selector-attr">[<span class="hljs-string">'address'</span>]</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'address'</span> <span class="hljs-keyword">in</span> location <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
        country_code = location<span class="hljs-selector-attr">[<span class="hljs-string">'country_code'</span>]</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'country_code'</span> <span class="hljs-keyword">in</span> location <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
        <span class="hljs-keyword">if</span> <span class="hljs-string">'coordinates'</span> <span class="hljs-keyword">in</span> geometry:
            lon = geometry<span class="hljs-selector-attr">[<span class="hljs-string">'coordinates'</span>]</span><span class="hljs-selector-attr">[0]</span>
            lat = geometry<span class="hljs-selector-attr">[<span class="hljs-string">'coordinates'</span>]</span><span class="hljs-selector-attr">[1]</span>
        coordinates = <span class="hljs-selector-attr">[(lon, lat)]</span>
        pdate = properties<span class="hljs-selector-attr">[<span class="hljs-string">'date'</span>]</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'date'</span> <span class="hljs-keyword">in</span> properties <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
        url = properties<span class="hljs-selector-attr">[<span class="hljs-string">'google_maps_url'</span>]</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'google_maps_url'</span> <span class="hljs-keyword">in</span> properties <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
        description = <span class="hljs-string">"{}\n{}\n{}\n{}"</span><span class="hljs-selector-class">.format</span>(<span class="hljs-selector-tag">address</span>, country_code, pdate, url)

        <span class="hljs-keyword">if</span> debug == True: print(name, coordinates, description)
        pnt = kml<span class="hljs-selector-class">.newpoint</span>(name=name)
        pnt<span class="hljs-selector-class">.coords</span> = coordinates
        <span class="hljs-selector-id">#pnt</span><span class="hljs-selector-class">.address</span> = <span class="hljs-selector-tag">address</span>
        <span class="hljs-selector-id">#pnt</span><span class="hljs-selector-class">.snippet</span><span class="hljs-selector-class">.content</span> = url
        pnt.description=<span class="hljs-string">"address: {} ({})\n  datetime: {}\n url: {}"</span><span class="hljs-selector-class">.format</span>(<span class="hljs-selector-tag">address</span>, country_code, pdate, url)
        
kml<span class="hljs-selector-class">.save</span>(<span class="hljs-string">"googlemapPlace.kml"</span>)
</code></pre></div>
<h2 id="organic-maps">Organic Maps</h2>
<p>Organic Maps 就是之前的 maps.me，直接丟到檔案傳給 map app 就可以匯入 bookmark。</p>
<h2 id="reference">reference</h2>
<p><a title="https://support.google.com/maps/thread/69338785/how-can-i-get-export-to-export-all-saved-places?hl=en" href="https://support.google.com/maps/thread/69338785/how-can-i-get-export-to-export-all-saved-places?hl=en">https://support.google.com/maps/thread/69338785/how-can-i-get-export-to-export-all-saved-places?hl=en</a><br />
<a title="https://simplekml.readthedocs.io" href="https://simplekml.readthedocs.io">https://simplekml.readthedocs.io</a><br />
<a title="https://organicmaps.app/news/" href="https://organicmaps.app/news/">https://organicmaps.app/news/</a><br />
<a title="https://Maps.me" href="https://Maps.me">https://Maps.me</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CardDAV Sync]]></title>
            <guid>06195b16ad46459c8ab801bf496846c0</guid>
            <pubDate>Wed, 27 Sep 2023 01:33:45 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="carddav-sync">CardDAV Sync</h1>
<p>第一次使用 CardDAV 用來同步聯絡人，以 Xandikos 作為伺服器，用 vdirsyncer 進行主要同步，再配合 Thunder bird Tbsync 套件，堪稱完美。</p>
<h2 id="xandikos">Xandikos</h2>
<p>Xandikos 是一個輕量級但完整的 CalDAV 和 CardDAV 伺服器。</p>
<p>安裝；</p>
<div><pre class="hljs"><code>apt <span class="hljs-keyword">install</span> xandikos</code></pre></div>
<p>第一次啟動</p>
<div><pre class="hljs"><code>xandikos <span class="hljs-attr">--defaults</span> <span class="hljs-attr">--autocreate</span>  -d <span class="hljs-variable">$HOME</span>/dav -<span class="hljs-selector-tag">p</span> <span class="hljs-number">8888</span></code></pre></div>
<p>即可馬上進行測試與驗證，如果覺得不錯，想要持續使用，可以放到systemd user mode ; 因為 目前 xandikos Multi user 沒有很好用。</p>
<p>設定 systemd user mode 自動啟動：</p>
<div><pre class="hljs"><code>mkdir .config/systemd/user/xandikos.service </code></pre></div>
<p>xandikos.service</p>
<div><pre class="hljs"><code>[Unit]
Description=Xandikos CalDAV/CardDAV <span class="hljs-keyword">server</span>
<span class="hljs-keyword">After</span>=network.target

[Service]
ExecStart=/usr/bin/xandikos \
  <span class="hljs-comment">--directory $YOUR/DAV/PATH//dav \</span>
  <span class="hljs-comment">--listen-address 127.0.0.1 \</span>
  <span class="hljs-comment">--route-prefix=/dav \</span>
  <span class="hljs-comment">--port 8888 \</span>
  <span class="hljs-comment">--defaults</span>
<span class="hljs-keyword">Restart</span>=<span class="hljs-keyword">on</span>-failure
KillSignal=SIGQUIT
<span class="hljs-keyword">Type</span>=simple
NotifyAccess=<span class="hljs-keyword">all</span>

[Install]
WantedBy=multi-<span class="hljs-keyword">user</span>.target
</code></pre></div>
<div><pre class="hljs"><code>systemctl --<span class="hljs-keyword">user</span> <span class="hljs-title">daemon-reload</span>
systemctl --<span class="hljs-keyword">user</span> <span class="hljs-title">restart</span> xandikos.service</code></pre></div>
<p>同時有一個建議設定，因為系統已經有 apache2, 所以順便設定 recerse proxy</p>
<div><pre class="hljs"><code>       &lt;Location <span class="hljs-string">"/dav/"</span>&gt;
           ProxyPreserveHost On
           ProxyPass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8888</span><span class="hljs-regexp">/dav/</span>
           ProxyPassReverse http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8888</span><span class="hljs-regexp">/dav/</span>
           AuthType Basic
           AuthName DAV-Z
           AuthUserFile <span class="hljs-regexp">/xxxx/</span>.htpasswd
           Require valid-user
       &lt;/Location&gt; </code></pre></div>
<p>如此一來，我的DAV服務就是 <a title="https://xxx.thomas.org/dav/" href="https://xxx.thomas.org/dav/">https://xxx.thomas.org/dav/</a> 就會由 xandikos 進行。</p>
<p>也可以直接指定特並addressbook, 例如<code>https://xxx.thomas.org/dav/user/contacts/addressbook/</code></p>
<h2 id="csv2vcf">csv2vcf</h2>
<p>我有固定去爬一些通訊錄檔成 csv 檔案，這時候要用 <a title="https://github.com/mridah/csv2vcf" href="https://github.com/mridah/csv2vcf">csv2vcf</a>，but vsf 3.0 thunderbird 不適應，所以魔改了一些</p>
<div><pre class="hljs"><code><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_to_vcard</span>(<span class="hljs-params">input_file, single_output, input_file_format</span>):
                                          
    FN = input_file_format[<span class="hljs-string">'name'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'name'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
    NICKNAME = input_file_format[<span class="hljs-string">'nickname'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'nickname'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
    ORG = input_file_format[<span class="hljs-string">'org'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'org'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
    DEP = input_file_format[<span class="hljs-string">'dep'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'dep'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
    TEL = input_file_format[<span class="hljs-string">'tel'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'tel'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
    TITLE = input_file_format[<span class="hljs-string">'TITLE'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'TITLE'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>                                                                                       
    EMAIL = input_file_format[<span class="hljs-string">'email'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'email'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
    ADDR = input_file_format[<span class="hljs-string">'addr'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'addr'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
    NOTE = input_file_format[<span class="hljs-string">'note'</span>]-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'note'</span> <span class="hljs-keyword">in</span> input_file_format <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
                                                                                    
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>( input_file, <span class="hljs-string">'r'</span> ) <span class="hljs-keyword">as</span> source_file:
        reader = csv.reader( source_file )                                
        i = <span class="hljs-number">0</span>         
        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:
                                       
            FN_VAL = row[FN] <span class="hljs-keyword">if</span> FN <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>                           
            NICKNAME_VAL = row[NICKNAME] <span class="hljs-keyword">if</span> NICKNAME <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
            ORG_VAL = row[ORG] <span class="hljs-keyword">if</span> ORG <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
            DEP_VAL = row[DEP] <span class="hljs-keyword">if</span> DEP <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
            TEL_VAL = row[TEL] <span class="hljs-keyword">if</span> TEL <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
            TITLE_VAL = row[TITLE] <span class="hljs-keyword">if</span> TITLE <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
            EMAIL_VAL = row[EMAIL] <span class="hljs-keyword">if</span> EMAIL <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>   
            ADDR_VAL = row[ADDR] <span class="hljs-keyword">if</span> ADDR <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
            NOTE_VAL = row[NOTE] <span class="hljs-keyword">if</span> NOTE <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>
                  
            <span class="hljs-comment"># write each entry                                                                                                                                           </span>
            <span class="hljs-comment">#each_vcf = open('contacts/' + FN_VAL + '_' + TEL_VAL + ".vcf", 'w')</span>
            each_vcf = <span class="hljs-built_in">open</span>(<span class="hljs-string">'contacts/'</span> + NICKNAME_VAL.replace(<span class="hljs-string">" "</span>,<span class="hljs-string">""</span>) + <span class="hljs-string">".vcf"</span>, <span class="hljs-string">'w'</span>)
            each_vcf.write( <span class="hljs-string">'BEGIN:VCARD'</span> + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'VERSION:4.0'</span> + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'FN:'</span> + FN_VAL + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'NICKNAME:'</span> + NICKNAME_VAL + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'TEL;TYPE=work;VALUE=TEXT:'</span> + TEL_VAL + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'EMAIL;PREF=1:'</span> + EMAIL_VAL + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'ORG:'</span> + ORG_VAL + <span class="hljs-string">";"</span> + DEP_VAL +<span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'TITLE:'</span> + TITLE_VAL + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'ADR;TYPE=work:;;'</span> + ADDR_VAL + <span class="hljs-string">";;;;\n"</span>)
            each_vcf.write( <span class="hljs-string">'NOTE:'</span> + NOTE_VAL + <span class="hljs-string">"\n"</span>)
            each_vcf.write( <span class="hljs-string">'END:VCARD'</span> + <span class="hljs-string">"\n"</span>)
            each_vcf.write(<span class="hljs-string">"\n"</span>)
            each_vcf.close()
  
            i += <span class="hljs-number">1</span>
  
        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">" VCARDS written"</span>)
        <span class="hljs-built_in">print</span>(<span class="hljs-string">'----------------------'</span>)

</code></pre></div>
<p>這樣 csv 內的所有資料都換換成 vcf 目錄，每個檔案都是一個單一個人通訊錄，且是 VCF 4.0 format，這樣就完成通訊錄轉換。</p>
<h2 id="vdirsync">vdirsync</h2>
<p>Vdirsyncer 是一個命令列工具，用於在各種伺服器和本機檔案系統之間同步日曆和通訊錄。最受歡迎的用例是將伺服器與本機資料夾同步，並使用一組其他程式來更改本地事件和聯絡人。然後，Vdirsyncer 可以將這些變更同步回伺服器。</p>
<p>所以目標就是把剛剛轉檔好的 vcf 同步到 xandikos ，設定：</p>
<p>先建立目錄<code>mkdir .vdirsyncer/</code></p>
<div><pre class="hljs"><code><span class="hljs-section">[general]</span>
<span class="hljs-attr">status_path</span> = <span class="hljs-string">"~/.vdirsyncer/status/"</span>

<span class="hljs-section">[pair narlabs_contacts]</span>
<span class="hljs-attr">a</span> = <span class="hljs-string">"my_labs_local"</span>
<span class="hljs-attr">b</span> = <span class="hljs-string">"my_labs_remote"</span>
<span class="hljs-attr">collections</span> = [<span class="hljs-string">"from a"</span>, <span class="hljs-string">"from b"</span>]

<span class="hljs-section">[storage my_labs_local]</span>
<span class="hljs-attr">type</span> = <span class="hljs-string">"filesystem"</span>
<span class="hljs-attr">path</span> = <span class="hljs-string">"~/.contacts/"</span>
<span class="hljs-attr">fileext</span> = <span class="hljs-string">".vcf"</span>

<span class="hljs-section">[storage my_labs_remote]</span>
<span class="hljs-attr">type</span> = <span class="hljs-string">"carddav"</span>

<span class="hljs-comment"># We can simplify this URL here as well. In theory it shouldn't matter.</span>
<span class="hljs-attr">url</span> = <span class="hljs-string">"https://www.thomas.org/dav/user/"</span>
<span class="hljs-attr">username</span> = <span class="hljs-string">""</span> 
<span class="hljs-attr">password</span> = <span class="hljs-string">""</span> 
</code></pre></div>
<p>執行 <code>vdirsync sync</code>  第一次跑可能會需要discover; 依照指令執行</p>
<div><pre class="hljs"><code>vdirsyncer discover labs_contacts
vdirsyncer <span class="hljs-keyword">sync</span></code></pre></div>
<h2 id="thunderbird">Thunderbird</h2>
<p>Thunder bird 安裝套件 tbsync 之後，開 tbsync, 新增帳號，選 carddav , 選 manual Configuration</p>
<p><img src="/_resources/28dfe5bd1bca48948beef2deb0dfc8fe.png" /></p>
<p>依序輸入 name, server, user, pass<br />
<img src="/_resources/689b00f0f40b43babfb59313ac092724.png" /></p>
<p>理論上就完成了！</p>
<p>之後我用 crontab 定期整理 lab 通訊錄，並且自動同步到主機，所有thunderbird 就可以快速更新通訊錄了！</p>
<h2 id="debug">Debug</h2>
<p>example:</p>
<div><pre class="hljs"><code>curl --user <span class="hljs-string">"user:pass"</span> -s -X GET  -s https://www.libthomas.org/dav/user/contacts/addressbook/f52e850d36xxxxxxcd7e432212f311354dfa672316.vcf
<span class="hljs-section">BEGIN:VCARD</span>
<span class="hljs-section">VERSION:4.0</span>
<span class="hljs-section">FN:xxx</span>
<span class="hljs-section">NICKNAME:xxx</span>
<span class="hljs-section">TEL;TYPE=work;VALUE=TEXT:03-xx#xxx</span>
<span class="hljs-section">EMAIL;PREF=1:xx@xxx.org.tw</span>
<span class="hljs-section">ORG:ccc;yyy-xxx</span>
<span class="hljs-section">TITLE:xxx</span>
<span class="hljs-section">ADR;TYPE=work:;;rrr-ddd;;;;</span>
<span class="hljs-section">NOTE:</span>
<span class="hljs-section">END:VCARD</span>
</code></pre></div>
<h2 id="reference">Reference:</h2>
<p><a title="https://github.com/jelmer/xandikos" href="https://github.com/jelmer/xandikos">https://github.com/jelmer/xandikos</a><br />
<a title="https://www.xandikos.org/" href="https://www.xandikos.org/">https://www.xandikos.org/</a><br />
<a title="https://github.com/mridah/csv2vcf" href="https://github.com/mridah/csv2vcf">https://github.com/mridah/csv2vcf</a><br />
<a title="https://vdirsyncer.pimutils.org/en/stable/index.html" href="https://vdirsyncer.pimutils.org/en/stable/index.html">https://vdirsyncer.pimutils.org/en/stable/index.html</a><br />
<a title="https://vdirsyncer.pimutils.org/en/stable/tutorials/xandikos.html" href="https://vdirsyncer.pimutils.org/en/stable/tutorials/xandikos.html">https://vdirsyncer.pimutils.org/en/stable/tutorials/xandikos.html</a><br />
<a title="https://www.atmail.com/blog/caldav-carddav/" href="https://www.atmail.com/blog/caldav-carddav/">https://www.atmail.com/blog/caldav-carddav/</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ACME.SH 實作]]></title>
            <guid>d6422f0316dc4c1e965099f18624dc08</guid>
            <pubDate>Fri, 28 Jul 2023 01:40:47 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="什麼時候會用到-acmesh">什麼時候會用到 acme.sh</h2>
<p>我的服務基本上決定不開放，所以沒有辦法符合 certbot 的 requirements  ，沒有開防火牆、沒有 port 80 的狀況，所以這時候可以用 <a title="https://letsencrypt.org/docs/challenge-types/#dns-01-challenge" href="https://letsencrypt.org/docs/challenge-types/#dns-01-challenge">acme.sh 來達成 dns-01</a>  的方式取得憑證，並設定好相關服務、自動更新憑證等措施，以下紀錄作法：</p>
<h2 id="install">install</h2>
<p><a title="https://github.com/acmesh-official/acme.sh" href="https://github.com/acmesh-official/acme.sh">acme.sh github 在這邊</a>，可以參考相關的指令用法。</p>
<p>最簡單的安裝方式：</p>
<div><pre class="hljs"><code>curl https://<span class="hljs-built_in">get</span>.acme.<span class="hljs-keyword">sh</span> | <span class="hljs-keyword">sh</span> -s email=tlinuxXXXXXX@gmail.<span class="hljs-keyword">com</span></code></pre></div>
<p>安裝好之後要讓路徑生效，可以重新登入，或是直接 reload bashrc</p>
<div><pre class="hljs"><code><span class="hljs-built_in">source</span> ~/.bashrc</code></pre></div>
<h2 id="透過-acmesh-以-dns-01-取得憑證">透過 acme.sh 以 dns-01 取得憑證</h2>
<p>以下步驟建議用root可以適當避免一些麻煩，畢竟需要重新啟動服務，讀寫一些設定檔，建議直接用 root 而不是sudo。</p>
<p>需要先準備 name.com 的 api token，可以再 <a title="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">這邊</a> 找到設定方式。</p>
<p>acme 部份如下</p>
<div><pre class="hljs"><code>sudo su

export Namecom_Username=<span class="hljs-string">'USERNAME'</span>
export Namecom_Token=<span class="hljs-string">'TOKEN'</span>

acme<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--issue</span> -d www<span class="hljs-selector-class">.libthomas</span><span class="hljs-selector-class">.org</span> <span class="hljs-attr">--dns</span> dns_namecom <span class="hljs-attr">--reloadcmd</span> <span class="hljs-string">"/etc/init.d/apache2 reload"</span>

acme<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--issue</span> -d imap<span class="hljs-selector-class">.libthomas</span><span class="hljs-selector-class">.org</span> <span class="hljs-attr">--dns</span> dns_namecom <span class="hljs-attr">--reloadcmd</span> <span class="hljs-string">"/etc/init.d/dovecot restart"</span></code></pre></div>
<p>順利完成之後，再沒有特別指定 install 路徑時，cert 相關檔案會在 /root/acme.sh/xxx_ecc/ 裏面。</p>
<h2 id="update-configuration">update configuration</h2>
<p>我有 web/apache2 與 imap/dovecot 兩個服務，分別修改下設定檔，再重新啟動服務來套用到新的路徑。</p>
<h3 id="webapache2">web/apache2</h3>
<p>/etc/apache2/sites-enabled/default-ssl.conf</p>
<div><pre class="hljs"><code>SSLCertificateFile <span class="hljs-regexp">/root/</span>.acme.sh<span class="hljs-regexp">/www.libthomas.org_ecc/</span>www.libthomas.org.cer
SSLCertificateKeyFile <span class="hljs-regexp">/root/</span>.acme.sh<span class="hljs-regexp">/www.libthomas.org_ecc/</span>www.libthomas.org.key
SSLCertificateChainFile <span class="hljs-regexp">/root/</span>.acme.sh<span class="hljs-regexp">/www.libthomas.org_ecc/</span>ca.cer</code></pre></div>
<h3 id="imapdocecot">imap/docecot</h3>
<p>/etc/dovecot/conf.d/10-ssl.conf</p>
<div><pre class="hljs"><code>ssl_cert = &lt;/root/<span class="hljs-selector-class">.acme</span>.sh/imap<span class="hljs-selector-class">.libthomas</span>.org_ecc/imap<span class="hljs-selector-class">.libthomas</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.cer</span>
ssl_key = &lt;/root/<span class="hljs-selector-class">.acme</span>.sh/imap<span class="hljs-selector-class">.libthomas</span>.org_ecc/imap<span class="hljs-selector-class">.libthomas</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.key</span>
</code></pre></div>
<h3 id="restart-or-reload-service">restart or reload service</h3>
<div><pre class="hljs"><code><span class="hljs-regexp">/etc/i</span>nit.d/apache2 reload
<span class="hljs-regexp">/etc/i</span>nit.d/dovecot restart</code></pre></div>
<h2 id="renew-and-notify">renew and notify</h2>
<p>acme.sh 會自動把 renew 放到 user crontab 裡</p>
<div><pre class="hljs"><code>crontab -l
<span class="hljs-number">46</span> <span class="hljs-number">0</span> * * * <span class="hljs-string">"/root/.acme.sh"</span><span class="hljs-regexp">/acme.sh --cron --home "/</span>root<span class="hljs-regexp">/.acme.sh" &gt; /</span>dev/<span class="hljs-keyword">null</span></code></pre></div>
<p>另外也提供 notify 機制，我的主機可以寄信，就直接用mail</p>
<div><pre class="hljs"><code><span class="hljs-built_in">export</span> <span class="hljs-attribute">MAIL_TO</span>=<span class="hljs-string">"tlinuxxxxxx@gmail.com"</span>
acme.sh --set-notify  --notify-hook mail</code></pre></div>
<h2 id="check">check</h2>
<p>可以看目前憑證</p>
<div><pre class="hljs"><code><span class="hljs-attribute">acme</span>.sh list
<span class="hljs-attribute">Main_Domain</span>         KeyLength  SAN_Domains  CA           Created               Renew
<span class="hljs-attribute">imap</span>.libthomas.org  <span class="hljs-string">"ec-256"</span>   no           ZeroSSL.com  <span class="hljs-number">2023</span>-<span class="hljs-number">07</span>-<span class="hljs-number">27</span>T15:<span class="hljs-number">17</span>:<span class="hljs-number">57</span>Z  <span class="hljs-number">2023</span>-<span class="hljs-number">09</span>-<span class="hljs-number">24</span>T15:<span class="hljs-number">17</span>:<span class="hljs-number">57</span>Z
<span class="hljs-attribute">www</span>.libthomas.org   <span class="hljs-string">"ec-256"</span>   no           ZeroSSL.com  <span class="hljs-number">2023</span>-<span class="hljs-number">07</span>-<span class="hljs-number">27</span>T15:<span class="hljs-number">08</span>:<span class="hljs-number">26</span>Z  <span class="hljs-number">2023</span>-<span class="hljs-number">09</span>-<span class="hljs-number">24</span>T15:<span class="hljs-number">08</span>:<span class="hljs-number">26</span>Z</code></pre></div>
<h2 id="namecom-2-api-兩階段認証錯誤">name.com 2 api 兩階段認証錯誤</h2>
<p>如果更新遇到錯誤：</p>
<div><pre class="hljs"><code>{<span class="hljs-comment">"message"</span>:<span class="hljs-comment">"Permission Denied"</span>,<span class="hljs-comment">"details"</span>:<span class="hljs-comment">"Authentication Error - Account Has Two Step Verification Enabled"</span>}</code></pre></div>
<p>有兩個地方要設定：</p>
<ol>
<li>name.com網頁 -&gt; account-&gt; settings -&gt; Security Settings -&gt; enable Name.com API Access<br />
<img src="/_resources/783c5fde5cd74677a597b4fec6ece4cc.png" /></li>
<li>name.com網頁 -&gt; account-&gt; settings -&gt; API tokens -&gt; Whitelisted IPs<br />
<img src="/_resources/d0bf2821e5c5427fa03fb66b5bf4cb60.png" /></li>
</ol>
<p>name.com 網頁設定好之後，應該就不會有認証問題！</p>
<h2 id="acmezerosslcom-出狀況">acme.zerossl.com 出狀況</h2>
<p>根據這邊 <a title="https://github.com/acmesh-official/acme.sh/issues/4927" href="https://github.com/acmesh-official/acme.sh/issues/4927">https://github.com/acmesh-official/acme.sh/issues/4927</a> 看到有類似的狀況。</p>
<p>處理方式是把憑證主機換掉</p>
<div><pre class="hljs"><code>acme.<span class="hljs-keyword">sh</span> --<span class="hljs-keyword">set</span>-default-<span class="hljs-keyword">ca</span> --server letsencrypt</code></pre></div>
<p>但是如果要 renew 就需要修改設定檔  /root/.acme.sh/some-domain.com/some-domain.com.conf</p>
<div><pre class="hljs"><code><span class="hljs-attr">Le_API</span>=<span class="hljs-string">'https://acme-v02.api.letsencrypt.org/directory'</span></code></pre></div>
<p>另外刪除設定檔內<br />
Le_OrderFinalize, Le_LinkOrder, and Le_LinkCert 這些設定，整行刪掉！</p>
<p>存檔之後 renwe<br />
"/root/.acme.sh"/acme.sh --cron --home "/root/.acme.sh"</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[於 Synology 啟用 lets encrypt 整合 name.com+2fa+auto renew]]></title>
            <guid>5c65c58a0ee44b88adfbc5422465630a</guid>
            <pubDate>Thu, 11 May 2023 08:53:13 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="於-synology-啟用-lets-encrypt-整合-namecom2faauto-renew">於 Synology 啟用 lets encrypt 整合 name.com+2fa+auto renew</h1>
<p>我的 Synology 設定再防火牆內，不對外直接提供服務，即使如此也是需要上 TLS 來提升安全性。基本上 Synology 已經支援 lets encrypt ，but 預設用的方式是 HTTP-01，所以在防火牆的的限制下，無法順利自動完成，也不法自動 renew 。之前解決方式就是另外找一個點，拿到 ca, certs 之後，再手動放進去，然後就過期了...</p>
<p>ACMESH 有提供解決方式 <a title="https://github.com/acmesh-official/acme.sh/wiki/Synology-NAS-Guide%EF%BC%8C%E4%B8%BB%E8%A6%81%E6%98%AF%E9%81%8B%E7%94%A8" href="https://github.com/acmesh-official/acme.sh/wiki/Synology-NAS-Guide%EF%BC%8C%E4%B8%BB%E8%A6%81%E6%98%AF%E9%81%8B%E7%94%A8">https://github.com/acmesh-official/acme.sh/wiki/Synology-NAS-Guide，主要是運用</a> DNS-01 的方式，這樣的方式可以再 Synology 跑，也可以再其他 linux 上執行並佈署到 NAS 內。</p>
<p>相關說明可以細看上面連結，我看完之後認為至少有一些需要測試：</p>
<ol>
<li>Firewall 不可更改 。應可用acme.sh 利用dns-01方式來排除</li>
<li>OTP/U2F 啟用，自動佈署問題。疑似可以用 Syno_DID</li>
<li>使用 name.com api。剛好有支援name.com api</li>
<li>確定可以 auto-renew</li>
</ol>
<p>第一次，我直接在 NAS 裏面做，但是權限和環境限制多，不方便做測試，決定先再linux server 上實作後再丟到NAS裏面跑。</p>
<h2 id="ubuntu-上測試">Ubuntu 上測試</h2>
<p>依上數網址陸續步驟執行：</p>
<h3 id="取得-acmesh-並解壓縮到-usrlocalshareacme">取得 acme.sh 並解壓縮到 /usr/local/share/acme/</h3>
<div><pre class="hljs"><code>sudo su
cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>
wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/acmesh-official/</span>acme.sh<span class="hljs-regexp">/archive/m</span>aster.tar.gz
tar xvf master.tar.gz
mv acme.sh-master/ acme
cd acme
.<span class="hljs-regexp">/acme.sh --install --nocron --home /u</span>sr<span class="hljs-regexp">/local/</span>share<span class="hljs-regexp">/acme/</span>certs --accountemail <span class="hljs-string">"email@gmailcom"</span>
source ~/.bashrc</code></pre></div>
<p>注意<code>--home</code> 建議用絕對路徑，且後面不需要root了</p>
<h3 id="設定-namecom-dns">設定 name.com dns</h3>
<p>我的 domain 是 name.com 註冊管理的，所有支援的都可以再 <a title="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">這邊</a> 找到設定方式，以我的name.com而例，需要進行</p>
<div><pre class="hljs"><code><span class="hljs-built_in">export</span> <span class="hljs-attribute">Namecom_Username</span>=<span class="hljs-string">"testuser"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">Namecom_Token</span>=<span class="hljs-string">"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span></code></pre></div>
<p>name.com 有提供 API ，用戶可以申請使用。</p>
<h3 id="creating-the-certificate-步驟">Creating the certificate 步驟</h3>
<div><pre class="hljs"><code><span class="hljs-built_in">export</span> <span class="hljs-attribute">Namecom_Username</span>=<span class="hljs-string">"testuser"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">Namecom_Token</span>=<span class="hljs-string">"ff........fff"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">CERT_DOMAIN</span>=<span class="hljs-string">"piracy.domain.org"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">CERT_DNS</span>=<span class="hljs-string">"dns_namecom"</span>
./acme.sh --issue --home /usr/local/share/acme/certs -d <span class="hljs-string">"<span class="hljs-variable">$CERT_DOMAIN</span>"</span> --dns <span class="hljs-string">"<span class="hljs-variable">$CERT_DNS</span>"</span></code></pre></div>
<p>可以看到 dns record 的變化，他會自動申請一個txt 然後驗證後刪掉。成功後相關的檔案就放在 certs/ 裏面！過程不需要 http 開通防火牆，算是成功用 dns-01 完成驗證。</p>
<h3 id="佈署到-nas">佈署到 NAS</h3>
<p>我的 Synology NAS 不支援只 listen 特定 FQDN 且有換 port 又有 OTP 搞得這邊有點麻煩。依照文件依序設定 SYNO_Username, SYNO_Password, SYNO_Hostname, SYNO_Scheme, SYNO_Port 都要有正確的設定。另外因為OTP，SYNO_DID 我測試不行，會表示無法登入，可能某個環節出錯；只好暫時用比較差勁的方式取代 SYNO_DID，那就是export SYNO_TOTP_SECRET=xxx 並安裝 oathtool</p>
<div><pre class="hljs"><code>sudo apt-<span class="hljs-built_in">get</span> install oathtool
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_TOTP_SECRET</span>=xxx</code></pre></div>
<p>TOTP 就搜尋 export totp 就有，例如備份google Authenticator 然那的檔案就有了。可以參考 <a title="https://support.google.com/accounts/answer/1066447?hl=en&amp;co=GENIE.Platform%3DiOS%E3%80%82" href="https://support.google.com/accounts/answer/1066447?hl=en&amp;co=GENIE.Platform%3DiOS%E3%80%82">https://support.google.com/accounts/answer/1066447?hl=en&amp;co=GENIE.Platform%3DiOS。</a></p>
<p>整個script 就像</p>
<div><pre class="hljs"><code><span class="hljs-comment">#!/bin/bash</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">CERT_DOMAIN</span>=<span class="hljs-string">"piracy.domain.org"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Username</span>=<span class="hljs-string">'user'</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Password</span>=<span class="hljs-string">'xxxx'</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Hostname</span>=<span class="hljs-string">"piracy.domain.org"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Scheme</span>=<span class="hljs-string">"https"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Port</span>=<span class="hljs-string">"8208"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_TOTP_SECRET</span>=<span class="hljs-string">"ffffffff"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Certificate</span>=<span class="hljs-string">""</span>
./acme.sh --deploy --insecure --home /usr/local/share/acme/certs -d <span class="hljs-string">"<span class="hljs-variable">$CERT_DOMAIN</span>"</span> --deploy-hook synology_dsm
</code></pre></div>
<p>順利就會看到完成，且佈署到 NAS 裏面。再從DSM去設定後續步驟就好。<br />
以上，基本完成，如果 ubuntu 再加上 crontab 就可以一直renew &amp; deploiy</p>
<p>但是我希望這個過程直接在 NAS 中進行，所以我把程式都搬到  NAS 裏面，再 ssh 進去處理。</p>
<h2 id="synology-nas-設定-renew">Synology NAS 設定 renew</h2>
<p>把剛剛寫的程式 acme/ 整個目錄搬到 NAS，基本上就是先從網頁上傳，然後用admin group user 用 ssh 登入，切換到 root 把程式放到 /usr/share/acme 就一樣了。</p>
<p>把上變步驟重新執行一次，install, dns, cert, deploy 都確認沒問題，就來renew。</p>
<p>NAS 上沒有 oathtool 可以另外找<a title="https://github.com/reedobrien/goathtool" href="https://github.com/reedobrien/goathtool">工具</a>代替。</p>
<p>renew code 很簡單，可以手動跑看看！</p>
<div><pre class="hljs"><code><span class="hljs-comment">#!/bin/bash</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">CERT_DOMAIN</span>=<span class="hljs-string">"piracy.domain.org"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Username</span>=<span class="hljs-string">'user'</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Password</span>=<span class="hljs-string">'xxxx'</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Hostname</span>=<span class="hljs-string">"piracy.domain.org"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Scheme</span>=<span class="hljs-string">"https"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Port</span>=<span class="hljs-string">"8208"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_TOTP_SECRET</span>=<span class="hljs-string">"ffffffff"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Certificate</span>=<span class="hljs-string">""</span>
./acme.sh --cron --home /usr/local/share/acme/certs -d <span class="hljs-string">"<span class="hljs-variable">$CERT_DOMAIN</span>"</span> --deploy-hook synology_dsm</code></pre></div>
<p>然後到 Synology 設定排程</p>
<blockquote>
<p>In DSM control panel, open the 'Task Scheduler' and create a new scheduled task for a &gt;user-defined script.</p>
</blockquote>
<blockquote>
<blockquote>
<p>General Setting: Task - Update default Cert. User - root<br />
Schedule: Setup a weekly renewal. For example, 11:00 am every saturday.<br />
Task setting: User-defined-script:</p>
</blockquote>
</blockquote>
<p>script 長這樣</p>
<div><pre class="hljs"><code><span class="hljs-built_in">export</span> <span class="hljs-attribute">CERT_DOMAIN</span>=<span class="hljs-string">"piracy.domain.org"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Username</span>=<span class="hljs-string">'user'</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Password</span>=<span class="hljs-string">'xxxx'</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Hostname</span>=<span class="hljs-string">"piracy.domain.org"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Scheme</span>=<span class="hljs-string">"https"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Port</span>=<span class="hljs-string">"8208"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_TOTP_SECRET</span>=<span class="hljs-string">"ffffffff"</span>
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNO_Certificate</span>=<span class="hljs-string">""</span>
./acme.sh --cron --home /usr/local/share/acme/certs -d <span class="hljs-string">"<span class="hljs-variable">$CERT_DOMAIN</span>"</span> --deploy-hook synology_dsm</code></pre></div>
<p>差不多之後就是觀察會不會自動renew了！</p>
<p>後來也注意到 deploy 方法不少，也許之後換個更好的方式！</p>
<h2 id="reference">reference</h2>
<p><a title="https://lippertmarkus.com/2020/03/14/synology-le-dns-auto-renew/" href="https://lippertmarkus.com/2020/03/14/synology-le-dns-auto-renew/">https://lippertmarkus.com/2020/03/14/synology-le-dns-auto-renew/</a><br />
<a title="https://github.com/acmesh-official/acme.sh/wiki/Synology-NAS-Guide#configuring-certificate-renewal" href="https://github.com/acmesh-official/acme.sh/wiki/Synology-NAS-Guide#configuring-certificate-renewal">https://github.com/acmesh-official/acme.sh/wiki/Synology-NAS-Guide#configuring-certificate-renewal</a><br />
<a title="https://github.com/acmesh-official/acme.sh/wiki/deployhooks#20-deploy-the-cert-into-synology-dsm" href="https://github.com/acmesh-official/acme.sh/wiki/deployhooks#20-deploy-the-cert-into-synology-dsm">https://github.com/acmesh-official/acme.sh/wiki/deployhooks#20-deploy-the-cert-into-synology-dsm</a><br />
<a title="https://github.com/acmesh-official/acme.sh/wiki/deployhooks#20-deploy-the-cert-into-synology-dsm" href="https://github.com/acmesh-official/acme.sh/wiki/deployhooks#20-deploy-the-cert-into-synology-dsm">https://github.com/acmesh-official/acme.sh/wiki/deployhooks#20-deploy-the-cert-into-synology-dsm</a><br />
<a title="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a><br />
<a title="https://github.com/acmesh-official/acme.sh/issues/2727" href="https://github.com/acmesh-official/acme.sh/issues/2727">https://github.com/acmesh-official/acme.sh/issues/2727</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ssh-agent]]></title>
            <guid>d1f23bb1240c4c09b39dae3c29ba04ff</guid>
            <pubDate>Wed, 03 May 2023 06:27:56 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="ssh-agent">ssh-agent</h1>
<p>從 github 上看到</p>
<blockquote>
<blockquote>
<p>SSH agent forwarding can be used to make deploying to a server simple. It allows you to use your local SSH keys instead of leaving keys (without passphrases!) sitting on your server.</p>
</blockquote>
</blockquote>
<p>剛好很適合我最近再整理 ssh key 的需求。因為都換成實體金鑰(fido or tpm)整合模式，所以遠端的電腦要怎麼用 ssh key 來作認証，這時候 ssh-agent 就幫了大忙。</p>
<h2 id="實作1-用-fido-security-key">實作1 用 fido security key：</h2>
<h3 id="from-desktop">from desktop</h3>
<p>id_ecdsa_sk.pub 已經先上傳到github</p>
<div><pre class="hljs"><code><span class="hljs-built_in">eval</span> <span class="hljs-string">"$(ssh-agent -s)"</span>
ssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_ecdsa_sk
ssh -A server</code></pre></div>
<h3 id="from-server">from server</h3>
<p>主機內確認沒有任何 private key，但是可以用 ssh-agent 當作認証登入github</p>
<div><pre class="hljs"><code>ssh git@github.com  // 不會有提示，要再<span class="hljs-number">10</span>秒內按一下fido security key
PTY allocation request failed <span class="hljs-keyword">on</span> channel <span class="hljs-number">0</span>
Hi Thomas! You<span class="hljs-symbol">'ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.
Connection <span class="hljs-keyword">to</span> github.com closed. </code></pre></div>
<h2 id="實作2-用-tpm-security-key">實作2 用 TPM security key：</h2>
<p>和上面差異的只有 TPM security key</p>
<h3 id="from-notebook">from notebook</h3>
<p>public key 已經先上傳到 github</p>
<div><pre class="hljs"><code>eval <span class="hljs-string">"$(ssh-agent -s)"</span>
ssh-add -s <span class="hljs-regexp">/usr/</span>lib64<span class="hljs-regexp">/pkcs11/</span>opensc-pkcs11.so
ssh -A server</code></pre></div>
<h2 id="其他注意">其他注意</h2>
<h3 id="sshconfigure">ssh/configure</h3>
<p>可以考慮設定</p>
<div><pre class="hljs"><code>  <span class="hljs-attribute">AddKeysToAgent</span> <span class="hljs-literal">yes</span>
  ForwardAgent <span class="hljs-literal">yes</span></code></pre></div>
<p>但我沒有，反而需要的時候再手動重新<code>ssh-add ; ssh -A</code>就好！</p>
<h3 id="ssh-agent-2">ssh-agent</h3>
<p>一般比較常用 <code>ssh-add -l</code> 來看agent有沒有啟動、有沒有已經載入的 key！</p>
<p>不同 linux 不見得都會自動跑 ssh-agent ，所以如果要利用已經自動跑的ssh-agent可以這樣：</p>
<p><code>ps ax | grep ssh-agent </code> 觀察 bind_address 位置與 PID</p>
<div><pre class="hljs"><code>$ ps ax | <span class="hljs-keyword">grep</span> ssh-agent
   <span class="hljs-number">1319</span> ?        Ss     <span class="hljs-number">0</span>:<span class="hljs-number">00</span> <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/ssh-agent -D -a /</span>run<span class="hljs-regexp">/user/</span><span class="hljs-number">1000</span>/ssh-agent.socket
export SSH_AUTH_SOCK=<span class="hljs-regexp">/run/u</span>ser<span class="hljs-regexp">/1000/</span>ssh-agent.socket
export SSH_AGENT_PID=<span class="hljs-number">1319</span>
ssh-key -l</code></pre></div>
<p>如果找不到，可能就是沒有啟動agent 那就 <code>eval "$(ssh-agent -s)"</code>即可啟用動！</p>
<p>reference：</p>
<p><a title="https://www.howtogeek.com/devops/what-is-ssh-agent-forwarding-and-how-do-you-use-it/" href="https://www.howtogeek.com/devops/what-is-ssh-agent-forwarding-and-how-do-you-use-it/">https://www.howtogeek.com/devops/what-is-ssh-agent-forwarding-and-how-do-you-use-it/</a><br />
<a title="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding" href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding">https://docs.github.com/en/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding</a><br />
<a title="https://stackoverflow.com/questions/44250002/how-to-solve-sign-and-send-pubkey-signing-failed-agent-refused-operation" href="https://stackoverflow.com/questions/44250002/how-to-solve-sign-and-send-pubkey-signing-failed-agent-refused-operation">https://stackoverflow.com/questions/44250002/how-to-solve-sign-and-send-pubkey-signing-failed-agent-refused-operation</a><br />
<a title="https://stackdiary.com/linux-docs/ssh-add/" href="https://stackdiary.com/linux-docs/ssh-add/">https://stackdiary.com/linux-docs/ssh-add/</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[authprogs]]></title>
            <guid>b8f7c256ccc847bda768778acb27be3d</guid>
            <pubDate>Wed, 03 May 2023 05:55:40 GMT</pubDate>
            <content:encoded><![CDATA[<p>authprogs</p>
<p>目前已經把所有ssh key 換成 tpm or fido 但是 就是有一些特定用途需要用到 檔案 private key，通常都是一些自動相關的任務。</p>
<p>這時候可以透過 authproge 來限制 特定的 ssh key 只能執行 特定的 指令。</p>
<p>安裝：</p>
<div><pre class="hljs"><code>sudo apt-<span class="hljs-built_in">get</span> install authprogs</code></pre></div>
<p>設定 authorized_keys 讓這個 ssh key 知道要透過 authprogs 執行過慮後的任務：</p>
<div><pre class="hljs"><code>command=<span class="hljs-string">"/usr/bin/authprogs --run"</span> ssh-rsa AAAAB3NzaC1yc2EAAAABIwA####GrTQAISp6z6emA3yuXI5qOlIwDb1pzgJqXZU+..../phpkBpJKw== user@host
</code></pre></div>
<p>設定 authprogs.yml 來過慮可以執行的任務：</p>
<div><pre class="hljs"><code><span class="hljs-comment"># Simple commands, no IP restrictions.</span>
<span class="hljs-bullet">-</span>
  <span class="hljs-attribute">allow</span><span class="hljs-punctuation">:</span>
    <span class="hljs-bullet">-</span>
      <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/bin/ip</span>
      <span class="hljs-attribute">allow_trailing_args</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span></code></pre></div>
<p>先用一個簡單範例測試，上面範例允許遠端用sshkey登入後執行 <code>ip a</code> 這樣的指令。</p>
<p>之後如果用 key 登入則會出現</p>
<div><pre class="hljs"><code>authprogs: <span class="hljs-keyword">no</span> SSH command <span class="hljs-built_in">found</span>; interactive shell disallowed.
Shared <span class="hljs-keyword">connection</span> <span class="hljs-keyword">to</span> www.libthomas.org closed.</code></pre></div>
<p>這樣也會錯</p>
<div><pre class="hljs"><code>ssh host -i ~<span class="hljs-regexp">/.ssh/i</span>d_rsa... ip</code></pre></div>
<p>這樣才會正確</p>
<div><pre class="hljs"><code>ssh host -i ~<span class="hljs-regexp">/.ssh/i</span>d_rsa... <span class="hljs-regexp">/bin/i</span>p</code></pre></div>
<p>allow_trailing_args 則使允許參數</p>
<p>其他設定細節：<br />
<a title="https://manpages.ubuntu.com/manpages/impish/man1/authprogs.1.html" href="https://manpages.ubuntu.com/manpages/impish/man1/authprogs.1.html">https://manpages.ubuntu.com/manpages/impish/man1/authprogs.1.html</a><br />
<a title="https://github.com/daethnir/authprogs/blob/main/doc/authprogs.md" href="https://github.com/daethnir/authprogs/blob/main/doc/authprogs.md">https://github.com/daethnir/authprogs/blob/main/doc/authprogs.md</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SSH key with TPM]]></title>
            <guid>f401552ba59742b7964300cbe1431ac8</guid>
            <pubDate>Tue, 02 May 2023 14:42:30 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="ssh-key-with-tpm">SSH key with TPM</h1>
<h2 id="tpm-20">TPM 2.0</h2>
<p>新電腦很多都支援 TPM2.0了，可以用TPM當作SSH key 來加強安全性。</p>
<p>安裝：</p>
<div><pre class="hljs"><code>sudo apt install libtpm2-pkcs11-tools libtpm2-pkcs11<span class="hljs-number">-1</span>
sudo usermod -a -G tss <span class="hljs-string">"$(id -nu)"</span>
<span class="hljs-keyword">new</span><span class="hljs-type">group</span> tss</code></pre></div>
<p>測試：</p>
<div><pre class="hljs"><code>ls <span class="hljs-regexp">/dev/</span>tpm0
tpm2_getcap properties-fixed</code></pre></div>
<p>建key：</p>
<div><pre class="hljs"><code>tpm2_ptool init
tpm2_ptool addtoken <span class="hljs-attribute">--pid</span>=1 <span class="hljs-attribute">--label</span>=ssh <span class="hljs-attribute">--userpin</span>=MySecretPassword <span class="hljs-attribute">--sopin</span>=MyRecoveryPassword
tpm2_ptool addkey <span class="hljs-attribute">--label</span>=ssh <span class="hljs-attribute">--userpin</span>=MySecretPassword <span class="hljs-attribute">--algorithm</span>=rsa2048</code></pre></div>
<p>取得公鑰：</p>
<div><pre class="hljs"><code>ssh-keygen -D <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>libtpm2_pkcs11.so.<span class="hljs-number">1</span></code></pre></div>
<p>連線：</p>
<div><pre class="hljs"><code>ssh -I <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>libtpm2_pkcs11.so.<span class="hljs-number">1</span> server</code></pre></div>
<h2 id="tpm-12">TPM 1.2</h2>
<p>先確認 kernel 支援</p>
<div><pre class="hljs"><code>dmesg | grep -i tpm
[    <span class="hljs-number">5.167670</span>] tpm_tis <span class="hljs-number">00</span>:<span class="hljs-number">08</span>: <span class="hljs-number">1.2</span> TPM (device-<span class="hljs-built_in">id</span> <span class="hljs-number">0x1B</span>, rev-<span class="hljs-built_in">id</span> <span class="hljs-number">16</span>)</code></pre></div>
<div><pre class="hljs"><code><span class="hljs-attribute">thomas</span>@T460s:~$ lsmod|grep tpm
<span class="hljs-attribute">tpm_tis</span>                <span class="hljs-number">16384</span>  <span class="hljs-number">0</span>
<span class="hljs-attribute">tpm_tis_core</span>           <span class="hljs-number">28672</span>  <span class="hljs-number">1</span> tpm_tis
<span class="hljs-attribute">tpm</span>                    <span class="hljs-number">73728</span>  <span class="hljs-number">4</span> tpm_tis,tpm_tis_core
<span class="hljs-attribute">rng_core</span>               <span class="hljs-number">16384</span>  <span class="hljs-number">1</span> tpm</code></pre></div>
<p>看看有沒有裝置檔</p>
<div><pre class="hljs"><code>ls <span class="hljs-regexp">/dev/</span>tpm*</code></pre></div>
<p>要確認 tcsd 服務有安裝啟動</p>
<div><pre class="hljs"><code>sudo apt-get install trousers
systemctl status tcsd
● trousers.service - LSB: starts tcsd
<span class="hljs-symbol">     Loaded:</span> loaded (<span class="hljs-keyword">/etc/</span>init.d/<span class="hljs-attr">trousers</span><span class="hljs-punctuation">;</span> generated)
<span class="hljs-symbol">     Active:</span> active (running) since Fri <span class="hljs-number">2023</span><span class="hljs-number">-04</span><span class="hljs-number">-28</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">37</span> CST<span class="hljs-punctuation">;</span> <span class="hljs-number">4</span> days ago
<span class="hljs-symbol">       Docs:</span> man:systemd-sysv-generator(<span class="hljs-number">8</span>)
<span class="hljs-symbol">    Process:</span> <span class="hljs-number">7571</span> ExecS<span class="hljs-attr">tart</span><span class="hljs-operator">=</span><span class="hljs-keyword">/etc/</span>init.d/trousers start (<span class="hljs-attr">code</span><span class="hljs-operator">=</span>exited, <span class="hljs-attr">status</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>/SUCCESS)
<span class="hljs-symbol">      Tasks:</span> <span class="hljs-number">1</span> (limit: <span class="hljs-number">28635</span>)
<span class="hljs-symbol">     Memory:</span> <span class="hljs-number">776.0</span>K
<span class="hljs-symbol">        CPU:</span> <span class="hljs-number">2.817</span>s
<span class="hljs-symbol">     CGroup:</span> /system.slice/trousers.service
             └─<span class="hljs-number">7577</span> <span class="hljs-keyword">/usr/</span>sbin/tcsd
</code></pre></div>
<p>測試版本</p>
<div><pre class="hljs"><code><span class="hljs-attribute">$ tpm_version
  TPM 1.2 Version Info</span><span class="hljs-punctuation">:</span>
  <span class="hljs-attribute">Chip Version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">       1.2.6.40</span>
  <span class="hljs-attribute">Spec Level</span><span class="hljs-punctuation">:</span> <span class="hljs-string">         2</span>
  <span class="hljs-attribute">Errata Revision</span><span class="hljs-punctuation">:</span> <span class="hljs-string">    3</span>
  <span class="hljs-attribute">TPM Vendor ID</span><span class="hljs-punctuation">:</span> <span class="hljs-string">      IFX</span>
  <span class="hljs-attribute">Vendor Specific data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">062800be 0074706d 733038ff ff</span>
  <span class="hljs-attribute">TPM Version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">        01010000</span>
  <span class="hljs-attribute">Manufacturer Info</span><span class="hljs-punctuation">:</span> <span class="hljs-string">  49465800</span>

<span class="hljs-attribute">$ tpm_selftest -l info
  TPM Test Results</span><span class="hljs-punctuation">:</span> <span class="hljs-string">800001ff</span>
tpm_selftest succeeded
</code></pre></div>
<p>設定</p>
<div><pre class="hljs"><code>mkdir ~/.simple-tpm-pk11
stpm-keygen -o ~<span class="hljs-regexp">/.simple-tpm-pk11/my</span>.key
echo key my.key &gt; ~<span class="hljs-regexp">/.simple-tpm-pk11/</span>config</code></pre></div>
<p>取得公鑰：</p>
<div><pre class="hljs"><code>$ ssh-keygen -D <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>libsimple-tpm-pk11.so
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCTGgGIIZDZ+X+s823nBoAayFxfnv8uVJxcB9MEeOXalKsckqQV9tKgjcB0JOc7F3Dc0LMvTMhuICtf3xBEo6z0wyTt+sj1Q6tf6EVTTGQotYGvesLWUWGoNAmihRXRWSywL4yKgp5aVxE......e5EEE40fiDozFGDImrdFiSdt17iNOAQWjj5mmsaJMRzwvJLViO3oHbViP2sP3Hql1eo+ml x</code></pre></div>
<p>將公鑰丟到主機上 authorized_keys 然後登入時</p>
<div><pre class="hljs"><code>ssh SSH-SERVER -I <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>libsimple-tpm-pk11.so</code></pre></div>
<h2 id="reference">reference</h2>
<p><a title="https://blog.ledger.com/ssh-with-tpm/" href="https://blog.ledger.com/ssh-with-tpm/">https://blog.ledger.com/ssh-with-tpm/</a><br />
<a title="https://github.com/tpm2-software/tpm2-pkcs11/blob/1.6.0/docs/SSH.md" href="https://github.com/tpm2-software/tpm2-pkcs11/blob/1.6.0/docs/SSH.md">https://github.com/tpm2-software/tpm2-pkcs11/blob/1.6.0/docs/SSH.md</a><br />
<a title="https://blog.habets.se/2013/11/TPM-chip-protecting-SSH-keys---properly.html" href="https://blog.habets.se/2013/11/TPM-chip-protecting-SSH-keys---properly.html">https://blog.habets.se/2013/11/TPM-chip-protecting-SSH-keys---properly.html</a><br />
<a title="https://wiki.archlinux.org/title/Trusted_Platform_Module" href="https://wiki.archlinux.org/title/Trusted_Platform_Module">https://wiki.archlinux.org/title/Trusted_Platform_Module</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SSH JUMP]]></title>
            <guid>467ef73264e543968067852c5cb3a65a</guid>
            <pubDate>Tue, 02 May 2023 14:19:01 GMT</pubDate>
            <content:encoded><![CDATA[<p>SSH JUMP</p>
<p>前輩的介紹之下做了一下ssh jump 的測試，其實這工具真的非常好用且方便。</p>
<p>測試環境：<br />
proxyNode // DMZ 外，限定來源IP<br />
targetNode // DMZ 內，受保護服務</p>
<p>之前我要從 client ssh 到 targetNode 需要<br />
ssh 到 proxyNode ; 再從 proxyNode ssh 到 targetNode<br />
且可能會把 ssh private key 放到 proxyNode! // 危險!</p>
<p>用了 proxy jump 之後，基本用法就是</p>
<div><pre class="hljs"><code><span class="hljs-attribute">ssh -J proxyNode targetNode</span></code></pre></div>
<p>且不需要把 private key 放到 proxyNode // 安全!</p>
<p>jump 也可以一直跳下去</p>
<div><pre class="hljs"><code><span class="hljs-attribute">ssh</span> -J jumpuser1<span class="hljs-variable">@jump1</span>,jumpuser2<span class="hljs-variable">@jump2</span>,...,jumpuserN<span class="hljs-variable">@jumpN</span> user<span class="hljs-variable">@host</span></code></pre></div>
<p>透過ssh jump 可以直接連到 DMZ 但是有時候需要檔案I/O，例如 scp, rsync, sshfs</p>
<div><pre class="hljs"><code><span class="hljs-comment"># sshfs</span>
sshfs -o ssh_command=<span class="hljs-string">"ssh -J B_host"</span> C_host:/&lt;path&gt; &lt;mountpoint&gt; 

<span class="hljs-comment"># or rsync</span>
rsync -azv -e <span class="hljs-string">'ssh -A -J USER@PROXYHOST:PORT'</span> foo<span class="hljs-regexp">/ dest:./</span>foo/

<span class="hljs-comment"># or scp</span>
scp -J username@B username@C:<span class="hljs-regexp">/some/</span>path <span class="hljs-regexp">/some/</span>path</code></pre></div>
<p>最後建議用 .ssh/config , 設定如下：</p>
<div><pre class="hljs"><code>Host targetNode
    HostName targetNode.example.org
    IdentityFile ~/.ssh/targetNode.pem
    <span class="hljs-keyword">User</span> <span class="hljs-title">user1</span>
    ProxyJump proxyNode

Host proxyNode
    HostName proxyNode.example.org	
    IdentityFile ~/.ssh/id_rsa
    Port <span class="hljs-number">22</span>
    <span class="hljs-keyword">User</span> <span class="hljs-title">user2</span></code></pre></div>
<p>因為都用 key 登入，所以直接下 ssh targetNode 會自動 jump 。</p>
<p>另外 sshfs, scp, rsync 在有設定 config 的情況下使用，可以少很多參數。</p>
<p>例如</p>
<div><pre class="hljs"><code>sshfs targetNode:<span class="hljs-regexp">/etc /</span>etc</code></pre></div>
<p>以上，我開始重新設定所有的 ssh 都儘量改用 jump！</p>
<p>reference:<br />
<a title="https://serverfault.com/questions/941934/sshfs-over-a-jumphost" href="https://serverfault.com/questions/941934/sshfs-over-a-jumphost">https://serverfault.com/questions/941934/sshfs-over-a-jumphost</a><br />
<a title="https://blog.wu-boy.com/2016/10/ssh-agent-forwarding-proxycommand-tutorial/" href="https://blog.wu-boy.com/2016/10/ssh-agent-forwarding-proxycommand-tutorial/">https://blog.wu-boy.com/2016/10/ssh-agent-forwarding-proxycommand-tutorial/</a><br />
<a title="https://www.tecmint.com/access-linux-server-using-a-jump-host/" href="https://www.tecmint.com/access-linux-server-using-a-jump-host/">https://www.tecmint.com/access-linux-server-using-a-jump-host/</a><br />
<a title="https://nyogjtrc.github.io/posts/2020/03/ssh-proxyjump/" href="https://nyogjtrc.github.io/posts/2020/03/ssh-proxyjump/">https://nyogjtrc.github.io/posts/2020/03/ssh-proxyjump/</a><br />
<a title="https://mperdikeas.github.io/networking.html.files/scp-a-file-through-jump-host.html" href="https://mperdikeas.github.io/networking.html.files/scp-a-file-through-jump-host.html">https://mperdikeas.github.io/networking.html.files/scp-a-file-through-jump-host.html</a></p>
]]></content:encoded>
        </item>
    </channel>
</rss>